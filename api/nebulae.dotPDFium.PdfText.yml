### YamlMime:ManagedReference
items:
- uid: nebulae.dotPDFium.PdfText
  commentId: T:nebulae.dotPDFium.PdfText
  id: PdfText
  parent: nebulae.dotPDFium
  children:
  - nebulae.dotPDFium.PdfText.CloseWebLinks
  - nebulae.dotPDFium.PdfText.CountChars
  - nebulae.dotPDFium.PdfText.CountRects(System.Int32,System.Int32)
  - nebulae.dotPDFium.PdfText.Dispose(System.Boolean)
  - nebulae.dotPDFium.PdfText.Find(System.String,System.Boolean,System.Boolean,System.Int32)
  - nebulae.dotPDFium.PdfText.GetChar(System.Int32)
  - nebulae.dotPDFium.PdfText.GetCharAngle(System.Int32)
  - nebulae.dotPDFium.PdfText.GetCharBox(System.Int32,System.Double@,System.Double@,System.Double@,System.Double@)
  - nebulae.dotPDFium.PdfText.GetCharIndexAtPos(System.Double,System.Double,System.Double,System.Double)
  - nebulae.dotPDFium.PdfText.GetCharIndexFromTextIndex(System.Int32)
  - nebulae.dotPDFium.PdfText.GetCharOrigin(System.Int32,System.Double@,System.Double@)
  - nebulae.dotPDFium.PdfText.GetFillColor(System.Int32)
  - nebulae.dotPDFium.PdfText.GetFontInfo(System.Int32)
  - nebulae.dotPDFium.PdfText.GetFontSize(System.Int32)
  - nebulae.dotPDFium.PdfText.GetFontWeight(System.Int32)
  - nebulae.dotPDFium.PdfText.GetLooseCharBox(System.Int32)
  - nebulae.dotPDFium.PdfText.GetMatrix(System.Int32)
  - nebulae.dotPDFium.PdfText.GetStrokeColor(System.Int32)
  - nebulae.dotPDFium.PdfText.GetTextIndexFromCharIndex(System.Int32)
  - nebulae.dotPDFium.PdfText.GetTextObject(System.Int32)
  - nebulae.dotPDFium.PdfText.GetTextRange(System.Int32,System.Int32)
  - nebulae.dotPDFium.PdfText.HasUnicodeMapError(System.Int32)
  - nebulae.dotPDFium.PdfText.IsGenerated(System.Int32)
  - nebulae.dotPDFium.PdfText.IsHyphen(System.Int32)
  - nebulae.dotPDFium.PdfText.LoadWebLinks
  - nebulae.dotPDFium.PdfText.TryCountRects(System.Int32,System.Int32,System.Int32)
  - nebulae.dotPDFium.PdfText.TryGetCharBox(System.Int32,System.Double@,System.Double@,System.Double@,System.Double@)
  - nebulae.dotPDFium.PdfText.TryGetCharIndexAtPos(System.Double,System.Double,System.Int32@,System.Double,System.Double)
  - nebulae.dotPDFium.PdfText.TryGetCharOrigin(System.Int32,System.Double@,System.Double@)
  - nebulae.dotPDFium.PdfText.TryGetTextRange(System.Int32,System.Int32,System.String@)
  - nebulae.dotPDFium.PdfText.WebLinkCount
  langs:
  - csharp
  - vb
  name: PdfText
  nameWithType: PdfText
  fullName: nebulae.dotPDFium.PdfText
  type: Class
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: PdfText
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 6
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  syntax:
    content: 'public class PdfText : PdfObject, IDisposable'
    content.vb: Public Class PdfText Inherits PdfObject Implements IDisposable
  inheritance:
  - System.Object
  - nebulae.dotPDFium.PdfObject
  implements:
  - System.IDisposable
  inheritedMembers:
  - nebulae.dotPDFium.PdfObject._handle
  - nebulae.dotPDFium.PdfObject._type
  - nebulae.dotPDFium.PdfObject._disposed
  - nebulae.dotPDFium.PdfObject.Handle
  - nebulae.dotPDFium.PdfObject.Type
  - nebulae.dotPDFium.PdfObject.IsDisposed
  - nebulae.dotPDFium.PdfObject.GetPDFiumError
  - nebulae.dotPDFium.PdfObject.Dispose
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: nebulae.dotPDFium.PdfText.CountChars
  commentId: P:nebulae.dotPDFium.PdfText.CountChars
  id: CountChars
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: CountChars
  nameWithType: PdfText.CountChars
  fullName: nebulae.dotPDFium.PdfText.CountChars
  type: Property
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: CountChars
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 30
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Gets the total number of characters in the associated PDF text.
  example: []
  syntax:
    content: public int CountChars { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property CountChars As Integer
  overload: nebulae.dotPDFium.PdfText.CountChars*
- uid: nebulae.dotPDFium.PdfText.GetChar(System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.GetChar(System.Int32)
  id: GetChar(System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: GetChar(int)
  nameWithType: PdfText.GetChar(int)
  fullName: nebulae.dotPDFium.PdfText.GetChar(int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: GetChar
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 41
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Gets the character at the specified index in the associated PDF text.
  example: []
  syntax:
    content: public uint GetChar(int index)
    parameters:
    - id: index
      type: System.Int32
      description: ''
    return:
      type: System.UInt32
      description: ''
    content.vb: Public Function GetChar(index As Integer) As UInteger
  overload: nebulae.dotPDFium.PdfText.GetChar*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: ''
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: PdfText.GetChar(Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.GetChar(Integer)
  name.vb: GetChar(Integer)
- uid: nebulae.dotPDFium.PdfText.GetCharAngle(System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.GetCharAngle(System.Int32)
  id: GetCharAngle(System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: GetCharAngle(int)
  nameWithType: PdfText.GetCharAngle(int)
  fullName: nebulae.dotPDFium.PdfText.GetCharAngle(int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: GetCharAngle
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 60
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Retrieves the rotation angle of the character at the specified index within the text object.
  example: []
  syntax:
    content: public float GetCharAngle(int index)
    parameters:
    - id: index
      type: System.Int32
      description: >-
        The zero-based index of the character whose rotation angle is to be retrieved.  
            Must be within the range of 0 to the total number of characters minus one.
    return:
      type: System.Single
      description: The rotation angle of the character at the specified index, in degrees.
    content.vb: Public Function GetCharAngle(index As Integer) As Single
  overload: nebulae.dotPDFium.PdfText.GetCharAngle*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      Thrown if <code class="paramref">index</code> is less than 0 or 
          greater than or equal to the total number of characters.
  nameWithType.vb: PdfText.GetCharAngle(Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.GetCharAngle(Integer)
  name.vb: GetCharAngle(Integer)
- uid: nebulae.dotPDFium.PdfText.GetCharBox(System.Int32,System.Double@,System.Double@,System.Double@,System.Double@)
  commentId: M:nebulae.dotPDFium.PdfText.GetCharBox(System.Int32,System.Double@,System.Double@,System.Double@,System.Double@)
  id: GetCharBox(System.Int32,System.Double@,System.Double@,System.Double@,System.Double@)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: GetCharBox(int, out double, out double, out double, out double)
  nameWithType: PdfText.GetCharBox(int, out double, out double, out double, out double)
  fullName: nebulae.dotPDFium.PdfText.GetCharBox(int, out double, out double, out double, out double)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: GetCharBox
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 79
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Gets the bounding box of the character at the specified index in the associated PDF text.
  example: []
  syntax:
    content: public bool GetCharBox(int index, out double left, out double right, out double bottom, out double top)
    parameters:
    - id: index
      type: System.Int32
      description: The index of the character
    - id: left
      type: System.Double
      description: The out paramater for the left dimension
    - id: right
      type: System.Double
      description: The out parameter for the right dimension
    - id: bottom
      type: System.Double
      description: The out parameter for the bottom dimension
    - id: top
      type: System.Double
      description: The out parameter for the top dimension
    return:
      type: System.Boolean
      description: The bounding box of the chacter in the out parameters
    content.vb: Public Function GetCharBox(index As Integer, left As Double, right As Double, bottom As Double, top As Double) As Boolean
  overload: nebulae.dotPDFium.PdfText.GetCharBox*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Throws if the PdfText object has been disposed
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Throws if the index is out of range
  nameWithType.vb: PdfText.GetCharBox(Integer, Double, Double, Double, Double)
  fullName.vb: nebulae.dotPDFium.PdfText.GetCharBox(Integer, Double, Double, Double, Double)
  name.vb: GetCharBox(Integer, Double, Double, Double, Double)
- uid: nebulae.dotPDFium.PdfText.TryGetCharBox(System.Int32,System.Double@,System.Double@,System.Double@,System.Double@)
  commentId: M:nebulae.dotPDFium.PdfText.TryGetCharBox(System.Int32,System.Double@,System.Double@,System.Double@,System.Double@)
  id: TryGetCharBox(System.Int32,System.Double@,System.Double@,System.Double@,System.Double@)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: TryGetCharBox(int, out double, out double, out double, out double)
  nameWithType: PdfText.TryGetCharBox(int, out double, out double, out double, out double)
  fullName: nebulae.dotPDFium.PdfText.TryGetCharBox(int, out double, out double, out double, out double)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: TryGetCharBox
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 99
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  syntax:
    content: public bool TryGetCharBox(int index, out double left, out double right, out double bottom, out double top)
    parameters:
    - id: index
      type: System.Int32
    - id: left
      type: System.Double
    - id: right
      type: System.Double
    - id: bottom
      type: System.Double
    - id: top
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Function TryGetCharBox(index As Integer, left As Double, right As Double, bottom As Double, top As Double) As Boolean
  overload: nebulae.dotPDFium.PdfText.TryGetCharBox*
  nameWithType.vb: PdfText.TryGetCharBox(Integer, Double, Double, Double, Double)
  fullName.vb: nebulae.dotPDFium.PdfText.TryGetCharBox(Integer, Double, Double, Double, Double)
  name.vb: TryGetCharBox(Integer, Double, Double, Double, Double)
- uid: nebulae.dotPDFium.PdfText.GetCharIndexAtPos(System.Double,System.Double,System.Double,System.Double)
  commentId: M:nebulae.dotPDFium.PdfText.GetCharIndexAtPos(System.Double,System.Double,System.Double,System.Double)
  id: GetCharIndexAtPos(System.Double,System.Double,System.Double,System.Double)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: GetCharIndexAtPos(double, double, double, double)
  nameWithType: PdfText.GetCharIndexAtPos(double, double, double, double)
  fullName: nebulae.dotPDFium.PdfText.GetCharIndexAtPos(double, double, double, double)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: GetCharIndexAtPos
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 123
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Gets the index of the character located at the specified position within the text.
  example: []
  syntax:
    content: public int GetCharIndexAtPos(double x, double y, double xTolerance = 2, double yTolerance = 2)
    parameters:
    - id: x
      type: System.Double
      description: The x-coordinate of the position to check, in device-independent points.
    - id: y
      type: System.Double
      description: The y-coordinate of the position to check, in device-independent points.
    - id: xTolerance
      type: System.Double
      description: >-
        The horizontal tolerance, in device-independent points, for matching the position to a character. Defaults to
            2.0.
    - id: yTolerance
      type: System.Double
      description: The vertical tolerance, in device-independent points, for matching the position to a character. Defaults to 2.0.
    return:
      type: System.Int32
      description: >-
        The zero-based index of the character at the specified position, or -1 if no character is found within the
            specified tolerances.
    content.vb: Public Function GetCharIndexAtPos(x As Double, y As Double, xTolerance As Double = 2, yTolerance As Double = 2) As Integer
  overload: nebulae.dotPDFium.PdfText.GetCharIndexAtPos*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the underlying text object has been disposed.
  nameWithType.vb: PdfText.GetCharIndexAtPos(Double, Double, Double, Double)
  fullName.vb: nebulae.dotPDFium.PdfText.GetCharIndexAtPos(Double, Double, Double, Double)
  name.vb: GetCharIndexAtPos(Double, Double, Double, Double)
- uid: nebulae.dotPDFium.PdfText.TryGetCharIndexAtPos(System.Double,System.Double,System.Int32@,System.Double,System.Double)
  commentId: M:nebulae.dotPDFium.PdfText.TryGetCharIndexAtPos(System.Double,System.Double,System.Int32@,System.Double,System.Double)
  id: TryGetCharIndexAtPos(System.Double,System.Double,System.Int32@,System.Double,System.Double)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: TryGetCharIndexAtPos(double, double, out int, double, double)
  nameWithType: PdfText.TryGetCharIndexAtPos(double, double, out int, double, double)
  fullName: nebulae.dotPDFium.PdfText.TryGetCharIndexAtPos(double, double, out int, double, double)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: TryGetCharIndexAtPos
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 146
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Attempts to retrieve the character index at the specified position within the document.
  remarks: >-
    This method returns <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> if the underlying document handle is invalid or
        if no character is found at the specified position within the given tolerances.
  example: []
  syntax:
    content: public bool TryGetCharIndexAtPos(double x, double y, out int index, double xTolerance = 2, double yTolerance = 2)
    parameters:
    - id: x
      type: System.Double
      description: The x-coordinate of the position, in device-independent points.
    - id: y
      type: System.Double
      description: The y-coordinate of the position, in device-independent points.
    - id: index
      type: System.Int32
      description: >-
        When this method returns, contains the zero-based index of the character at the specified position, if the
            operation succeeds. If the operation fails, this will be set to 0.
    - id: xTolerance
      type: System.Double
      description: >-
        The horizontal tolerance, in device-independent points, for determining the character at the position. The
            default value is 2.0.
    - id: yTolerance
      type: System.Double
      description: >-
        The vertical tolerance, in device-independent points, for determining the character at the position. The default
            value is 2.0.
    return:
      type: System.Boolean
      description: >-
        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if a character index was successfully retrieved at the specified position; otherwise,
            <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function TryGetCharIndexAtPos(x As Double, y As Double, index As Integer, xTolerance As Double = 2, yTolerance As Double = 2) As Boolean
  overload: nebulae.dotPDFium.PdfText.TryGetCharIndexAtPos*
  nameWithType.vb: PdfText.TryGetCharIndexAtPos(Double, Double, Integer, Double, Double)
  fullName.vb: nebulae.dotPDFium.PdfText.TryGetCharIndexAtPos(Double, Double, Integer, Double, Double)
  name.vb: TryGetCharIndexAtPos(Double, Double, Integer, Double, Double)
- uid: nebulae.dotPDFium.PdfText.GetFillColor(System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.GetFillColor(System.Int32)
  id: GetFillColor(System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: GetFillColor(int)
  nameWithType: PdfText.GetFillColor(int)
  fullName: nebulae.dotPDFium.PdfText.GetFillColor(int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: GetFillColor
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 170
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Retrieves the fill color of the character at the specified index.
  example: []
  syntax:
    content: public RgbaColor? GetFillColor(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the character whose fill color is to be retrieved.
    return:
      type: System.Nullable{nebulae.dotPDFium.Native.RgbaColor}
      description: >-
        An <xref href="nebulae.dotPDFium.Native.RgbaColor" data-throw-if-not-resolved="false"></xref> representing the fill color of the character, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if the fill
            color is not available.
    content.vb: Public Function GetFillColor(index As Integer) As RgbaColor?
  overload: nebulae.dotPDFium.PdfText.GetFillColor*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the object has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if <code class="paramref">index</code> is less than 0 or greater than or equal to the total number of characters.
  nameWithType.vb: PdfText.GetFillColor(Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.GetFillColor(Integer)
  name.vb: GetFillColor(Integer)
- uid: nebulae.dotPDFium.PdfText.GetFontInfo(System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.GetFontInfo(System.Int32)
  id: GetFontInfo(System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: GetFontInfo(int)
  nameWithType: PdfText.GetFontInfo(int)
  fullName: nebulae.dotPDFium.PdfText.GetFontInfo(int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: GetFontInfo
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 198
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Retrieves font information for the character at the specified index.
  example: []
  syntax:
    content: public PdfFontInfo? GetFontInfo(int index)
    parameters:
    - id: index
      type: System.Int32
      description: >-
        The zero-based index of the character for which to retrieve font information. Must be within the range of
            available characters.
    return:
      type: nebulae.dotPDFium.PdfFontInfo
      description: >-
        A <xref href="nebulae.dotPDFium.PdfFontInfo" data-throw-if-not-resolved="false"></xref> object containing the font name and style flags for the specified character,  or
            <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if the font information cannot be retrieved. Flags can be checked using the PdfFontFlags enum and .HasFlag().
    content.vb: Public Function GetFontInfo(index As Integer) As PdfFontInfo
  overload: nebulae.dotPDFium.PdfText.GetFontInfo*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the <xref href="nebulae.dotPDFium.PdfText" data-throw-if-not-resolved="false"></xref> object has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      Thrown if <code class="paramref">index</code> is less than 0 or greater than or equal 
          to the total number of characters.
  nameWithType.vb: PdfText.GetFontInfo(Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.GetFontInfo(Integer)
  name.vb: GetFontInfo(Integer)
- uid: nebulae.dotPDFium.PdfText.GetFontSize(System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.GetFontSize(System.Int32)
  id: GetFontSize(System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: GetFontSize(int)
  nameWithType: PdfText.GetFontSize(int)
  fullName: nebulae.dotPDFium.PdfText.GetFontSize(int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: GetFontSize
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 231
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Retrieves the font size of the character at the specified index in the text.
  example: []
  syntax:
    content: public double GetFontSize(int index)
    parameters:
    - id: index
      type: System.Int32
      description: >-
        The zero-based index of the character whose font size is to be retrieved.  Must be within the range of 0 to the
            total character count minus one.
    return:
      type: System.Double
      description: The font size of the character at the specified index, expressed as a <xref href="System.Double" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function GetFontSize(index As Integer) As Double
  overload: nebulae.dotPDFium.PdfText.GetFontSize*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the underlying text object has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if <code class="paramref">index</code> is less than 0 or greater than or equal to the total character count.
  nameWithType.vb: PdfText.GetFontSize(Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.GetFontSize(Integer)
  name.vb: GetFontSize(Integer)
- uid: nebulae.dotPDFium.PdfText.GetFontWeight(System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.GetFontWeight(System.Int32)
  id: GetFontWeight(System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: GetFontWeight(int)
  nameWithType: PdfText.GetFontWeight(int)
  fullName: nebulae.dotPDFium.PdfText.GetFontWeight(int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: GetFontWeight
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 253
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Retrieves the font weight of the character at the specified index.
  example: []
  syntax:
    content: public int GetFontWeight(int index)
    parameters:
    - id: index
      type: System.Int32
      description: >-
        The zero-based index of the character whose font weight is to be retrieved.  Must be within the range of
            available characters.
    return:
      type: System.Int32
      description: >-
        An integer representing the font weight of the specified character.  The value corresponds to the font weight as
            defined in the PDF document.
    content.vb: Public Function GetFontWeight(index As Integer) As Integer
  overload: nebulae.dotPDFium.PdfText.GetFontWeight*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the underlying PDF text object has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      Thrown if <code class="paramref">index</code> is less than 0 or greater than or equal to 
          the total number of characters.
  nameWithType.vb: PdfText.GetFontWeight(Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.GetFontWeight(Integer)
  name.vb: GetFontWeight(Integer)
- uid: nebulae.dotPDFium.PdfText.GetLooseCharBox(System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.GetLooseCharBox(System.Int32)
  id: GetLooseCharBox(System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: GetLooseCharBox(int)
  nameWithType: PdfText.GetLooseCharBox(int)
  fullName: nebulae.dotPDFium.PdfText.GetLooseCharBox(int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: GetLooseCharBox
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 275
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Retrieves the loose bounding box of a character at the specified index within the text.
  remarks: >-
    The loose bounding box may include additional space around the character, such as padding or
        spacing,  depending on the font and rendering context.
  example: []
  syntax:
    content: public FsRectF? GetLooseCharBox(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the character whose bounding box is to be retrieved.
    return:
      type: System.Nullable{nebulae.dotPDFium.Native.FsRectF}
      description: >-
        A <xref href="nebulae.dotPDFium.Native.FsRectF" data-throw-if-not-resolved="false"></xref> structure representing the loose bounding box of the character if successful; 
            otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    content.vb: Public Function GetLooseCharBox(index As Integer) As FsRectF?
  overload: nebulae.dotPDFium.PdfText.GetLooseCharBox*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the text object has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      Thrown if <code class="paramref">index</code> is less than 0 or greater 
          than or equal to the total number of characters.
  nameWithType.vb: PdfText.GetLooseCharBox(Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.GetLooseCharBox(Integer)
  name.vb: GetLooseCharBox(Integer)
- uid: nebulae.dotPDFium.PdfText.GetMatrix(System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.GetMatrix(System.Int32)
  id: GetMatrix(System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: GetMatrix(int)
  nameWithType: PdfText.GetMatrix(int)
  fullName: nebulae.dotPDFium.PdfText.GetMatrix(int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: GetMatrix
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 299
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Retrieves the transformation matrix for the character at the specified index.
  remarks: >-
    The transformation matrix describes how the character is positioned and scaled within the
        document.
  example: []
  syntax:
    content: public FsMatrix? GetMatrix(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the character for which to retrieve the transformation matrix.
    return:
      type: System.Nullable{nebulae.dotPDFium.Native.FsMatrix}
      description: >-
        An <xref href="nebulae.dotPDFium.Native.FsMatrix" data-throw-if-not-resolved="false"></xref> representing the transformation matrix of the character if the operation is
            successful;  otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    content.vb: Public Function GetMatrix(index As Integer) As FsMatrix?
  overload: nebulae.dotPDFium.PdfText.GetMatrix*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the object has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      Thrown if <code class="paramref">index</code> is less than 0 or greater than 
          or equal to the total number of characters.
  nameWithType.vb: PdfText.GetMatrix(Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.GetMatrix(Integer)
  name.vb: GetMatrix(Integer)
- uid: nebulae.dotPDFium.PdfText.GetStrokeColor(System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.GetStrokeColor(System.Int32)
  id: GetStrokeColor(System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: GetStrokeColor(int)
  nameWithType: PdfText.GetStrokeColor(int)
  fullName: nebulae.dotPDFium.PdfText.GetStrokeColor(int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: GetStrokeColor
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 320
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Retrieves the stroke color of the character at the specified index.
  example: []
  syntax:
    content: public RgbaColor? GetStrokeColor(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the character whose stroke color is to be retrieved.
    return:
      type: System.Nullable{nebulae.dotPDFium.Native.RgbaColor}
      description: >-
        An <xref href="nebulae.dotPDFium.Native.RgbaColor" data-throw-if-not-resolved="false"></xref> representing the stroke color of the character, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>  if the
            stroke color could not be determined.
    content.vb: Public Function GetStrokeColor(index As Integer) As RgbaColor?
  overload: nebulae.dotPDFium.PdfText.GetStrokeColor*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the object has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if <code class="paramref">index</code> is less than 0 or greater than or equal to the total number of characters.
  nameWithType.vb: PdfText.GetStrokeColor(Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.GetStrokeColor(Integer)
  name.vb: GetStrokeColor(Integer)
- uid: nebulae.dotPDFium.PdfText.GetTextObject(System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.GetTextObject(System.Int32)
  id: GetTextObject(System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: GetTextObject(int)
  nameWithType: PdfText.GetTextObject(int)
  fullName: nebulae.dotPDFium.PdfText.GetTextObject(int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: GetTextObject
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 342
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Retrieves the text object at the specified index within the PDF text.
  example: []
  syntax:
    content: public PdfTextObject? GetTextObject(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the text object to retrieve. Must be within the range of available text objects.
    return:
      type: nebulae.dotPDFium.PdfTextObject
      description: >-
        A <xref href="nebulae.dotPDFium.PdfTextObject" data-throw-if-not-resolved="false"></xref> representing the text object at the specified index,  or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if
            no text object exists at the specified index.
    content.vb: Public Function GetTextObject(index As Integer) As PdfTextObject
  overload: nebulae.dotPDFium.PdfText.GetTextObject*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the current <xref href="nebulae.dotPDFium.PdfText" data-throw-if-not-resolved="false"></xref> instance has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if <code class="paramref">index</code> is less than 0 or greater than or equal to the total number of text objects.
  nameWithType.vb: PdfText.GetTextObject(Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.GetTextObject(Integer)
  name.vb: GetTextObject(Integer)
- uid: nebulae.dotPDFium.PdfText.GetTextRange(System.Int32,System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.GetTextRange(System.Int32,System.Int32)
  id: GetTextRange(System.Int32,System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: GetTextRange(int, int)
  nameWithType: PdfText.GetTextRange(int, int)
  fullName: nebulae.dotPDFium.PdfText.GetTextRange(int, int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: GetTextRange
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 365
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Returns the chacters from the specified index and count from the associated PDF text.
  example: []
  syntax:
    content: public string GetTextRange(int index, int count)
    parameters:
    - id: index
      type: System.Int32
      description: The starting character index
    - id: count
      type: System.Int32
      description: The number of characters to return
    return:
      type: System.String
      description: A string from the start charcter and reading the specified number of characters
    content.vb: Public Function GetTextRange(index As Integer, count As Integer) As String
  overload: nebulae.dotPDFium.PdfText.GetTextRange*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Throws if the PdfText object has been disposed
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Throws if the starting index or the ending index are out of bounds
  nameWithType.vb: PdfText.GetTextRange(Integer, Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.GetTextRange(Integer, Integer)
  name.vb: GetTextRange(Integer, Integer)
- uid: nebulae.dotPDFium.PdfText.TryGetTextRange(System.Int32,System.Int32,System.String@)
  commentId: M:nebulae.dotPDFium.PdfText.TryGetTextRange(System.Int32,System.Int32,System.String@)
  id: TryGetTextRange(System.Int32,System.Int32,System.String@)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: TryGetTextRange(int, int, out string)
  nameWithType: PdfText.TryGetTextRange(int, int, out string)
  fullName: nebulae.dotPDFium.PdfText.TryGetTextRange(int, int, out string)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: TryGetTextRange
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 394
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Returns the chacters from the specified index and count from the associated PDF text.
  example: []
  syntax:
    content: public bool TryGetTextRange(int index, int count, out string text)
    parameters:
    - id: index
      type: System.Int32
      description: The starting character index
    - id: count
      type: System.Int32
      description: The number of characters to return
    - id: text
      type: System.String
    return:
      type: System.Boolean
      description: >-
        A string from the start charcter and reading the specified number of characters and
            true on success, false on failure
    content.vb: Public Function TryGetTextRange(index As Integer, count As Integer, text As String) As Boolean
  overload: nebulae.dotPDFium.PdfText.TryGetTextRange*
  nameWithType.vb: PdfText.TryGetTextRange(Integer, Integer, String)
  fullName.vb: nebulae.dotPDFium.PdfText.TryGetTextRange(Integer, Integer, String)
  name.vb: TryGetTextRange(Integer, Integer, String)
- uid: nebulae.dotPDFium.PdfText.GetCharOrigin(System.Int32,System.Double@,System.Double@)
  commentId: M:nebulae.dotPDFium.PdfText.GetCharOrigin(System.Int32,System.Double@,System.Double@)
  id: GetCharOrigin(System.Int32,System.Double@,System.Double@)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: GetCharOrigin(int, out double, out double)
  nameWithType: PdfText.GetCharOrigin(int, out double, out double)
  fullName: nebulae.dotPDFium.PdfText.GetCharOrigin(int, out double, out double)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: GetCharOrigin
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 430
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  syntax:
    content: public bool GetCharOrigin(int index, out double x, out double y)
    parameters:
    - id: index
      type: System.Int32
    - id: x
      type: System.Double
    - id: y
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Function GetCharOrigin(index As Integer, x As Double, y As Double) As Boolean
  overload: nebulae.dotPDFium.PdfText.GetCharOrigin*
  nameWithType.vb: PdfText.GetCharOrigin(Integer, Double, Double)
  fullName.vb: nebulae.dotPDFium.PdfText.GetCharOrigin(Integer, Double, Double)
  name.vb: GetCharOrigin(Integer, Double, Double)
- uid: nebulae.dotPDFium.PdfText.TryGetCharOrigin(System.Int32,System.Double@,System.Double@)
  commentId: M:nebulae.dotPDFium.PdfText.TryGetCharOrigin(System.Int32,System.Double@,System.Double@)
  id: TryGetCharOrigin(System.Int32,System.Double@,System.Double@)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: TryGetCharOrigin(int, out double, out double)
  nameWithType: PdfText.TryGetCharOrigin(int, out double, out double)
  fullName: nebulae.dotPDFium.PdfText.TryGetCharOrigin(int, out double, out double)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: TryGetCharOrigin
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 448
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  syntax:
    content: public bool TryGetCharOrigin(int index, out double x, out double y)
    parameters:
    - id: index
      type: System.Int32
    - id: x
      type: System.Double
    - id: y
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Function TryGetCharOrigin(index As Integer, x As Double, y As Double) As Boolean
  overload: nebulae.dotPDFium.PdfText.TryGetCharOrigin*
  nameWithType.vb: PdfText.TryGetCharOrigin(Integer, Double, Double)
  fullName.vb: nebulae.dotPDFium.PdfText.TryGetCharOrigin(Integer, Double, Double)
  name.vb: TryGetCharOrigin(Integer, Double, Double)
- uid: nebulae.dotPDFium.PdfText.CountRects(System.Int32,System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.CountRects(System.Int32,System.Int32)
  id: CountRects(System.Int32,System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: CountRects(int, int)
  nameWithType: PdfText.CountRects(int, int)
  fullName: nebulae.dotPDFium.PdfText.CountRects(int, int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: CountRects
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 466
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Counts how many bounding rectangles exist for a specific range of characters in the associated PDF text.
  example: []
  syntax:
    content: public int CountRects(int startIndex, int count)
    parameters:
    - id: startIndex
      type: System.Int32
      description: The starting index of the character to begin counting bounding rectangles
    - id: count
      type: System.Int32
      description: The count of characters to count bounding rectangles for
    return:
      type: System.Int32
      description: The number of bounding rectangles that exist for the specified range of characters
    content.vb: Public Function CountRects(startIndex As Integer, count As Integer) As Integer
  overload: nebulae.dotPDFium.PdfText.CountRects*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: ''
  nameWithType.vb: PdfText.CountRects(Integer, Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.CountRects(Integer, Integer)
  name.vb: CountRects(Integer, Integer)
- uid: nebulae.dotPDFium.PdfText.TryCountRects(System.Int32,System.Int32,System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.TryCountRects(System.Int32,System.Int32,System.Int32)
  id: TryCountRects(System.Int32,System.Int32,System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: TryCountRects(int, int, int)
  nameWithType: PdfText.TryCountRects(int, int, int)
  fullName: nebulae.dotPDFium.PdfText.TryCountRects(int, int, int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: TryCountRects
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 481
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Counts how many bounding rectangles exist for a specific range of characters in the associated PDF text.
  example: []
  syntax:
    content: public bool TryCountRects(int startIndex, int count, int rects)
    parameters:
    - id: startIndex
      type: System.Int32
      description: The starting index of the character to begin counting bounding rectangles
    - id: count
      type: System.Int32
      description: The count of characters to count bounding rectangles for
    - id: rects
      type: System.Int32
      description: The out parameter to hold The number of bounding rectangles that exist for the specified range of characters
    return:
      type: System.Boolean
      description: true on success, false on failure
    content.vb: Public Function TryCountRects(startIndex As Integer, count As Integer, rects As Integer) As Boolean
  overload: nebulae.dotPDFium.PdfText.TryCountRects*
  nameWithType.vb: PdfText.TryCountRects(Integer, Integer, Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.TryCountRects(Integer, Integer, Integer)
  name.vb: TryCountRects(Integer, Integer, Integer)
- uid: nebulae.dotPDFium.PdfText.Find(System.String,System.Boolean,System.Boolean,System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.Find(System.String,System.Boolean,System.Boolean,System.Int32)
  id: Find(System.String,System.Boolean,System.Boolean,System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: Find(string, bool, bool, int)
  nameWithType: PdfText.Find(string, bool, bool, int)
  fullName: nebulae.dotPDFium.PdfText.Find(string, bool, bool, int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: Find
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 503
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Searches for the specified text in the associated PDF text. The search can be case-sensitive and/or whole-word only.
  example: []
  syntax:
    content: public PdfTextSearch Find(string searchTerm, bool matchCase = false, bool matchWholeWord = false, int startIndex = 0)
    parameters:
    - id: searchTerm
      type: System.String
      description: The term to search for
    - id: matchCase
      type: System.Boolean
      description: A boolean indicating whether or not the search should be case-sensitive
    - id: matchWholeWord
      type: System.Boolean
      description: Flag indicating whether or not the search whould match the whole-word only
    - id: startIndex
      type: System.Int32
      description: The index of the character to begin searching at
    return:
      type: nebulae.dotPDFium.PdfTextSearch
      description: A PdfTextSearch result
    content.vb: Public Function Find(searchTerm As String, matchCase As Boolean = False, matchWholeWord As Boolean = False, startIndex As Integer = 0) As PdfTextSearch
  overload: nebulae.dotPDFium.PdfText.Find*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Throws if the search term is null or empty
  - type: nebulae.dotPDFium.dotPDFiumException
    commentId: T:nebulae.dotPDFium.dotPDFiumException
    description: Throws on a PDFium library error
  nameWithType.vb: PdfText.Find(String, Boolean, Boolean, Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.Find(String, Boolean, Boolean, Integer)
  name.vb: Find(String, Boolean, Boolean, Integer)
- uid: nebulae.dotPDFium.PdfText.GetCharIndexFromTextIndex(System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.GetCharIndexFromTextIndex(System.Int32)
  id: GetCharIndexFromTextIndex(System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: GetCharIndexFromTextIndex(int)
  nameWithType: PdfText.GetCharIndexFromTextIndex(int)
  fullName: nebulae.dotPDFium.PdfText.GetCharIndexFromTextIndex(int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: GetCharIndexFromTextIndex
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 529
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Converts a text index to the corresponding character index within the document.
  remarks: >-
    This method maps a logical text index to its associated character index, which can be used
        for further text processing. Ensure that the provided <code class="paramref">textIndex</code> is within the bounds of the
        document's text content to avoid exceptions.
  example: []
  syntax:
    content: public int GetCharIndexFromTextIndex(int textIndex)
    parameters:
    - id: textIndex
      type: System.Int32
      description: >-
        The zero-based index of the text element to be converted. Must be a valid index within the document's text
            content.
    return:
      type: System.Int32
      description: The zero-based character index corresponding to the specified text index.
    content.vb: Public Function GetCharIndexFromTextIndex(textIndex As Integer) As Integer
  overload: nebulae.dotPDFium.PdfText.GetCharIndexFromTextIndex*
  nameWithType.vb: PdfText.GetCharIndexFromTextIndex(Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.GetCharIndexFromTextIndex(Integer)
  name.vb: GetCharIndexFromTextIndex(Integer)
- uid: nebulae.dotPDFium.PdfText.GetTextIndexFromCharIndex(System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.GetTextIndexFromCharIndex(System.Int32)
  id: GetTextIndexFromCharIndex(System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: GetTextIndexFromCharIndex(int)
  nameWithType: PdfText.GetTextIndexFromCharIndex(int)
  fullName: nebulae.dotPDFium.PdfText.GetTextIndexFromCharIndex(int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: GetTextIndexFromCharIndex
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 542
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Converts a character index to the corresponding text index in the document.
  remarks: >-
    This method maps a character index to its equivalent text index, which may differ depending
        on the document's internal representation of text. Ensure that <code class="paramref">charIndex</code> is within the valid
        range of the text content to avoid exceptions.
  example: []
  syntax:
    content: public int GetTextIndexFromCharIndex(int charIndex)
    parameters:
    - id: charIndex
      type: System.Int32
      description: The zero-based index of the character within the text content.
    return:
      type: System.Int32
      description: The zero-based text index corresponding to the specified character index.
    content.vb: Public Function GetTextIndexFromCharIndex(charIndex As Integer) As Integer
  overload: nebulae.dotPDFium.PdfText.GetTextIndexFromCharIndex*
  nameWithType.vb: PdfText.GetTextIndexFromCharIndex(Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.GetTextIndexFromCharIndex(Integer)
  name.vb: GetTextIndexFromCharIndex(Integer)
- uid: nebulae.dotPDFium.PdfText.HasUnicodeMapError(System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.HasUnicodeMapError(System.Int32)
  id: HasUnicodeMapError(System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: HasUnicodeMapError(int)
  nameWithType: PdfText.HasUnicodeMapError(int)
  fullName: nebulae.dotPDFium.PdfText.HasUnicodeMapError(int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: HasUnicodeMapError
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 556
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Determines whether the character at the specified index has a Unicode mapping error.
  example: []
  syntax:
    content: public bool HasUnicodeMapError(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the character to check. Must be within the range of valid character indices.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the character at the specified index has a Unicode mapping error; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function HasUnicodeMapError(index As Integer) As Boolean
  overload: nebulae.dotPDFium.PdfText.HasUnicodeMapError*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the object has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      Thrown if <code class="paramref">index</code> is less than 0 or greater than or equal 
          to the total character count.
  nameWithType.vb: PdfText.HasUnicodeMapError(Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.HasUnicodeMapError(Integer)
  name.vb: HasUnicodeMapError(Integer)
- uid: nebulae.dotPDFium.PdfText.IsGenerated(System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.IsGenerated(System.Int32)
  id: IsGenerated(System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: IsGenerated(int)
  nameWithType: PdfText.IsGenerated(int)
  fullName: nebulae.dotPDFium.PdfText.IsGenerated(int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: IsGenerated
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 576
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Determines whether the character at the specified index is a generated character.
  example: []
  syntax:
    content: public bool IsGenerated(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the character to check. Must be within the valid range of characters.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the character at the specified index is a generated character; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function IsGenerated(index As Integer) As Boolean
  overload: nebulae.dotPDFium.PdfText.IsGenerated*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the underlying object has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      Thrown if <code class="paramref">index</code> is less than 0 or greater than or equal to 
          the total character count.
  nameWithType.vb: PdfText.IsGenerated(Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.IsGenerated(Integer)
  name.vb: IsGenerated(Integer)
- uid: nebulae.dotPDFium.PdfText.IsHyphen(System.Int32)
  commentId: M:nebulae.dotPDFium.PdfText.IsHyphen(System.Int32)
  id: IsHyphen(System.Int32)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: IsHyphen(int)
  nameWithType: PdfText.IsHyphen(int)
  fullName: nebulae.dotPDFium.PdfText.IsHyphen(int)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: IsHyphen
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 595
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Determines whether the character at the specified index is a hyphen.
  example: []
  syntax:
    content: public bool IsHyphen(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the character to check. Must be within the range of valid character indices.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the character at the specified index is a hyphen; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function IsHyphen(index As Integer) As Boolean
  overload: nebulae.dotPDFium.PdfText.IsHyphen*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the underlying text resource has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      Thrown if <code class="paramref">index</code> is less than 0 or greater than or equal to the 
          total number of characters.
  nameWithType.vb: PdfText.IsHyphen(Integer)
  fullName.vb: nebulae.dotPDFium.PdfText.IsHyphen(Integer)
  name.vb: IsHyphen(Integer)
- uid: nebulae.dotPDFium.PdfText.LoadWebLinks
  commentId: M:nebulae.dotPDFium.PdfText.LoadWebLinks
  id: LoadWebLinks
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: LoadWebLinks()
  nameWithType: PdfText.LoadWebLinks()
  fullName: nebulae.dotPDFium.PdfText.LoadWebLinks()
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: LoadWebLinks
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 613
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Loads the web links associated with the current PDF document.
  remarks: >-
    This method initializes the web link handle for the PDF document if it has not already been
        loaded.  If the web link handle is already initialized, the method returns without performing any action.  If
        the operation fails, an exception is thrown.
  example: []
  syntax:
    content: public void LoadWebLinks()
    content.vb: Public Sub LoadWebLinks()
  overload: nebulae.dotPDFium.PdfText.LoadWebLinks*
  exceptions:
  - type: nebulae.dotPDFium.dotPDFiumException
    commentId: T:nebulae.dotPDFium.dotPDFiumException
    description: Thrown if the web links cannot be loaded successfully.
- uid: nebulae.dotPDFium.PdfText.WebLinkCount
  commentId: P:nebulae.dotPDFium.PdfText.WebLinkCount
  id: WebLinkCount
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: WebLinkCount
  nameWithType: PdfText.WebLinkCount
  fullName: nebulae.dotPDFium.PdfText.WebLinkCount
  type: Property
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: WebLinkCount
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 627
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Gets the number of web links associated with the current PDF text object.
  example: []
  syntax:
    content: public int WebLinkCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property WebLinkCount As Integer
  overload: nebulae.dotPDFium.PdfText.WebLinkCount*
- uid: nebulae.dotPDFium.PdfText.CloseWebLinks
  commentId: M:nebulae.dotPDFium.PdfText.CloseWebLinks
  id: CloseWebLinks
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: CloseWebLinks()
  nameWithType: PdfText.CloseWebLinks()
  fullName: nebulae.dotPDFium.PdfText.CloseWebLinks()
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: CloseWebLinks
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 636
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Releases resources associated with the web links and resets the handle.
  remarks: >-
    This method should be called to clean up resources when web link processing is no longer
        needed. Failing to call this method may result in resource leaks.
  example: []
  syntax:
    content: public void CloseWebLinks()
    content.vb: Public Sub CloseWebLinks()
  overload: nebulae.dotPDFium.PdfText.CloseWebLinks*
- uid: nebulae.dotPDFium.PdfText.Dispose(System.Boolean)
  commentId: M:nebulae.dotPDFium.PdfText.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: nebulae.dotPDFium.PdfText
  langs:
  - csharp
  - vb
  name: Dispose(bool)
  nameWithType: PdfText.Dispose(bool)
  fullName: nebulae.dotPDFium.PdfText.Dispose(bool)
  type: Method
  source:
    remote:
      path: dotPDFium/dotPDFium/PdfText.cs
      branch: main
      repo: https://github.com/nebulaeonline/dotPDFium.git
    id: Dispose
    path: ../dotPDFium/dotPDFium/dotPDFium/PdfText.cs
    startLine: 649
  assemblies:
  - dotPDFium
  namespace: nebulae.dotPDFium
  summary: Dispose method for the PdfText object. This method is called when the object is disposed.
  example: []
  syntax:
    content: protected override void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: Whether to dispose of managed resources
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
  overridden: nebulae.dotPDFium.PdfObject.Dispose(System.Boolean)
  overload: nebulae.dotPDFium.PdfText.Dispose*
  nameWithType.vb: PdfText.Dispose(Boolean)
  fullName.vb: nebulae.dotPDFium.PdfText.Dispose(Boolean)
  name.vb: Dispose(Boolean)
references:
- uid: nebulae.dotPDFium
  commentId: N:nebulae.dotPDFium
  href: nebulae.html
  name: nebulae.dotPDFium
  nameWithType: nebulae.dotPDFium
  fullName: nebulae.dotPDFium
  spec.csharp:
  - uid: nebulae
    name: nebulae
    href: nebulae.html
  - name: .
  - uid: nebulae.dotPDFium
    name: dotPDFium
    href: nebulae.dotPDFium.html
  spec.vb:
  - uid: nebulae
    name: nebulae
    href: nebulae.html
  - name: .
  - uid: nebulae.dotPDFium
    name: dotPDFium
    href: nebulae.dotPDFium.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: nebulae.dotPDFium.PdfObject
  commentId: T:nebulae.dotPDFium.PdfObject
  parent: nebulae.dotPDFium
  href: nebulae.dotPDFium.PdfObject.html
  name: PdfObject
  nameWithType: PdfObject
  fullName: nebulae.dotPDFium.PdfObject
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: nebulae.dotPDFium.PdfObject._handle
  commentId: F:nebulae.dotPDFium.PdfObject._handle
  parent: nebulae.dotPDFium.PdfObject
  href: nebulae.dotPDFium.PdfObject.html#nebulae_dotPDFium_PdfObject__handle
  name: _handle
  nameWithType: PdfObject._handle
  fullName: nebulae.dotPDFium.PdfObject._handle
- uid: nebulae.dotPDFium.PdfObject._type
  commentId: F:nebulae.dotPDFium.PdfObject._type
  parent: nebulae.dotPDFium.PdfObject
  href: nebulae.dotPDFium.PdfObject.html#nebulae_dotPDFium_PdfObject__type
  name: _type
  nameWithType: PdfObject._type
  fullName: nebulae.dotPDFium.PdfObject._type
- uid: nebulae.dotPDFium.PdfObject._disposed
  commentId: F:nebulae.dotPDFium.PdfObject._disposed
  parent: nebulae.dotPDFium.PdfObject
  href: nebulae.dotPDFium.PdfObject.html#nebulae_dotPDFium_PdfObject__disposed
  name: _disposed
  nameWithType: PdfObject._disposed
  fullName: nebulae.dotPDFium.PdfObject._disposed
- uid: nebulae.dotPDFium.PdfObject.Handle
  commentId: P:nebulae.dotPDFium.PdfObject.Handle
  parent: nebulae.dotPDFium.PdfObject
  href: nebulae.dotPDFium.PdfObject.html#nebulae_dotPDFium_PdfObject_Handle
  name: Handle
  nameWithType: PdfObject.Handle
  fullName: nebulae.dotPDFium.PdfObject.Handle
- uid: nebulae.dotPDFium.PdfObject.Type
  commentId: P:nebulae.dotPDFium.PdfObject.Type
  parent: nebulae.dotPDFium.PdfObject
  href: nebulae.dotPDFium.PdfObject.html#nebulae_dotPDFium_PdfObject_Type
  name: Type
  nameWithType: PdfObject.Type
  fullName: nebulae.dotPDFium.PdfObject.Type
- uid: nebulae.dotPDFium.PdfObject.IsDisposed
  commentId: P:nebulae.dotPDFium.PdfObject.IsDisposed
  parent: nebulae.dotPDFium.PdfObject
  href: nebulae.dotPDFium.PdfObject.html#nebulae_dotPDFium_PdfObject_IsDisposed
  name: IsDisposed
  nameWithType: PdfObject.IsDisposed
  fullName: nebulae.dotPDFium.PdfObject.IsDisposed
- uid: nebulae.dotPDFium.PdfObject.GetPDFiumError
  commentId: M:nebulae.dotPDFium.PdfObject.GetPDFiumError
  parent: nebulae.dotPDFium.PdfObject
  href: nebulae.dotPDFium.PdfObject.html#nebulae_dotPDFium_PdfObject_GetPDFiumError
  name: GetPDFiumError()
  nameWithType: PdfObject.GetPDFiumError()
  fullName: nebulae.dotPDFium.PdfObject.GetPDFiumError()
  spec.csharp:
  - uid: nebulae.dotPDFium.PdfObject.GetPDFiumError
    name: GetPDFiumError
    href: nebulae.dotPDFium.PdfObject.html#nebulae_dotPDFium_PdfObject_GetPDFiumError
  - name: (
  - name: )
  spec.vb:
  - uid: nebulae.dotPDFium.PdfObject.GetPDFiumError
    name: GetPDFiumError
    href: nebulae.dotPDFium.PdfObject.html#nebulae_dotPDFium_PdfObject_GetPDFiumError
  - name: (
  - name: )
- uid: nebulae.dotPDFium.PdfObject.Dispose
  commentId: M:nebulae.dotPDFium.PdfObject.Dispose
  parent: nebulae.dotPDFium.PdfObject
  href: nebulae.dotPDFium.PdfObject.html#nebulae_dotPDFium_PdfObject_Dispose
  name: Dispose()
  nameWithType: PdfObject.Dispose()
  fullName: nebulae.dotPDFium.PdfObject.Dispose()
  spec.csharp:
  - uid: nebulae.dotPDFium.PdfObject.Dispose
    name: Dispose
    href: nebulae.dotPDFium.PdfObject.html#nebulae_dotPDFium_PdfObject_Dispose
  - name: (
  - name: )
  spec.vb:
  - uid: nebulae.dotPDFium.PdfObject.Dispose
    name: Dispose
    href: nebulae.dotPDFium.PdfObject.html#nebulae_dotPDFium_PdfObject_Dispose
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: nebulae.dotPDFium.PdfText.CountChars*
  commentId: Overload:nebulae.dotPDFium.PdfText.CountChars
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_CountChars
  name: CountChars
  nameWithType: PdfText.CountChars
  fullName: nebulae.dotPDFium.PdfText.CountChars
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.objectdisposedexception
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: nebulae.dotPDFium.PdfText.GetChar*
  commentId: Overload:nebulae.dotPDFium.PdfText.GetChar
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_GetChar_System_Int32_
  name: GetChar
  nameWithType: PdfText.GetChar
  fullName: nebulae.dotPDFium.PdfText.GetChar
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: nebulae.dotPDFium.PdfText.GetCharAngle*
  commentId: Overload:nebulae.dotPDFium.PdfText.GetCharAngle
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_GetCharAngle_System_Int32_
  name: GetCharAngle
  nameWithType: PdfText.GetCharAngle
  fullName: nebulae.dotPDFium.PdfText.GetCharAngle
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: nebulae.dotPDFium.PdfText.GetCharBox*
  commentId: Overload:nebulae.dotPDFium.PdfText.GetCharBox
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_GetCharBox_System_Int32_System_Double__System_Double__System_Double__System_Double__
  name: GetCharBox
  nameWithType: PdfText.GetCharBox
  fullName: nebulae.dotPDFium.PdfText.GetCharBox
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: nebulae.dotPDFium.PdfText.TryGetCharBox*
  commentId: Overload:nebulae.dotPDFium.PdfText.TryGetCharBox
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_TryGetCharBox_System_Int32_System_Double__System_Double__System_Double__System_Double__
  name: TryGetCharBox
  nameWithType: PdfText.TryGetCharBox
  fullName: nebulae.dotPDFium.PdfText.TryGetCharBox
- uid: nebulae.dotPDFium.PdfText.GetCharIndexAtPos*
  commentId: Overload:nebulae.dotPDFium.PdfText.GetCharIndexAtPos
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_GetCharIndexAtPos_System_Double_System_Double_System_Double_System_Double_
  name: GetCharIndexAtPos
  nameWithType: PdfText.GetCharIndexAtPos
  fullName: nebulae.dotPDFium.PdfText.GetCharIndexAtPos
- uid: nebulae.dotPDFium.PdfText.TryGetCharIndexAtPos*
  commentId: Overload:nebulae.dotPDFium.PdfText.TryGetCharIndexAtPos
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_TryGetCharIndexAtPos_System_Double_System_Double_System_Int32__System_Double_System_Double_
  name: TryGetCharIndexAtPos
  nameWithType: PdfText.TryGetCharIndexAtPos
  fullName: nebulae.dotPDFium.PdfText.TryGetCharIndexAtPos
- uid: nebulae.dotPDFium.Native.RgbaColor
  commentId: T:nebulae.dotPDFium.Native.RgbaColor
  parent: nebulae.dotPDFium.Native
  href: nebulae.dotPDFium.Native.RgbaColor.html
  name: RgbaColor
  nameWithType: RgbaColor
  fullName: nebulae.dotPDFium.Native.RgbaColor
- uid: nebulae.dotPDFium.PdfText.GetFillColor*
  commentId: Overload:nebulae.dotPDFium.PdfText.GetFillColor
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_GetFillColor_System_Int32_
  name: GetFillColor
  nameWithType: PdfText.GetFillColor
  fullName: nebulae.dotPDFium.PdfText.GetFillColor
- uid: System.Nullable{nebulae.dotPDFium.Native.RgbaColor}
  commentId: T:System.Nullable{nebulae.dotPDFium.Native.RgbaColor}
  parent: System
  definition: System.Nullable`1
  href: nebulae.dotPDFium.Native.RgbaColor.html
  name: RgbaColor?
  nameWithType: RgbaColor?
  fullName: nebulae.dotPDFium.Native.RgbaColor?
  spec.csharp:
  - uid: nebulae.dotPDFium.Native.RgbaColor
    name: RgbaColor
    href: nebulae.dotPDFium.Native.RgbaColor.html
  - name: '?'
  spec.vb:
  - uid: nebulae.dotPDFium.Native.RgbaColor
    name: RgbaColor
    href: nebulae.dotPDFium.Native.RgbaColor.html
  - name: '?'
- uid: nebulae.dotPDFium.Native
  commentId: N:nebulae.dotPDFium.Native
  href: nebulae.html
  name: nebulae.dotPDFium.Native
  nameWithType: nebulae.dotPDFium.Native
  fullName: nebulae.dotPDFium.Native
  spec.csharp:
  - uid: nebulae
    name: nebulae
    href: nebulae.html
  - name: .
  - uid: nebulae.dotPDFium
    name: dotPDFium
    href: nebulae.dotPDFium.html
  - name: .
  - uid: nebulae.dotPDFium.Native
    name: Native
    href: nebulae.dotPDFium.Native.html
  spec.vb:
  - uid: nebulae
    name: nebulae
    href: nebulae.html
  - name: .
  - uid: nebulae.dotPDFium
    name: dotPDFium
    href: nebulae.dotPDFium.html
  - name: .
  - uid: nebulae.dotPDFium.Native
    name: Native
    href: nebulae.dotPDFium.Native.html
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: nebulae.dotPDFium.PdfFontInfo
  commentId: T:nebulae.dotPDFium.PdfFontInfo
  parent: nebulae.dotPDFium
  href: nebulae.dotPDFium.PdfFontInfo.html
  name: PdfFontInfo
  nameWithType: PdfFontInfo
  fullName: nebulae.dotPDFium.PdfFontInfo
- uid: nebulae.dotPDFium.PdfText
  commentId: T:nebulae.dotPDFium.PdfText
  parent: nebulae.dotPDFium
  href: nebulae.dotPDFium.PdfText.html
  name: PdfText
  nameWithType: PdfText
  fullName: nebulae.dotPDFium.PdfText
- uid: nebulae.dotPDFium.PdfText.GetFontInfo*
  commentId: Overload:nebulae.dotPDFium.PdfText.GetFontInfo
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_GetFontInfo_System_Int32_
  name: GetFontInfo
  nameWithType: PdfText.GetFontInfo
  fullName: nebulae.dotPDFium.PdfText.GetFontInfo
- uid: nebulae.dotPDFium.PdfText.GetFontSize*
  commentId: Overload:nebulae.dotPDFium.PdfText.GetFontSize
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_GetFontSize_System_Int32_
  name: GetFontSize
  nameWithType: PdfText.GetFontSize
  fullName: nebulae.dotPDFium.PdfText.GetFontSize
- uid: nebulae.dotPDFium.PdfText.GetFontWeight*
  commentId: Overload:nebulae.dotPDFium.PdfText.GetFontWeight
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_GetFontWeight_System_Int32_
  name: GetFontWeight
  nameWithType: PdfText.GetFontWeight
  fullName: nebulae.dotPDFium.PdfText.GetFontWeight
- uid: nebulae.dotPDFium.Native.FsRectF
  commentId: T:nebulae.dotPDFium.Native.FsRectF
  parent: nebulae.dotPDFium.Native
  href: nebulae.dotPDFium.Native.FsRectF.html
  name: FsRectF
  nameWithType: FsRectF
  fullName: nebulae.dotPDFium.Native.FsRectF
- uid: nebulae.dotPDFium.PdfText.GetLooseCharBox*
  commentId: Overload:nebulae.dotPDFium.PdfText.GetLooseCharBox
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_GetLooseCharBox_System_Int32_
  name: GetLooseCharBox
  nameWithType: PdfText.GetLooseCharBox
  fullName: nebulae.dotPDFium.PdfText.GetLooseCharBox
- uid: System.Nullable{nebulae.dotPDFium.Native.FsRectF}
  commentId: T:System.Nullable{nebulae.dotPDFium.Native.FsRectF}
  parent: System
  definition: System.Nullable`1
  href: nebulae.dotPDFium.Native.FsRectF.html
  name: FsRectF?
  nameWithType: FsRectF?
  fullName: nebulae.dotPDFium.Native.FsRectF?
  spec.csharp:
  - uid: nebulae.dotPDFium.Native.FsRectF
    name: FsRectF
    href: nebulae.dotPDFium.Native.FsRectF.html
  - name: '?'
  spec.vb:
  - uid: nebulae.dotPDFium.Native.FsRectF
    name: FsRectF
    href: nebulae.dotPDFium.Native.FsRectF.html
  - name: '?'
- uid: nebulae.dotPDFium.Native.FsMatrix
  commentId: T:nebulae.dotPDFium.Native.FsMatrix
  parent: nebulae.dotPDFium.Native
  href: nebulae.dotPDFium.Native.FsMatrix.html
  name: FsMatrix
  nameWithType: FsMatrix
  fullName: nebulae.dotPDFium.Native.FsMatrix
- uid: nebulae.dotPDFium.PdfText.GetMatrix*
  commentId: Overload:nebulae.dotPDFium.PdfText.GetMatrix
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_GetMatrix_System_Int32_
  name: GetMatrix
  nameWithType: PdfText.GetMatrix
  fullName: nebulae.dotPDFium.PdfText.GetMatrix
- uid: System.Nullable{nebulae.dotPDFium.Native.FsMatrix}
  commentId: T:System.Nullable{nebulae.dotPDFium.Native.FsMatrix}
  parent: System
  definition: System.Nullable`1
  href: nebulae.dotPDFium.Native.FsMatrix.html
  name: FsMatrix?
  nameWithType: FsMatrix?
  fullName: nebulae.dotPDFium.Native.FsMatrix?
  spec.csharp:
  - uid: nebulae.dotPDFium.Native.FsMatrix
    name: FsMatrix
    href: nebulae.dotPDFium.Native.FsMatrix.html
  - name: '?'
  spec.vb:
  - uid: nebulae.dotPDFium.Native.FsMatrix
    name: FsMatrix
    href: nebulae.dotPDFium.Native.FsMatrix.html
  - name: '?'
- uid: nebulae.dotPDFium.PdfText.GetStrokeColor*
  commentId: Overload:nebulae.dotPDFium.PdfText.GetStrokeColor
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_GetStrokeColor_System_Int32_
  name: GetStrokeColor
  nameWithType: PdfText.GetStrokeColor
  fullName: nebulae.dotPDFium.PdfText.GetStrokeColor
- uid: nebulae.dotPDFium.PdfTextObject
  commentId: T:nebulae.dotPDFium.PdfTextObject
  parent: nebulae.dotPDFium
  href: nebulae.dotPDFium.PdfTextObject.html
  name: PdfTextObject
  nameWithType: PdfTextObject
  fullName: nebulae.dotPDFium.PdfTextObject
- uid: nebulae.dotPDFium.PdfText.GetTextObject*
  commentId: Overload:nebulae.dotPDFium.PdfText.GetTextObject
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_GetTextObject_System_Int32_
  name: GetTextObject
  nameWithType: PdfText.GetTextObject
  fullName: nebulae.dotPDFium.PdfText.GetTextObject
- uid: nebulae.dotPDFium.PdfText.GetTextRange*
  commentId: Overload:nebulae.dotPDFium.PdfText.GetTextRange
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_GetTextRange_System_Int32_System_Int32_
  name: GetTextRange
  nameWithType: PdfText.GetTextRange
  fullName: nebulae.dotPDFium.PdfText.GetTextRange
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: nebulae.dotPDFium.PdfText.TryGetTextRange*
  commentId: Overload:nebulae.dotPDFium.PdfText.TryGetTextRange
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_TryGetTextRange_System_Int32_System_Int32_System_String__
  name: TryGetTextRange
  nameWithType: PdfText.TryGetTextRange
  fullName: nebulae.dotPDFium.PdfText.TryGetTextRange
- uid: nebulae.dotPDFium.PdfText.GetCharOrigin*
  commentId: Overload:nebulae.dotPDFium.PdfText.GetCharOrigin
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_GetCharOrigin_System_Int32_System_Double__System_Double__
  name: GetCharOrigin
  nameWithType: PdfText.GetCharOrigin
  fullName: nebulae.dotPDFium.PdfText.GetCharOrigin
- uid: nebulae.dotPDFium.PdfText.TryGetCharOrigin*
  commentId: Overload:nebulae.dotPDFium.PdfText.TryGetCharOrigin
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_TryGetCharOrigin_System_Int32_System_Double__System_Double__
  name: TryGetCharOrigin
  nameWithType: PdfText.TryGetCharOrigin
  fullName: nebulae.dotPDFium.PdfText.TryGetCharOrigin
- uid: nebulae.dotPDFium.PdfText.CountRects*
  commentId: Overload:nebulae.dotPDFium.PdfText.CountRects
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_CountRects_System_Int32_System_Int32_
  name: CountRects
  nameWithType: PdfText.CountRects
  fullName: nebulae.dotPDFium.PdfText.CountRects
- uid: nebulae.dotPDFium.PdfText.TryCountRects*
  commentId: Overload:nebulae.dotPDFium.PdfText.TryCountRects
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_TryCountRects_System_Int32_System_Int32_System_Int32_
  name: TryCountRects
  nameWithType: PdfText.TryCountRects
  fullName: nebulae.dotPDFium.PdfText.TryCountRects
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: nebulae.dotPDFium.dotPDFiumException
  commentId: T:nebulae.dotPDFium.dotPDFiumException
  href: nebulae.dotPDFium.dotPDFiumException.html
  name: dotPDFiumException
  nameWithType: dotPDFiumException
  fullName: nebulae.dotPDFium.dotPDFiumException
- uid: nebulae.dotPDFium.PdfText.Find*
  commentId: Overload:nebulae.dotPDFium.PdfText.Find
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_Find_System_String_System_Boolean_System_Boolean_System_Int32_
  name: Find
  nameWithType: PdfText.Find
  fullName: nebulae.dotPDFium.PdfText.Find
- uid: nebulae.dotPDFium.PdfTextSearch
  commentId: T:nebulae.dotPDFium.PdfTextSearch
  parent: nebulae.dotPDFium
  href: nebulae.dotPDFium.PdfTextSearch.html
  name: PdfTextSearch
  nameWithType: PdfTextSearch
  fullName: nebulae.dotPDFium.PdfTextSearch
- uid: nebulae.dotPDFium.PdfText.GetCharIndexFromTextIndex*
  commentId: Overload:nebulae.dotPDFium.PdfText.GetCharIndexFromTextIndex
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_GetCharIndexFromTextIndex_System_Int32_
  name: GetCharIndexFromTextIndex
  nameWithType: PdfText.GetCharIndexFromTextIndex
  fullName: nebulae.dotPDFium.PdfText.GetCharIndexFromTextIndex
- uid: nebulae.dotPDFium.PdfText.GetTextIndexFromCharIndex*
  commentId: Overload:nebulae.dotPDFium.PdfText.GetTextIndexFromCharIndex
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_GetTextIndexFromCharIndex_System_Int32_
  name: GetTextIndexFromCharIndex
  nameWithType: PdfText.GetTextIndexFromCharIndex
  fullName: nebulae.dotPDFium.PdfText.GetTextIndexFromCharIndex
- uid: nebulae.dotPDFium.PdfText.HasUnicodeMapError*
  commentId: Overload:nebulae.dotPDFium.PdfText.HasUnicodeMapError
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_HasUnicodeMapError_System_Int32_
  name: HasUnicodeMapError
  nameWithType: PdfText.HasUnicodeMapError
  fullName: nebulae.dotPDFium.PdfText.HasUnicodeMapError
- uid: nebulae.dotPDFium.PdfText.IsGenerated*
  commentId: Overload:nebulae.dotPDFium.PdfText.IsGenerated
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_IsGenerated_System_Int32_
  name: IsGenerated
  nameWithType: PdfText.IsGenerated
  fullName: nebulae.dotPDFium.PdfText.IsGenerated
- uid: nebulae.dotPDFium.PdfText.IsHyphen*
  commentId: Overload:nebulae.dotPDFium.PdfText.IsHyphen
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_IsHyphen_System_Int32_
  name: IsHyphen
  nameWithType: PdfText.IsHyphen
  fullName: nebulae.dotPDFium.PdfText.IsHyphen
- uid: nebulae.dotPDFium.PdfText.LoadWebLinks*
  commentId: Overload:nebulae.dotPDFium.PdfText.LoadWebLinks
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_LoadWebLinks
  name: LoadWebLinks
  nameWithType: PdfText.LoadWebLinks
  fullName: nebulae.dotPDFium.PdfText.LoadWebLinks
- uid: nebulae.dotPDFium.PdfText.WebLinkCount*
  commentId: Overload:nebulae.dotPDFium.PdfText.WebLinkCount
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_WebLinkCount
  name: WebLinkCount
  nameWithType: PdfText.WebLinkCount
  fullName: nebulae.dotPDFium.PdfText.WebLinkCount
- uid: nebulae.dotPDFium.PdfText.CloseWebLinks*
  commentId: Overload:nebulae.dotPDFium.PdfText.CloseWebLinks
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_CloseWebLinks
  name: CloseWebLinks
  nameWithType: PdfText.CloseWebLinks
  fullName: nebulae.dotPDFium.PdfText.CloseWebLinks
- uid: nebulae.dotPDFium.PdfObject.Dispose(System.Boolean)
  commentId: M:nebulae.dotPDFium.PdfObject.Dispose(System.Boolean)
  parent: nebulae.dotPDFium.PdfObject
  isExternal: true
  href: nebulae.dotPDFium.PdfObject.html#nebulae_dotPDFium_PdfObject_Dispose_System_Boolean_
  name: Dispose(bool)
  nameWithType: PdfObject.Dispose(bool)
  fullName: nebulae.dotPDFium.PdfObject.Dispose(bool)
  nameWithType.vb: PdfObject.Dispose(Boolean)
  fullName.vb: nebulae.dotPDFium.PdfObject.Dispose(Boolean)
  name.vb: Dispose(Boolean)
  spec.csharp:
  - uid: nebulae.dotPDFium.PdfObject.Dispose(System.Boolean)
    name: Dispose
    href: nebulae.dotPDFium.PdfObject.html#nebulae_dotPDFium_PdfObject_Dispose_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: nebulae.dotPDFium.PdfObject.Dispose(System.Boolean)
    name: Dispose
    href: nebulae.dotPDFium.PdfObject.html#nebulae_dotPDFium_PdfObject_Dispose_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: nebulae.dotPDFium.PdfText.Dispose*
  commentId: Overload:nebulae.dotPDFium.PdfText.Dispose
  href: nebulae.dotPDFium.PdfText.html#nebulae_dotPDFium_PdfText_Dispose_System_Boolean_
  name: Dispose
  nameWithType: PdfText.Dispose
  fullName: nebulae.dotPDFium.PdfText.Dispose
