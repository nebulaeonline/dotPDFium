{
  "api/nebulae.dotPDFium.Forms.PdfCheckBox.html": {
    "href": "api/nebulae.dotPDFium.Forms.PdfCheckBox.html",
    "title": "Class PdfCheckBox | dotPDFium",
    "summary": "Class PdfCheckBox Namespace nebulae.dotPDFium.Forms Assembly dotPDFium.dll public class PdfCheckBox : PdfFormElement, IDisposable Inheritance object PdfFormElement PdfCheckBox Implements IDisposable Inherited Members PdfFormElement._type PdfFormElement._annot PdfFormElement._annotIndex PdfFormElement._disposed PdfFormElement.Form PdfFormElement.Page PdfFormElement.ElementType PdfFormElement.Handle PdfFormElement.GetRect() PdfFormElement.SetRect(FsRectF) PdfFormElement.SetBorderColor(RgbaColor) PdfFormElement.SetFillColor(RgbaColor) PdfFormElement.SetTextColor(RgbaColor) PdfFormElement.GetFontSize() PdfFormElement.GetFontColor() PdfFormElement.GetAnnotationFlags() PdfFormElement.SetAnnotationFlags(PdfAnnotationFlags) PdfFormElement.Dispose() PdfFormElement.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsChecked() public bool IsChecked() Returns bool IsReadOnly() public bool IsReadOnly() Returns bool SetChecked(bool) public bool SetChecked(bool value) Parameters value bool Returns bool"
  },
  "api/nebulae.dotPDFium.Forms.PdfComboBox.html": {
    "href": "api/nebulae.dotPDFium.Forms.PdfComboBox.html",
    "title": "Class PdfComboBox | dotPDFium",
    "summary": "Class PdfComboBox Namespace nebulae.dotPDFium.Forms Assembly dotPDFium.dll public class PdfComboBox : PdfFormElement, IDisposable Inheritance object PdfFormElement PdfComboBox Implements IDisposable Inherited Members PdfFormElement._type PdfFormElement._annot PdfFormElement._annotIndex PdfFormElement._disposed PdfFormElement.Form PdfFormElement.Page PdfFormElement.ElementType PdfFormElement.Handle PdfFormElement.GetRect() PdfFormElement.SetRect(FsRectF) PdfFormElement.SetBorderColor(RgbaColor) PdfFormElement.SetFillColor(RgbaColor) PdfFormElement.SetTextColor(RgbaColor) PdfFormElement.GetFontSize() PdfFormElement.GetFontColor() PdfFormElement.GetAnnotationFlags() PdfFormElement.SetAnnotationFlags(PdfAnnotationFlags) PdfFormElement.Dispose() PdfFormElement.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties OptionCount public int OptionCount { get; } Property Value int Methods GetOptionLabel(int) public string? GetOptionLabel(int index) Parameters index int Returns string GetSelectedIndex() public int GetSelectedIndex() Returns int GetValue() public string? GetValue() Returns string IsReadOnly() public bool IsReadOnly() Returns bool SetSelectedIndex(int) public bool SetSelectedIndex(int index) Parameters index int Returns bool SetValue(string) public bool SetValue(string value) Parameters value string Returns bool"
  },
  "api/nebulae.dotPDFium.Forms.PdfForm.html": {
    "href": "api/nebulae.dotPDFium.Forms.PdfForm.html",
    "title": "Class PdfForm | dotPDFium",
    "summary": "Class PdfForm Namespace nebulae.dotPDFium.Forms Assembly dotPDFium.dll public sealed class PdfForm : PdfObject, IDisposable Inheritance object PdfObject PdfForm Implements IDisposable Inherited Members PdfObject.Handle PdfObject.Type PdfObject.IsDisposed PdfObject.GetPDFiumError() PdfObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Document public PdfDocument Document { get; } Property Value PdfDocument FormFillInfo public PdfFormFillInfo FormFillInfo { get; } Property Value PdfFormFillInfo Methods CreateCheckBox(PdfPage, string, FsRectF) public PdfCheckBox CreateCheckBox(PdfPage page, string name, FsRectF bounds) Parameters page PdfPage name string bounds FsRectF Returns PdfCheckBox CreatePushButton(PdfPage, string, FsRectF) public PdfPushButton CreatePushButton(PdfPage page, string name, FsRectF bounds) Parameters page PdfPage name string bounds FsRectF Returns PdfPushButton CreateRadioButton(PdfPage, string, FsRectF) public PdfRadioButton CreateRadioButton(PdfPage page, string name, FsRectF bounds) Parameters page PdfPage name string bounds FsRectF Returns PdfRadioButton CreateRadioGroup(PdfPage, string, FsRectF[], string[]) public List<PdfRadioButton> CreateRadioGroup(PdfPage page, string name, FsRectF[] bounds, string[] exportValues) Parameters page PdfPage name string bounds FsRectF[] exportValues string[] Returns List<PdfRadioButton> CreateTextField(PdfPage, string, FsRectF) public PdfTextField CreateTextField(PdfPage page, string name, FsRectF bounds) Parameters page PdfPage name string bounds FsRectF Returns PdfTextField Dispose(bool) Releases the resources used by the current instance of the class. protected override void Dispose(bool disposing) Parameters disposing bool Are we disposing managed objects? Remarks This method should be called when the instance is no longer needed to free unmanaged resources. It ensures that any associated native resources are properly released based on the type of the object. Exceptions InvalidOperationException Thrown if the object type is not supported for disposal. GetElements(PdfPage) public IReadOnlyList<PdfFormElement> GetElements(PdfPage page) Parameters page PdfPage Returns IReadOnlyList<PdfFormElement> GetFocusableSubtypeCount() Gets the number of annotation subtypes considered focusable by the current form environment. public int GetFocusableSubtypeCount() Returns int The number of focusable annotation subtypes. GetFocusableSubtypes() Retrieves a list of annotation subtypes that are considered focusable within this form context. public List<PdfAnnotationSubtype> GetFocusableSubtypes() Returns List<PdfAnnotationSubtype> A list of supported focusable annotation subtypes. GetFormFieldAlternateName(PdfAnnotation) Retrieves the alternate name of a form field associated with the specified PDF annotation. public string? GetFormFieldAlternateName(PdfAnnotation annotation) Parameters annotation PdfAnnotation The PDF annotation for which to retrieve the form field's alternate name. Cannot be null. Returns string The alternate name of the form field as a string, or null if the form field does not have an alternate name. Remarks The alternate name of a form field is an optional, user-friendly name that may be used in place of the field's technical name. Exceptions ArgumentNullException Thrown if annotation is null. GetFormFieldAtPoint(PdfPage, float, float) public PdfAnnotation? GetFormFieldAtPoint(PdfPage page, float x, float y) Parameters page PdfPage x float y float Returns PdfAnnotation GetFormFieldName(PdfAnnotation) Retrieves the form field name associated with the specified PDF annotation. public string? GetFormFieldName(PdfAnnotation annot) Parameters annot PdfAnnotation The PdfAnnotation object representing the annotation to retrieve the form field name for. Must not be null. Returns string The name of the form field as a string, or null if the annotation is not a widget annotation or if the form field name cannot be determined. Exceptions ArgumentNullException Thrown if annot is null. SetFocusableSubtypes(IEnumerable<PdfAnnotationSubtype>) Sets the focusable annotation subtypes for the current PDF annotation. public bool SetFocusableSubtypes(IEnumerable<PdfAnnotationSubtype> subtypes) Parameters subtypes IEnumerable<PdfAnnotationSubtype> A collection of PdfAnnotationSubtype values representing the annotation subtypes that should be focusable. If the collection is null or empty, no subtypes will be set. Returns bool true if the focusable subtypes were successfully set; otherwise, false. Remarks This method allocates unmanaged memory to pass the subtypes to the underlying PDF library. Ensure that the provided subtypes are valid and meaningful for the current context."
  },
  "api/nebulae.dotPDFium.Forms.PdfFormEvents.html": {
    "href": "api/nebulae.dotPDFium.Forms.PdfFormEvents.html",
    "title": "Class PdfFormEvents | dotPDFium",
    "summary": "Class PdfFormEvents Namespace nebulae.dotPDFium.Forms Assembly dotPDFium.dll public sealed class PdfFormEvents Inheritance object PdfFormEvents Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties OnCursorChange Invoked when the cursor should be changed (e.g., to a text beam or hand). public Action<int>? OnCursorChange { get; set; } Property Value Action<int> OnFormChanged Invoked when a form field value or state has changed. public Action? OnFormChanged { get; set; } Property Value Action OnGetLocalTime Provides the current system time to PDFium. public Func<FpdfSystemTime>? OnGetLocalTime { get; set; } Property Value Func<FpdfSystemTime> OnGetPage Called when PDFium wants to retrieve a page from a document by index. public Func<PdfDocument, int, PdfPage?>? OnGetPage { get; set; } Property Value Func<PdfDocument, int, PdfPage> OnGetRotation Called when PDFium wants to know the rotation of a given page. public Func<PdfPage, int>? OnGetRotation { get; set; } Property Value Func<PdfPage, int> OnInvalidate Invoked when a region of a PDF page needs to be redrawn due to form updates. public Action<PdfPage, FsRectF>? OnInvalidate { get; set; } Property Value Action<PdfPage, FsRectF> OnKillTimer Called when PDFium wants to cancel a timer. public Action<int>? OnKillTimer { get; set; } Property Value Action<int> OnOutputSelectedRect Invoked when PDFium wants to draw a selection rectangle (e.g., for text selection). public Action<PdfPage, FsRectF>? OnOutputSelectedRect { get; set; } Property Value Action<PdfPage, FsRectF> OnRelease Optional release callback if any resources should be cleaned up when the form environment is destroyed. public Action? OnRelease { get; set; } Property Value Action OnSetTimer Provides a timer callback for PDFium's internal use (e.g., cursor blink). Returns a platform-defined timer ID. public Func<int, Action, int>? OnSetTimer { get; set; } Property Value Func<int, Action, int>"
  },
  "api/nebulae.dotPDFium.Forms.PdfFormEventsNotifier.html": {
    "href": "api/nebulae.dotPDFium.Forms.PdfFormEventsNotifier.html",
    "title": "Class PdfFormEventsNotifier | dotPDFium",
    "summary": "Class PdfFormEventsNotifier Namespace nebulae.dotPDFium.Forms Assembly dotPDFium.dll Dispatches user-driven events to the PDFium form environment. These methods mirror PDFium's FORM_* notification APIs (see fpdf_formfill.h). public static class PdfFormEventsNotifier Inheritance object PdfFormEventsNotifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanRedo(PdfForm, PdfPage) Determines whether the specified PDF form can redo the last undone action on the given page. public static bool CanRedo(PdfForm form, PdfPage page) Parameters form PdfForm The PDF form to check for redo capability. page PdfPage The page within the PDF form to check for redo capability. Returns bool true if the last undone action on the specified page can be redone; otherwise, false. CanUndo(PdfForm, PdfPage) Determines whether the specified form and page have an undoable action available. public static bool CanUndo(PdfForm form, PdfPage page) Parameters form PdfForm The PDF form to check for undoable actions. Cannot be null. page PdfPage The PDF page associated with the form. Cannot be null. Returns bool true if there is an undoable action available for the specified form and page; otherwise, false. DoDocumentAAction(PdfForm, PdfPageAActionType) Executes a document-level action on the specified PDF form. public static void DoDocumentAAction(PdfForm form, PdfPageAActionType action) Parameters form PdfForm The PdfForm instance representing the PDF form on which the action will be performed. Cannot be null. action PdfPageAActionType The document-level action to execute, specified as a PdfPageAActionType value. Remarks Document-level actions are predefined actions in a PDF document that are triggered by specific events, such as opening or closing the document. Use this method to programmatically invoke such actions on a PDF form. DoDocumentJSAction(PdfForm) Executes the JavaScript action associated with the document in the specified PDF form. public static void DoDocumentJSAction(PdfForm form) Parameters form PdfForm The PdfForm object representing the PDF form on which the JavaScript action will be executed. Cannot be null. Remarks This method triggers the document-level JavaScript action defined in the PDF form. Ensure that the PdfForm instance is properly initialized before calling this method. DoDocumentOpenAction(PdfForm) Executes the document's open action, if defined, for the specified PDF form. public static void DoDocumentOpenAction(PdfForm form) Parameters form PdfForm The PdfForm representing the PDF document. This parameter cannot be null. Remarks This method triggers any actions associated with the document's open event, such as scripts or other predefined behaviors. Ensure that the form is properly initialized before calling this method. DoPageAAction(PdfForm, PdfPage, PdfPageAActionType) Executes a specific page-level additional action on a PDF page within a form. public static void DoPageAAction(PdfForm form, PdfPage page, PdfPageAActionType action) Parameters form PdfForm The PdfForm instance representing the form containing the page. page PdfPage The PdfPage instance representing the page on which the action will be performed. action PdfPageAActionType The type of additional action to execute, specified as a PdfPageAActionType value. Remarks This method triggers a predefined additional action associated with the specified page in the context of the provided form. The action type is determined by the action parameter, which must be a valid member of the PdfPageAActionType enumeration. ForceKillFocus(PdfForm) Forces the specified PDF form to lose focus. public static void ForceKillFocus(PdfForm form) Parameters form PdfForm The PdfForm instance whose focus will be forcibly removed. Cannot be null. Remarks This method is typically used to ensure that no form field within the specified PDF form retains focus. It may be useful in scenarios where focus-related behavior needs to be reset or overridden. GetFocusedAnnot(PdfForm, out int, out PdfAnnotation?) Retrieves the currently focused annotation within the specified PDF form, if any. public static bool GetFocusedAnnot(PdfForm form, out int pageIndex, out PdfAnnotation? annotation) Parameters form PdfForm The PdfForm instance representing the form to query. pageIndex int When this method returns, contains the zero-based index of the page containing the focused annotation, or -1 if no annotation is focused. annotation PdfAnnotation When this method returns, contains the PdfAnnotation object representing the focused annotation, or null if no annotation is focused. Returns bool true if a focused annotation is found; otherwise, false. Remarks This method queries the PDF form to determine if an annotation currently has focus. If an annotation is focused, its associated page index and annotation object are returned. If no annotation is focused, pageIndex is set to -1 and annotation is set to null. GetFocusedText(PdfForm, PdfPage) Retrieves the text from the currently focused field in a PDF form on the specified page. public static string? GetFocusedText(PdfForm form, PdfPage page) Parameters form PdfForm The PdfForm instance representing the PDF form. page PdfPage The PdfPage instance representing the page containing the focused field. Returns string A string containing the text of the focused field, or null if no field is focused or the field is empty. Remarks The returned text is encoded in UTF-8. If the focused field is empty, this method returns null. GetSelectedText(PdfForm, PdfPage) Retrieves the text currently selected within the specified PDF form and page. public static string? GetSelectedText(PdfForm form, PdfPage page) Parameters form PdfForm The PdfForm instance representing the form containing the selection. page PdfPage The PdfPage instance representing the page containing the selection. Returns string A string containing the selected text, or null if no text is selected. Remarks The returned string is encoded in UTF-8. If no text is selected, the method returns null. IsIndexSelected(PdfForm, PdfPage, int) Determines whether the specified index is selected in the given PDF form on the specified page. public static bool IsIndexSelected(PdfForm form, PdfPage page, int index) Parameters form PdfForm The PDF form containing the selection state. page PdfPage The page of the PDF form to check. index int The index to check for selection. Returns bool true if the specified index is selected; otherwise, false. Remarks This method checks the selection state of an index within a PDF form field on a specific page. Ensure that the form and page are valid and properly initialized. OnAfterLoadPage(PdfForm, PdfPage) Performs post-processing actions on a PDF page after it has been loaded into a form. public static void OnAfterLoadPage(PdfForm form, PdfPage page) Parameters form PdfForm The PdfForm instance associated with the PDF document. page PdfPage The PdfPage instance representing the loaded page. Remarks This method should be called after a page is loaded to ensure that any necessary form-related adjustments or initializations are applied to the page. It is typically used in workflows involving interactive forms or annotations. OnBeforeClosePage(PdfForm, PdfPage) Performs necessary operations before a PDF page is closed. public static void OnBeforeClosePage(PdfForm form, PdfPage page) Parameters form PdfForm The PdfForm associated with the PDF document. Cannot be null. page PdfPage The PdfPage that is about to be closed. Cannot be null. Remarks This method ensures that any required cleanup or finalization tasks are performed for the specified page before it is closed. Both form and page must be valid and initialized. OnChar(PdfForm, PdfPage, int, int) Handles a character input event for a PDF form on a specific page. public static void OnChar(PdfForm form, PdfPage page, int charCode, int modifier) Parameters form PdfForm The PdfForm instance representing the form to which the character input is applied. page PdfPage The PdfPage instance representing the page containing the form. charCode int The Unicode character code of the input character. modifier int An integer representing any modifier keys (e.g., Shift, Ctrl) that were active during the input event. Remarks This method processes character input events, such as typing into a form field, and applies the input to the specified form and page. Ensure that both form and page are valid and properly initialized before calling this method. OnFocus(PdfForm, PdfPage, int, double, double) Handles the focus event for a PDF form field. public static void OnFocus(PdfForm form, PdfPage page, int modifier, double x, double y) Parameters form PdfForm The PdfForm instance representing the form containing the field. page PdfPage The PdfPage instance representing the page where the form field is located. modifier int An integer representing the modifier keys pressed during the focus event. This value is typically a bitmask of key states (e.g., Shift, Ctrl, Alt). x double The x-coordinate, in points, of the focus event relative to the page. y double The y-coordinate, in points, of the focus event relative to the page. OnKeyDown(PdfForm, PdfPage, int, int) Handles a key-down event for a PDF form on a specified page. public static void OnKeyDown(PdfForm form, PdfPage page, int keyCode, int modifier) Parameters form PdfForm The PdfForm instance representing the form to process the key event for. page PdfPage The PdfPage instance representing the page containing the form. keyCode int The key code of the key that was pressed. modifier int The modifier key state (e.g., Shift, Ctrl, Alt) at the time of the key press. OnKeyUp(PdfForm, PdfPage, int, int) Handles the key-up event for a PDF form on a specified page. public static void OnKeyUp(PdfForm form, PdfPage page, int keyCode, int modifier) Parameters form PdfForm The PdfForm instance representing the form where the event occurred. page PdfPage The PdfPage instance representing the page containing the form. keyCode int The code of the key that was released. modifier int The modifier key state at the time of the key release, such as Shift, Ctrl, or Alt. OnLButtonDoubleClick(PdfForm, PdfPage, int, double, double) Handles a left mouse button double-click event on a PDF form. public static void OnLButtonDoubleClick(PdfForm form, PdfPage page, int modifier, double x, double y) Parameters form PdfForm The PdfForm instance representing the form where the event occurred. page PdfPage The PdfPage instance representing the page containing the form. modifier int An integer representing the state of modifier keys (e.g., Shift, Ctrl, Alt) during the event. x double The x-coordinate, in page space, where the double-click occurred. y double The y-coordinate, in page space, where the double-click occurred. OnLButtonDown(PdfForm, PdfPage, int, double, double) Handles a left mouse button down event on a PDF form at the specified location. public static void OnLButtonDown(PdfForm form, PdfPage page, int modifier, double x, double y) Parameters form PdfForm The PdfForm instance representing the form being interacted with. page PdfPage The PdfPage instance representing the page containing the form. modifier int An integer representing any modifier keys pressed during the event (e.g., Shift, Ctrl). x double The x-coordinate of the mouse pointer, in the page's coordinate system. y double The y-coordinate of the mouse pointer, in the page's coordinate system. OnLButtonUp(PdfForm, PdfPage, int, double, double) Handles the left mouse button release event for a PDF form on a specified page. public static void OnLButtonUp(PdfForm form, PdfPage page, int modifier, double x, double y) Parameters form PdfForm The PdfForm instance representing the form to interact with. page PdfPage The PdfPage instance representing the page where the event occurred. modifier int An integer representing the state of modifier keys (e.g., Shift, Ctrl) at the time of the event. x double The x-coordinate of the mouse pointer, in page coordinates, at the time of the event. y double The y-coordinate of the mouse pointer, in page coordinates, at the time of the event. OnMouseMove(PdfForm, PdfPage, int, double, double) Handles the mouse move event for a PDF form on a specific page. public static void OnMouseMove(PdfForm form, PdfPage page, int modifier, double x, double y) Parameters form PdfForm The PdfForm instance representing the form to interact with. page PdfPage The PdfPage instance representing the page where the mouse event occurred. modifier int An integer representing the state of modifier keys (e.g., Shift, Ctrl, Alt) during the mouse event. x double The x-coordinate of the mouse pointer, in page coordinates. y double The y-coordinate of the mouse pointer, in page coordinates. OnMouseWheel(PdfForm, PdfPage, int, FsPointF, int, int) Handles mouse wheel events for a PDF form on a specific page. public static void OnMouseWheel(PdfForm form, PdfPage page, int modifier, FsPointF coord, int deltaX, int deltaY) Parameters form PdfForm The PdfForm instance associated with the PDF document. page PdfPage The PdfPage instance representing the page where the event occurred. modifier int An integer representing the state of modifier keys (e.g., Ctrl, Alt, Shift) during the event. coord FsPointF The coordinates, in points, where the mouse wheel event occurred. deltaX int The horizontal scroll delta, in points, caused by the mouse wheel. deltaY int The vertical scroll delta, in points, caused by the mouse wheel. OnRButtonDown(PdfForm, PdfPage, int, double, double) Handles a right mouse button down event on a PDF form at the specified location. public static void OnRButtonDown(PdfForm form, PdfPage page, int modifier, double x, double y) Parameters form PdfForm The PdfForm instance representing the form being interacted with. page PdfPage The PdfPage instance representing the page where the event occurred. modifier int An integer representing the state of modifier keys (e.g., Ctrl, Alt, Shift) during the event. x double The x-coordinate, in page space, where the event occurred. y double The y-coordinate, in page space, where the event occurred. OnRButtonUp(PdfForm, PdfPage, int, double, double) Handles the right mouse button release event for a PDF form on a specified page. public static void OnRButtonUp(PdfForm form, PdfPage page, int modifier, double x, double y) Parameters form PdfForm The PdfForm instance representing the form being interacted with. page PdfPage The PdfPage instance representing the page where the event occurred. modifier int An integer representing the state of modifier keys (e.g., Ctrl, Alt, Shift) at the time of the event. x double The x-coordinate, in page space, where the right mouse button was released. y double The y-coordinate, in page space, where the right mouse button was released. Redo(PdfForm, PdfPage) Reapplies the most recently undone action on the specified PDF form and page. public static bool Redo(PdfForm form, PdfPage page) Parameters form PdfForm The PdfForm instance representing the form to which the redo operation applies. page PdfPage The PdfPage instance representing the page on which the redo operation is performed. Returns bool true if the redo operation is successful; otherwise, false. ReplaceAndKeepSelection(PdfForm, PdfPage, string) Replaces the current text in the specified PDF form field while preserving the user's selection. public static void ReplaceAndKeepSelection(PdfForm form, PdfPage page, string text) Parameters form PdfForm The PdfForm object representing the form containing the field to update. Cannot be null. page PdfPage The PdfPage object representing the page containing the form field. Cannot be null. text string The new text to replace the current content of the form field. Cannot be null or empty. Remarks This method ensures that the user's current selection within the form field is preserved after the text is replaced. ReplaceSelection(PdfForm, PdfPage, string) Replaces the current text selection on the specified PDF page with the provided text. public static void ReplaceSelection(PdfForm form, PdfPage page, string text) Parameters form PdfForm The PdfForm object representing the form associated with the PDF document. Cannot be null. page PdfPage The PdfPage object representing the page where the text selection will be replaced. Cannot be null. text string The text to replace the current selection with. If null or empty, the selection will be cleared. Remarks This method modifies the content of the specified PDF page by replacing the currently selected text with the provided string. Ensure that the form and page objects are valid and properly initialized before calling this method. SelectAllText(PdfForm, PdfPage) Selects all text within the specified PDF form and page. public static bool SelectAllText(PdfForm form, PdfPage page) Parameters form PdfForm The PdfForm object representing the form containing the text to select. Cannot be null. page PdfPage The PdfPage object representing the page within the form. Cannot be null. Returns bool true if the text was successfully selected; otherwise, false. Remarks This method is typically used to programmatically select all text on a specific page of a PDF form. The selection state may depend on the underlying PDF library's implementation. SetFocusedAnnot(PdfForm, PdfAnnotation) Sets the specified annotation as the focused annotation within the given PDF form. public static bool SetFocusedAnnot(PdfForm form, PdfAnnotation annotation) Parameters form PdfForm The PDF form containing the annotation to be focused. Cannot be null. annotation PdfAnnotation The annotation to set as focused. Cannot be null. Returns bool true if the annotation was successfully set as focused; otherwise, false. SetIndexSelected(PdfForm, PdfPage, int, bool) Sets the selection state of a specific index within a form on a given PDF page. public static bool SetIndexSelected(PdfForm form, PdfPage page, int index, bool selected) Parameters form PdfForm The PdfForm instance representing the form to modify. page PdfPage The PdfPage instance representing the page containing the form. index int The zero-based index of the item to update within the form. selected bool true to mark the item at the specified index as selected; otherwise, false to deselect it. Returns bool true if the selection state was successfully updated; otherwise, false. Remarks This method modifies the selection state of an item within a form field on a specific PDF page. Ensure that the provided form and page are valid and correspond to the same document. Undo(PdfForm, PdfPage) Reverts the most recent change made to the specified PDF form on the given page. public static bool Undo(PdfForm form, PdfPage page) Parameters form PdfForm The PDF form to undo the last change for. Cannot be null. page PdfPage The page of the PDF form where the undo operation is performed. Cannot be null. Returns bool true if the undo operation was successful; otherwise, false."
  },
  "api/nebulae.dotPDFium.Forms.PdfFormFillBinder.html": {
    "href": "api/nebulae.dotPDFium.Forms.PdfFormFillBinder.html",
    "title": "Class PdfFormFillBinder | dotPDFium",
    "summary": "Class PdfFormFillBinder Namespace nebulae.dotPDFium.Forms Assembly dotPDFium.dll public sealed class PdfFormFillBinder : IDisposable Inheritance object PdfFormFillBinder Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PdfFormFillBinder(PdfForm, PdfFormEvents) public PdfFormFillBinder(PdfForm form, PdfFormEvents events) Parameters form PdfForm events PdfFormEvents Fields Info public PdfFormFillInfo Info Field Value PdfFormFillInfo Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/nebulae.dotPDFium.Forms.PdfListBox.html": {
    "href": "api/nebulae.dotPDFium.Forms.PdfListBox.html",
    "title": "Class PdfListBox | dotPDFium",
    "summary": "Class PdfListBox Namespace nebulae.dotPDFium.Forms Assembly dotPDFium.dll public class PdfListBox : PdfFormElement, IDisposable Inheritance object PdfFormElement PdfListBox Implements IDisposable Inherited Members PdfFormElement._type PdfFormElement._annot PdfFormElement._annotIndex PdfFormElement._disposed PdfFormElement.Form PdfFormElement.Page PdfFormElement.ElementType PdfFormElement.Handle PdfFormElement.GetRect() PdfFormElement.SetRect(FsRectF) PdfFormElement.SetBorderColor(RgbaColor) PdfFormElement.SetFillColor(RgbaColor) PdfFormElement.SetTextColor(RgbaColor) PdfFormElement.GetFontSize() PdfFormElement.GetFontColor() PdfFormElement.GetAnnotationFlags() PdfFormElement.SetAnnotationFlags(PdfAnnotationFlags) PdfFormElement.Dispose() PdfFormElement.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties OptionCount public int OptionCount { get; } Property Value int Methods GetOptionLabel(int) public string? GetOptionLabel(int index) Parameters index int Returns string GetSelectedIndices() public List<int> GetSelectedIndices() Returns List<int> GetValue() public string? GetValue() Returns string IsOptionSelected(int) public bool IsOptionSelected(int index) Parameters index int Returns bool IsReadOnly() public bool IsReadOnly() Returns bool SetOptionSelected(int, bool) public bool SetOptionSelected(int index, bool selected) Parameters index int selected bool Returns bool SetValue(string) public bool SetValue(string value) Parameters value string Returns bool"
  },
  "api/nebulae.dotPDFium.Forms.PdfPushButton.html": {
    "href": "api/nebulae.dotPDFium.Forms.PdfPushButton.html",
    "title": "Class PdfPushButton | dotPDFium",
    "summary": "Class PdfPushButton Namespace nebulae.dotPDFium.Forms Assembly dotPDFium.dll public class PdfPushButton : PdfFormElement, IDisposable Inheritance object PdfFormElement PdfPushButton Implements IDisposable Inherited Members PdfFormElement._type PdfFormElement._annot PdfFormElement._annotIndex PdfFormElement._disposed PdfFormElement.Form PdfFormElement.Page PdfFormElement.ElementType PdfFormElement.Handle PdfFormElement.GetRect() PdfFormElement.SetRect(FsRectF) PdfFormElement.SetBorderColor(RgbaColor) PdfFormElement.SetFillColor(RgbaColor) PdfFormElement.SetTextColor(RgbaColor) PdfFormElement.GetFontSize() PdfFormElement.GetFontColor() PdfFormElement.GetAnnotationFlags() PdfFormElement.SetAnnotationFlags(PdfAnnotationFlags) PdfFormElement.Dispose() PdfFormElement.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetCaption() public string? GetCaption() Returns string GetControlCount() public int GetControlCount() Returns int GetControlIndex() public int GetControlIndex() Returns int IsReadOnly() public bool IsReadOnly() Returns bool"
  },
  "api/nebulae.dotPDFium.Forms.PdfRadioButton.html": {
    "href": "api/nebulae.dotPDFium.Forms.PdfRadioButton.html",
    "title": "Class PdfRadioButton | dotPDFium",
    "summary": "Class PdfRadioButton Namespace nebulae.dotPDFium.Forms Assembly dotPDFium.dll public class PdfRadioButton : PdfFormElement, IDisposable Inheritance object PdfFormElement PdfRadioButton Implements IDisposable Inherited Members PdfFormElement._type PdfFormElement._annot PdfFormElement._annotIndex PdfFormElement._disposed PdfFormElement.Form PdfFormElement.Page PdfFormElement.ElementType PdfFormElement.Handle PdfFormElement.GetRect() PdfFormElement.SetRect(FsRectF) PdfFormElement.SetBorderColor(RgbaColor) PdfFormElement.SetFillColor(RgbaColor) PdfFormElement.SetTextColor(RgbaColor) PdfFormElement.GetFontSize() PdfFormElement.GetFontColor() PdfFormElement.GetAnnotationFlags() PdfFormElement.SetAnnotationFlags(PdfAnnotationFlags) PdfFormElement.Dispose() PdfFormElement.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetExportValue() public string? GetExportValue() Returns string IsChecked() public bool IsChecked() Returns bool IsReadOnly() public bool IsReadOnly() Returns bool SetChecked(bool) public bool SetChecked(bool value) Parameters value bool Returns bool"
  },
  "api/nebulae.dotPDFium.Forms.PdfSignatureField.html": {
    "href": "api/nebulae.dotPDFium.Forms.PdfSignatureField.html",
    "title": "Class PdfSignatureField | dotPDFium",
    "summary": "Class PdfSignatureField Namespace nebulae.dotPDFium.Forms Assembly dotPDFium.dll public class PdfSignatureField : PdfFormElement, IDisposable Inheritance object PdfFormElement PdfSignatureField Implements IDisposable Inherited Members PdfFormElement._type PdfFormElement._annot PdfFormElement._annotIndex PdfFormElement._disposed PdfFormElement.Form PdfFormElement.Page PdfFormElement.ElementType PdfFormElement.Handle PdfFormElement.GetRect() PdfFormElement.SetRect(FsRectF) PdfFormElement.SetBorderColor(RgbaColor) PdfFormElement.SetFillColor(RgbaColor) PdfFormElement.SetTextColor(RgbaColor) PdfFormElement.GetFontSize() PdfFormElement.GetFontColor() PdfFormElement.GetAnnotationFlags() PdfFormElement.SetAnnotationFlags(PdfAnnotationFlags) PdfFormElement.Dispose() PdfFormElement.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetSignatureValue() public string? GetSignatureValue() Returns string IsReadOnly() public bool IsReadOnly() Returns bool IsSigned() public bool IsSigned() Returns bool"
  },
  "api/nebulae.dotPDFium.Forms.PdfTextField.html": {
    "href": "api/nebulae.dotPDFium.Forms.PdfTextField.html",
    "title": "Class PdfTextField | dotPDFium",
    "summary": "Class PdfTextField Namespace nebulae.dotPDFium.Forms Assembly dotPDFium.dll public class PdfTextField : PdfFormElement, IDisposable Inheritance object PdfFormElement PdfTextField Implements IDisposable Inherited Members PdfFormElement._type PdfFormElement._annot PdfFormElement._annotIndex PdfFormElement._disposed PdfFormElement.Form PdfFormElement.Page PdfFormElement.ElementType PdfFormElement.Handle PdfFormElement.GetRect() PdfFormElement.SetRect(FsRectF) PdfFormElement.SetBorderColor(RgbaColor) PdfFormElement.SetFillColor(RgbaColor) PdfFormElement.SetTextColor(RgbaColor) PdfFormElement.GetFontSize() PdfFormElement.GetFontColor() PdfFormElement.GetAnnotationFlags() PdfFormElement.SetAnnotationFlags(PdfAnnotationFlags) PdfFormElement.Dispose() PdfFormElement.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetValue() public string? GetValue() Returns string IsReadOnly() public bool IsReadOnly() Returns bool SetValue(string) public bool SetValue(string value) Parameters value string Returns bool"
  },
  "api/nebulae.dotPDFium.Forms.html": {
    "href": "api/nebulae.dotPDFium.Forms.html",
    "title": "Namespace nebulae.dotPDFium.Forms | dotPDFium",
    "summary": "Namespace nebulae.dotPDFium.Forms Classes PdfCheckBox PdfComboBox PdfForm PdfFormEvents PdfFormEventsNotifier Dispatches user-driven events to the PDFium form environment. These methods mirror PDFium's FORM_* notification APIs (see fpdf_formfill.h). PdfFormFillBinder PdfListBox PdfPushButton PdfRadioButton PdfSignatureField PdfTextField"
  },
  "api/nebulae.dotPDFium.Native.AddSegmentDelegate.html": {
    "href": "api/nebulae.dotPDFium.Native.AddSegmentDelegate.html",
    "title": "Delegate AddSegmentDelegate | dotPDFium",
    "summary": "Delegate AddSegmentDelegate Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public delegate void AddSegmentDelegate(nint pThis, nuint offset, nuint size) Parameters pThis nint offset nuint size nuint"
  },
  "api/nebulae.dotPDFium.Native.AttachmentValueType.html": {
    "href": "api/nebulae.dotPDFium.Native.AttachmentValueType.html",
    "title": "Enum AttachmentValueType | dotPDFium",
    "summary": "Enum AttachmentValueType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Represents the type of value that an attachment can hold. public enum AttachmentValueType Fields Array = 4 Boolean = 0 Dictionary = 5 Name = 3 Number = 1 Stream = 6 String = 2 Remarks This enumeration defines the possible data types that can be associated with an attachment. It is used to specify the type of value stored in an attachment, enabling type-safe handling of attachment data."
  },
  "api/nebulae.dotPDFium.Native.CharsetFontMap.html": {
    "href": "api/nebulae.dotPDFium.Native.CharsetFontMap.html",
    "title": "Struct CharsetFontMap | dotPDFium",
    "summary": "Struct CharsetFontMap Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct CharsetFontMap Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields charset public int charset Field Value int fontname public string fontname Field Value string"
  },
  "api/nebulae.dotPDFium.Native.FpdfSystemTime.html": {
    "href": "api/nebulae.dotPDFium.Native.FpdfSystemTime.html",
    "title": "Struct FpdfSystemTime | dotPDFium",
    "summary": "Struct FpdfSystemTime Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct FpdfSystemTime Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields wDay public ushort wDay Field Value ushort wDayOfWeek public ushort wDayOfWeek Field Value ushort wHour public ushort wHour Field Value ushort wMilliseconds public ushort wMilliseconds Field Value ushort wMinute public ushort wMinute Field Value ushort wMonth public ushort wMonth Field Value ushort wSecond public ushort wSecond Field Value ushort wYear public ushort wYear Field Value ushort"
  },
  "api/nebulae.dotPDFium.Native.FpfObjectType.html": {
    "href": "api/nebulae.dotPDFium.Native.FpfObjectType.html",
    "title": "Enum FpfObjectType | dotPDFium",
    "summary": "Enum FpfObjectType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Represents the types of objects that can be processed in the FPF (File Processing Framework). public enum FpfObjectType Fields Array = 5 Boolean = 1 Dictionary = 6 Name = 4 NullObj = 8 Number = 2 Reference = 9 Stream = 7 String = 3 Unknown = 0 Remarks This enumeration defines the various object types that may be encountered or manipulated within the FPF system. Each value corresponds to a specific type of object, such as a boolean, number, string, or more complex structures like arrays and dictionaries."
  },
  "api/nebulae.dotPDFium.Native.FsMatrix.html": {
    "href": "api/nebulae.dotPDFium.Native.FsMatrix.html",
    "title": "Struct FsMatrix | dotPDFium",
    "summary": "Struct FsMatrix Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct FsMatrix Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FsMatrix(double, double, double, double, double, double) public FsMatrix(double a, double b, double c, double d, double e, double f) Parameters a double b double c double d double e double f double Fields a public double a Field Value double b public double b Field Value double c public double c Field Value double d public double d Field Value double e public double e Field Value double f public double f Field Value double"
  },
  "api/nebulae.dotPDFium.Native.FsMatrixF.html": {
    "href": "api/nebulae.dotPDFium.Native.FsMatrixF.html",
    "title": "Struct FsMatrixF | dotPDFium",
    "summary": "Struct FsMatrixF Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct FsMatrixF Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FsMatrixF(float, float, float, float, float, float) public FsMatrixF(float a, float b, float c, float d, float e, float f) Parameters a float b float c float d float e float f float Fields a public float a Field Value float b public float b Field Value float c public float c Field Value float d public float d Field Value float e public float e Field Value float f public float f Field Value float"
  },
  "api/nebulae.dotPDFium.Native.FsPointF.html": {
    "href": "api/nebulae.dotPDFium.Native.FsPointF.html",
    "title": "Struct FsPointF | dotPDFium",
    "summary": "Struct FsPointF Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct FsPointF Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FsPointF(float, float) public FsPointF(float x, float y) Parameters x float y float Fields X public float X Field Value float Y public float Y Field Value float"
  },
  "api/nebulae.dotPDFium.Native.FsQuadPointsF.html": {
    "href": "api/nebulae.dotPDFium.Native.FsQuadPointsF.html",
    "title": "Struct FsQuadPointsF | dotPDFium",
    "summary": "Struct FsQuadPointsF Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct FsQuadPointsF Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FsQuadPointsF(float, float, float, float, float, float, float, float) public FsQuadPointsF(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4) Parameters x1 float y1 float x2 float y2 float x3 float y3 float x4 float y4 float"
  },
  "api/nebulae.dotPDFium.Native.FsRect.html": {
    "href": "api/nebulae.dotPDFium.Native.FsRect.html",
    "title": "Struct FsRect | dotPDFium",
    "summary": "Struct FsRect Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct FsRect Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FsRect(double, double, double, double) public FsRect(double left, double top, double right, double bottom) Parameters left double top double right double bottom double Fields bottom public double bottom Field Value double left public double left Field Value double right public double right Field Value double top public double top Field Value double"
  },
  "api/nebulae.dotPDFium.Native.FsRectF.html": {
    "href": "api/nebulae.dotPDFium.Native.FsRectF.html",
    "title": "Struct FsRectF | dotPDFium",
    "summary": "Struct FsRectF Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct FsRectF Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FsRectF(float, float, float, float) public FsRectF(float left, float top, float right, float bottom) Parameters left float top float right float bottom float Fields bottom public float bottom Field Value float left public float left Field Value float right public float right Field Value float top public float top Field Value float"
  },
  "api/nebulae.dotPDFium.Native.FsSize.html": {
    "href": "api/nebulae.dotPDFium.Native.FsSize.html",
    "title": "Struct FsSize | dotPDFium",
    "summary": "Struct FsSize Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct FsSize Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FsSize(double, double) public FsSize(double width, double height) Parameters width double height double Fields height public double height Field Value double width public double width Field Value double"
  },
  "api/nebulae.dotPDFium.Native.FsSizeF.html": {
    "href": "api/nebulae.dotPDFium.Native.FsSizeF.html",
    "title": "Struct FsSizeF | dotPDFium",
    "summary": "Struct FsSizeF Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct FsSizeF Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FsSizeF(float, float) public FsSizeF(float width, float height) Parameters width float height float Fields height public float height Field Value float width public float width Field Value float"
  },
  "api/nebulae.dotPDFium.Native.FxDownloadHints.html": {
    "href": "api/nebulae.dotPDFium.Native.FxDownloadHints.html",
    "title": "Struct FxDownloadHints | dotPDFium",
    "summary": "Struct FxDownloadHints Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct FxDownloadHints Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields AddSegment public nint AddSegment Field Value nint version public int version Field Value int"
  },
  "api/nebulae.dotPDFium.Native.FxFileAvail.html": {
    "href": "api/nebulae.dotPDFium.Native.FxFileAvail.html",
    "title": "Struct FxFileAvail | dotPDFium",
    "summary": "Struct FxFileAvail Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct FxFileAvail Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields IsDataAvail public nint IsDataAvail Field Value nint version public int version Field Value int"
  },
  "api/nebulae.dotPDFium.Native.FxFontCharset.html": {
    "href": "api/nebulae.dotPDFium.Native.FxFontCharset.html",
    "title": "Enum FxFontCharset | dotPDFium",
    "summary": "Enum FxFontCharset Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies character set values used to define the encoding of text in fonts. public enum FxFontCharset Fields ANSI = 0 Arabic = 178 ChineseBig5 = 136 Cyrillic = 204 Default = 1 EasternEuropean = 238 GB2312 = 134 Greek = 161 Hangeul = 129 Hebrew = 177 ShiftJIS = 128 Symbol = 2 Thai = 222 Vietnamese = 163 Remarks This enumeration is commonly used to specify the character set for font rendering or text encoding. Each value corresponds to a specific character set, which determines how characters are mapped to glyphs."
  },
  "api/nebulae.dotPDFium.Native.FxFontPitchFamily.html": {
    "href": "api/nebulae.dotPDFium.Native.FxFontPitchFamily.html",
    "title": "Enum FxFontPitchFamily | dotPDFium",
    "summary": "Enum FxFontPitchFamily Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the pitch and family classification of a font. [Flags] public enum FxFontPitchFamily Fields FixedPitch = 1 Roman = 16 Script = 64 Remarks This enumeration is used to define font characteristics such as whether the font has a fixed pitch or belongs to a specific family, such as Roman or Script. The values can be combined using a bitwise OR operation due to the FlagsAttribute applied to the enumeration."
  },
  "api/nebulae.dotPDFium.Native.FxFontWeight.html": {
    "href": "api/nebulae.dotPDFium.Native.FxFontWeight.html",
    "title": "Enum FxFontWeight | dotPDFium",
    "summary": "Enum FxFontWeight Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the weight of a font, which determines the thickness of the characters. public enum FxFontWeight Fields Bold = 700 Normal = 400 Remarks The font weight is represented as an integer value, where higher values indicate thicker weights. Commonly used values include Normal for regular text and Bold for bold text."
  },
  "api/nebulae.dotPDFium.Native.GetBlockDelegate.html": {
    "href": "api/nebulae.dotPDFium.Native.GetBlockDelegate.html",
    "title": "Delegate GetBlockDelegate | dotPDFium",
    "summary": "Delegate GetBlockDelegate Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public delegate int GetBlockDelegate(nint param, uint position, nint buffer, uint size) Parameters param nint position uint buffer nint size uint Returns int"
  },
  "api/nebulae.dotPDFium.Native.IfSdkPause.html": {
    "href": "api/nebulae.dotPDFium.Native.IfSdkPause.html",
    "title": "Struct IfSdkPause | dotPDFium",
    "summary": "Struct IfSdkPause Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct IfSdkPause Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields NeedToPauseNow public nint NeedToPauseNow Field Value nint userData public nint userData Field Value nint version public int version Field Value int"
  },
  "api/nebulae.dotPDFium.Native.IsDataAvailDelegate.html": {
    "href": "api/nebulae.dotPDFium.Native.IsDataAvailDelegate.html",
    "title": "Delegate IsDataAvailDelegate | dotPDFium",
    "summary": "Delegate IsDataAvailDelegate Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public delegate int IsDataAvailDelegate(nint pThis, nuint offset, nuint size) Parameters pThis nint offset nuint size nuint Returns int"
  },
  "api/nebulae.dotPDFium.Native.NeedToPauseNowDelegate.html": {
    "href": "api/nebulae.dotPDFium.Native.NeedToPauseNowDelegate.html",
    "title": "Delegate NeedToPauseNowDelegate | dotPDFium",
    "summary": "Delegate NeedToPauseNowDelegate Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public delegate int NeedToPauseNowDelegate(ref IfSdkPause pause) Parameters pause IfSdkPause Returns int"
  },
  "api/nebulae.dotPDFium.Native.PdfActionType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfActionType.html",
    "title": "Enum PdfActionType | dotPDFium",
    "summary": "Enum PdfActionType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the type of action that can be performed in a PDF document. public enum PdfActionType Fields GoTo = 1 JavaScript = 6 Launch = 4 Named = 5 RemoteGoTo = 2 Unsupported = 0 Uri = 3 Remarks This enumeration defines the various types of actions that can be associated with interactive elements in a PDF, such as links or buttons. Each action type represents a specific behavior or operation that can be triggered when the action is executed."
  },
  "api/nebulae.dotPDFium.Native.PdfAnnotNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfAnnotNative.html",
    "title": "Class PdfAnnotNative | dotPDFium",
    "summary": "Class PdfAnnotNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfAnnotNative Inheritance object PdfAnnotNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDFAnnot_AddFileAttachment(nint, string) public static extern nint FPDFAnnot_AddFileAttachment(nint annot, string name) Parameters annot nint name string Returns nint FPDFAnnot_AddInkStroke(nint, nint, nuint) public static extern int FPDFAnnot_AddInkStroke(nint annot, nint points, nuint pointCount) Parameters annot nint points nint pointCount nuint Returns int FPDFAnnot_AppendAttachmentPoints(nint, ref FsQuadPointsF) public static extern bool FPDFAnnot_AppendAttachmentPoints(nint annot, ref FsQuadPointsF quad) Parameters annot nint quad FsQuadPointsF Returns bool FPDFAnnot_AppendObject(nint, nint) public static extern bool FPDFAnnot_AppendObject(nint annot, nint obj) Parameters annot nint obj nint Returns bool FPDFAnnot_CountAttachmentPoints(nint) public static extern nuint FPDFAnnot_CountAttachmentPoints(nint annot) Parameters annot nint Returns nuint FPDFAnnot_GetAP(nint, int, char[], uint) public static extern uint FPDFAnnot_GetAP(nint annot, int mode, char[] buffer, uint buflen) Parameters annot nint mode int buffer char[] buflen uint Returns uint FPDFAnnot_GetAttachmentPoints(nint, nuint, out FsQuadPointsF) public static extern bool FPDFAnnot_GetAttachmentPoints(nint annot, nuint index, out FsQuadPointsF quad) Parameters annot nint index nuint quad FsQuadPointsF Returns bool FPDFAnnot_GetBorder(nint, out float, out float, out float) public static extern bool FPDFAnnot_GetBorder(nint annot, out float hr, out float vr, out float width) Parameters annot nint hr float vr float width float Returns bool FPDFAnnot_GetColor(nint, int, out uint, out uint, out uint, out uint) public static extern bool FPDFAnnot_GetColor(nint annot, int type, out uint r, out uint g, out uint b, out uint a) Parameters annot nint type int r uint g uint b uint a uint Returns bool FPDFAnnot_GetFileAttachment(nint) public static extern nint FPDFAnnot_GetFileAttachment(nint annot) Parameters annot nint Returns nint FPDFAnnot_GetFlags(nint) public static extern int FPDFAnnot_GetFlags(nint annot) Parameters annot nint Returns int FPDFAnnot_GetFocusableSubtypes(nint, nint, nuint) public static extern bool FPDFAnnot_GetFocusableSubtypes(nint hHandle, nint subtypes, nuint count) Parameters hHandle nint subtypes nint count nuint Returns bool FPDFAnnot_GetFocusableSubtypesCount(nint) public static extern int FPDFAnnot_GetFocusableSubtypesCount(nint hHandle) Parameters hHandle nint Returns int FPDFAnnot_GetFontColor(nint, nint, out uint, out uint, out uint) public static extern bool FPDFAnnot_GetFontColor(nint hHandle, nint annot, out uint r, out uint g, out uint b) Parameters hHandle nint annot nint r uint g uint b uint Returns bool FPDFAnnot_GetFontSize(nint, nint, out float) public static extern bool FPDFAnnot_GetFontSize(nint hHandle, nint annot, out float value) Parameters hHandle nint annot nint value float Returns bool FPDFAnnot_GetFormAdditionalActionJavaScript(nint, nint, int, char[], uint) public static extern uint FPDFAnnot_GetFormAdditionalActionJavaScript(nint hHandle, nint annot, int eventId, char[] buffer, uint buflen) Parameters hHandle nint annot nint eventId int buffer char[] buflen uint Returns uint FPDFAnnot_GetFormControlCount(nint, nint) public static extern int FPDFAnnot_GetFormControlCount(nint hHandle, nint annot) Parameters hHandle nint annot nint Returns int FPDFAnnot_GetFormControlIndex(nint, nint) public static extern int FPDFAnnot_GetFormControlIndex(nint hHandle, nint annot) Parameters hHandle nint annot nint Returns int FPDFAnnot_GetFormFieldAlternateName(nint, nint, char[], uint) public static extern uint FPDFAnnot_GetFormFieldAlternateName(nint hHandle, nint annot, char[] buffer, uint buflen) Parameters hHandle nint annot nint buffer char[] buflen uint Returns uint FPDFAnnot_GetFormFieldAtPoint(nint, nint, ref FsPointF) public static extern nint FPDFAnnot_GetFormFieldAtPoint(nint hHandle, nint page, ref FsPointF point) Parameters hHandle nint page nint point FsPointF Returns nint FPDFAnnot_GetFormFieldExportValue(nint, nint, char[], uint) public static extern uint FPDFAnnot_GetFormFieldExportValue(nint hHandle, nint annot, char[] buffer, uint buflen) Parameters hHandle nint annot nint buffer char[] buflen uint Returns uint FPDFAnnot_GetFormFieldFlags(nint, nint) public static extern int FPDFAnnot_GetFormFieldFlags(nint hHandle, nint annot) Parameters hHandle nint annot nint Returns int FPDFAnnot_GetFormFieldName(nint, nint, char[], uint) public static extern uint FPDFAnnot_GetFormFieldName(nint hHandle, nint annot, char[] buffer, uint buflen) Parameters hHandle nint annot nint buffer char[] buflen uint Returns uint FPDFAnnot_GetFormFieldType(nint, nint) public static extern int FPDFAnnot_GetFormFieldType(nint hHandle, nint annot) Parameters hHandle nint annot nint Returns int FPDFAnnot_GetFormFieldValue(nint, nint, char[], uint) public static extern uint FPDFAnnot_GetFormFieldValue(nint hHandle, nint annot, char[] buffer, uint buflen) Parameters hHandle nint annot nint buffer char[] buflen uint Returns uint FPDFAnnot_GetInkListCount(nint) public static extern uint FPDFAnnot_GetInkListCount(nint annot) Parameters annot nint Returns uint FPDFAnnot_GetInkListPath(nint, uint, nint, uint) public static extern uint FPDFAnnot_GetInkListPath(nint annot, uint pathIndex, nint buffer, uint length) Parameters annot nint pathIndex uint buffer nint length uint Returns uint FPDFAnnot_GetLine(nint, out FsPointF, out FsPointF) public static extern bool FPDFAnnot_GetLine(nint annot, out FsPointF start, out FsPointF end) Parameters annot nint start FsPointF end FsPointF Returns bool FPDFAnnot_GetLink(nint) public static extern nint FPDFAnnot_GetLink(nint annot) Parameters annot nint Returns nint FPDFAnnot_GetLinkedAnnot(nint, string) public static extern nint FPDFAnnot_GetLinkedAnnot(nint annot, string key) Parameters annot nint key string Returns nint FPDFAnnot_GetNumberValue(nint, string, out float) public static extern bool FPDFAnnot_GetNumberValue(nint annot, string key, out float value) Parameters annot nint key string value float Returns bool FPDFAnnot_GetObject(nint, int) public static extern nint FPDFAnnot_GetObject(nint annot, int index) Parameters annot nint index int Returns nint FPDFAnnot_GetObjectCount(nint) public static extern int FPDFAnnot_GetObjectCount(nint annot) Parameters annot nint Returns int FPDFAnnot_GetOptionCount(nint, nint) public static extern int FPDFAnnot_GetOptionCount(nint hHandle, nint annot) Parameters hHandle nint annot nint Returns int FPDFAnnot_GetOptionLabel(nint, nint, int, char[], uint) public static extern uint FPDFAnnot_GetOptionLabel(nint hHandle, nint annot, int index, char[] buffer, uint buflen) Parameters hHandle nint annot nint index int buffer char[] buflen uint Returns uint FPDFAnnot_GetRect(nint, out FsRectF) public static extern bool FPDFAnnot_GetRect(nint annot, out FsRectF rect) Parameters annot nint rect FsRectF Returns bool FPDFAnnot_GetStringValue(nint, string, byte[], uint) public static extern bool FPDFAnnot_GetStringValue(nint annot, string key, byte[] buffer, uint buflen) Parameters annot nint key string buffer byte[] buflen uint Returns bool FPDFAnnot_GetSubtype(nint) public static extern int FPDFAnnot_GetSubtype(nint annot) Parameters annot nint Returns int FPDFAnnot_GetValueType(nint, string) public static extern int FPDFAnnot_GetValueType(nint annot, string key) Parameters annot nint key string Returns int FPDFAnnot_GetVertices(nint, nint, uint) public static extern uint FPDFAnnot_GetVertices(nint annot, nint buffer, uint length) Parameters annot nint buffer nint length uint Returns uint FPDFAnnot_HasAttachmentPoints(nint) public static extern bool FPDFAnnot_HasAttachmentPoints(nint annot) Parameters annot nint Returns bool FPDFAnnot_HasKey(nint, string) public static extern bool FPDFAnnot_HasKey(nint annot, string key) Parameters annot nint key string Returns bool FPDFAnnot_IsChecked(nint, nint) public static extern bool FPDFAnnot_IsChecked(nint hHandle, nint annot) Parameters hHandle nint annot nint Returns bool FPDFAnnot_IsObjectSupportedSubtype(int) public static extern bool FPDFAnnot_IsObjectSupportedSubtype(int subtype) Parameters subtype int Returns bool FPDFAnnot_IsOptionSelected(nint, nint, int) public static extern bool FPDFAnnot_IsOptionSelected(nint hHandle, nint annot, int index) Parameters hHandle nint annot nint index int Returns bool FPDFAnnot_IsSupportedSubtype(int) public static extern bool FPDFAnnot_IsSupportedSubtype(int subtype) Parameters subtype int Returns bool FPDFAnnot_RemoveInkList(nint) public static extern bool FPDFAnnot_RemoveInkList(nint annot) Parameters annot nint Returns bool FPDFAnnot_RemoveObject(nint, int) public static extern bool FPDFAnnot_RemoveObject(nint annot, int index) Parameters annot nint index int Returns bool FPDFAnnot_SetAP(nint, int, string) public static extern bool FPDFAnnot_SetAP(nint annot, int mode, string value) Parameters annot nint mode int value string Returns bool FPDFAnnot_SetAttachmentPoints(nint, nuint, ref FsQuadPointsF) public static extern bool FPDFAnnot_SetAttachmentPoints(nint annot, nuint index, ref FsQuadPointsF quad) Parameters annot nint index nuint quad FsQuadPointsF Returns bool FPDFAnnot_SetBorder(nint, float, float, float) public static extern bool FPDFAnnot_SetBorder(nint annot, float hr, float vr, float width) Parameters annot nint hr float vr float width float Returns bool FPDFAnnot_SetColor(nint, int, uint, uint, uint, uint) public static extern bool FPDFAnnot_SetColor(nint annot, int type, uint r, uint g, uint b, uint a) Parameters annot nint type int r uint g uint b uint a uint Returns bool FPDFAnnot_SetFlags(nint, int) public static extern bool FPDFAnnot_SetFlags(nint annot, int flags) Parameters annot nint flags int Returns bool FPDFAnnot_SetFocusableSubtypes(nint, nint, nuint) public static extern bool FPDFAnnot_SetFocusableSubtypes(nint hHandle, nint subtypes, nuint count) Parameters hHandle nint subtypes nint count nuint Returns bool FPDFAnnot_SetRect(nint, ref FsRectF) public static extern bool FPDFAnnot_SetRect(nint annot, ref FsRectF rect) Parameters annot nint rect FsRectF Returns bool FPDFAnnot_SetStringValue(nint, string, string) public static extern bool FPDFAnnot_SetStringValue(nint annot, string key, string value) Parameters annot nint key string value string Returns bool FPDFAnnot_SetURI(nint, string) public static extern bool FPDFAnnot_SetURI(nint annot, string uri) Parameters annot nint uri string Returns bool FPDFAnnot_UpdateObject(nint, nint) public static extern bool FPDFAnnot_UpdateObject(nint annot, nint obj) Parameters annot nint obj nint Returns bool FPDFPage_CloseAnnot(nint) public static extern void FPDFPage_CloseAnnot(nint annot) Parameters annot nint FPDFPage_CreateAnnot(nint, int) public static extern nint FPDFPage_CreateAnnot(nint page, int subtype) Parameters page nint subtype int Returns nint FPDFPage_GetAnnot(nint, int) public static extern nint FPDFPage_GetAnnot(nint page, int index) Parameters page nint index int Returns nint FPDFPage_GetAnnotCount(nint) public static extern int FPDFPage_GetAnnotCount(nint page) Parameters page nint Returns int FPDFPage_GetAnnotIndex(nint, nint) public static extern int FPDFPage_GetAnnotIndex(nint page, nint annot) Parameters page nint annot nint Returns int FPDFPage_RemoveAnnot(nint, int) public static extern bool FPDFPage_RemoveAnnot(nint page, int index) Parameters page nint index int Returns bool"
  },
  "api/nebulae.dotPDFium.Native.PdfAnnotationActionType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfAnnotationActionType.html",
    "title": "Enum PdfAnnotationActionType | dotPDFium",
    "summary": "Enum PdfAnnotationActionType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the types of actions that can be associated with a PDF annotation. public enum PdfAnnotationActionType Fields Calculate = 15 Format = 13 KeyStroke = 12 Validate = 14 Remarks These action types represent specific behaviors or events that can be triggered by user interaction with a PDF annotation, such as entering text or performing calculations. Each action type corresponds to a predefined functionality in the PDF specification."
  },
  "api/nebulae.dotPDFium.Native.PdfAnnotationAppearanceMode.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfAnnotationAppearanceMode.html",
    "title": "Enum PdfAnnotationAppearanceMode | dotPDFium",
    "summary": "Enum PdfAnnotationAppearanceMode Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public enum PdfAnnotationAppearanceMode Fields Down = 2 Normal = 0 Rollover = 1"
  },
  "api/nebulae.dotPDFium.Native.PdfAnnotationBorder.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfAnnotationBorder.html",
    "title": "Struct PdfAnnotationBorder | dotPDFium",
    "summary": "Struct PdfAnnotationBorder Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public readonly struct PdfAnnotationBorder Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors PdfAnnotationBorder(float, float, float) public PdfAnnotationBorder(float hr, float vr, float width) Parameters hr float vr float width float Properties BorderWidth public float BorderWidth { get; } Property Value float HorizontalRadius public float HorizontalRadius { get; } Property Value float VerticalRadius public float VerticalRadius { get; } Property Value float"
  },
  "api/nebulae.dotPDFium.Native.PdfAnnotationColorType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfAnnotationColorType.html",
    "title": "Enum PdfAnnotationColorType | dotPDFium",
    "summary": "Enum PdfAnnotationColorType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the type of color associated with a PDF annotation. public enum PdfAnnotationColorType Fields Color = 0 InteriorColor = 1 Remarks This enumeration is used to distinguish between the primary color of the annotation and its interior color, if applicable. The values correspond to specific color roles within a PDF annotation's appearance."
  },
  "api/nebulae.dotPDFium.Native.PdfAnnotationFlags.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfAnnotationFlags.html",
    "title": "Enum PdfAnnotationFlags | dotPDFium",
    "summary": "Enum PdfAnnotationFlags Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the flags that control the behavior and visibility of a PDF annotation. [Flags] public enum PdfAnnotationFlags Fields Hidden = 2 Invisible = 1 Locked = 128 NoRotate = 16 NoView = 32 NoZoom = 8 None = 0 Print = 4 ReadOnly = 64 ToggleNoView = 256 Remarks These flags can be combined using a bitwise OR operation to define multiple behaviors for a single annotation. For example, an annotation can be both Invisible and NoView."
  },
  "api/nebulae.dotPDFium.Native.PdfAnnotationSubtype.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfAnnotationSubtype.html",
    "title": "Enum PdfAnnotationSubtype | dotPDFium",
    "summary": "Enum PdfAnnotationSubtype Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Represents the subtype of a PDF annotation as defined in the PDF specification. public enum PdfAnnotationSubtype Fields Caret = 14 Circle = 6 FileAttachment = 17 FreeText = 3 Highlight = 9 Ink = 15 Line = 4 Link = 2 Movie = 19 Polygon = 7 Polyline = 8 Popup = 16 PrinterMark = 22 Redact = 28 RichMedia = 26 Screen = 21 Sound = 18 Square = 5 Squiggly = 11 Stamp = 13 Strikeout = 12 Text = 1 ThreeD = 25 TrapNet = 23 Underline = 10 Unknown = 0 Watermark = 24 Widget = 20 XfaWidget = 27 Remarks This enumeration provides a comprehensive list of annotation subtypes that can be used in a PDF document. Each subtype corresponds to a specific type of annotation, such as text notes, links, highlights, or multimedia elements."
  },
  "api/nebulae.dotPDFium.Native.PdfAttachmentNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfAttachmentNative.html",
    "title": "Class PdfAttachmentNative | dotPDFium",
    "summary": "Class PdfAttachmentNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfAttachmentNative Inheritance object PdfAttachmentNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDFAttachment_GetFile(nint, nint, uint, out uint) public static extern bool FPDFAttachment_GetFile(nint attachment, nint buffer, uint buflen, out uint outBufLen) Parameters attachment nint buffer nint buflen uint outBufLen uint Returns bool FPDFAttachment_GetName(nint, char[], uint) public static extern uint FPDFAttachment_GetName(nint attachment, char[] buffer, uint buflen) Parameters attachment nint buffer char[] buflen uint Returns uint FPDFAttachment_GetStringValue(nint, string, char[], uint) public static extern uint FPDFAttachment_GetStringValue(nint attachment, string key, char[] buffer, uint buflen) Parameters attachment nint key string buffer char[] buflen uint Returns uint FPDFAttachment_GetSubtype(nint, char[], uint) public static extern uint FPDFAttachment_GetSubtype(nint attachment, char[] buffer, uint buflen) Parameters attachment nint buffer char[] buflen uint Returns uint FPDFAttachment_GetValueType(nint, string) public static extern int FPDFAttachment_GetValueType(nint attachment, string key) Parameters attachment nint key string Returns int FPDFAttachment_HasKey(nint, string) public static extern bool FPDFAttachment_HasKey(nint attachment, string key) Parameters attachment nint key string Returns bool FPDFAttachment_SetFile(nint, nint, nint, uint) public static extern bool FPDFAttachment_SetFile(nint attachment, nint document, nint contents, uint length) Parameters attachment nint document nint contents nint length uint Returns bool FPDFAttachment_SetStringValue(nint, string, string) public static extern bool FPDFAttachment_SetStringValue(nint attachment, string key, string value) Parameters attachment nint key string value string Returns bool FPDFDoc_AddAttachment(nint, string) public static extern nint FPDFDoc_AddAttachment(nint document, string name) Parameters document nint name string Returns nint FPDFDoc_DeleteAttachment(nint, int) public static extern bool FPDFDoc_DeleteAttachment(nint document, int index) Parameters document nint index int Returns bool FPDFDoc_GetAttachment(nint, int) public static extern nint FPDFDoc_GetAttachment(nint document, int index) Parameters document nint index int Returns nint FPDFDoc_GetAttachmentCount(nint) public static extern int FPDFDoc_GetAttachmentCount(nint document) Parameters document nint Returns int"
  },
  "api/nebulae.dotPDFium.Native.PdfBitmapFormat.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfBitmapFormat.html",
    "title": "Enum PdfBitmapFormat | dotPDFium",
    "summary": "Enum PdfBitmapFormat Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the bitmap formats supported for rendering in a PDF context. public enum PdfBitmapFormat Extension Methods PdfBitmapFormatExtension.GetBytesPerPixel(PdfBitmapFormat) Fields BGR = 2 BGRA = 4 BGRAPremul = 5 BGRx = 3 Gray = 1 Unknown = 0 Remarks This enumeration defines various pixel formats that can be used when working with bitmap images in a PDF. Each format represents a specific arrangement of color channels and, in some cases, transparency information."
  },
  "api/nebulae.dotPDFium.Native.PdfCatalogNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfCatalogNative.html",
    "title": "Class PdfCatalogNative | dotPDFium",
    "summary": "Class PdfCatalogNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfCatalogNative Inheritance object PdfCatalogNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDFCatalog_IsTagged(nint) public static extern bool FPDFCatalog_IsTagged(nint document) Parameters document nint Returns bool FPDFCatalog_SetLanguage(nint, string) public static extern bool FPDFCatalog_SetLanguage(nint document, string language) Parameters document nint language string Returns bool"
  },
  "api/nebulae.dotPDFium.Native.PdfColorScheme.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfColorScheme.html",
    "title": "Struct PdfColorScheme | dotPDFium",
    "summary": "Struct PdfColorScheme Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct PdfColorScheme Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields path_fill_color public uint path_fill_color Field Value uint path_stroke_color public uint path_stroke_color Field Value uint text_fill_color public uint text_fill_color Field Value uint text_stroke_color public uint text_stroke_color Field Value uint"
  },
  "api/nebulae.dotPDFium.Native.PdfColorspace.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfColorspace.html",
    "title": "Enum PdfColorspace | dotPDFium",
    "summary": "Enum PdfColorspace Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Represents the color space used in a PDF document. public enum PdfColorspace Fields CalGray = 4 CalRGB = 5 DeviceCMYK = 3 DeviceGray = 1 DeviceN = 9 DeviceRGB = 2 ICCBased = 7 Indexed = 10 Lab = 6 Pattern = 11 Separation = 8 Unknown = 0 Remarks A color space defines how colors are represented and interpreted in a PDF. This enumeration includes standard color spaces such as DeviceRGB and DeviceCMYK, as well as specialized color spaces like ICCBased and Separation."
  },
  "api/nebulae.dotPDFium.Native.PdfDataAvailNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfDataAvailNative.html",
    "title": "Class PdfDataAvailNative | dotPDFium",
    "summary": "Class PdfDataAvailNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfDataAvailNative Inheritance object PdfDataAvailNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDFAvail_Create(ref FxFileAvail, ref PdfFileAccess) public static extern nint FPDFAvail_Create(ref FxFileAvail fileAvail, ref PdfFileAccess fileAccess) Parameters fileAvail FxFileAvail fileAccess PdfFileAccess Returns nint FPDFAvail_Destroy(nint) public static extern void FPDFAvail_Destroy(nint avail) Parameters avail nint FPDFAvail_GetDocument(nint, string) public static extern nint FPDFAvail_GetDocument(nint avail, string password) Parameters avail nint password string Returns nint FPDFAvail_GetFirstPageNum(nint) public static extern int FPDFAvail_GetFirstPageNum(nint document) Parameters document nint Returns int FPDFAvail_IsDocAvail(nint, ref FxDownloadHints) public static extern int FPDFAvail_IsDocAvail(nint avail, ref FxDownloadHints hints) Parameters avail nint hints FxDownloadHints Returns int FPDFAvail_IsFormAvail(nint, ref FxDownloadHints) public static extern int FPDFAvail_IsFormAvail(nint avail, ref FxDownloadHints hints) Parameters avail nint hints FxDownloadHints Returns int FPDFAvail_IsLinearized(nint) public static extern int FPDFAvail_IsLinearized(nint avail) Parameters avail nint Returns int FPDFAvail_IsPageAvail(nint, int, ref FxDownloadHints) public static extern int FPDFAvail_IsPageAvail(nint avail, int pageIndex, ref FxDownloadHints hints) Parameters avail nint pageIndex int hints FxDownloadHints Returns int"
  },
  "api/nebulae.dotPDFium.Native.PdfDestViewMode.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfDestViewMode.html",
    "title": "Enum PdfDestViewMode | dotPDFium",
    "summary": "Enum PdfDestViewMode Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the view mode for a destination in a PDF document. public enum PdfDestViewMode Fields Fit = 2 FitB = 6 FitBH = 7 FitBV = 8 FitH = 3 FitR = 5 FitV = 4 Unknown = 0 XYZ = 1 Remarks This enumeration defines the various ways a PDF viewer can display a specific destination within a document. Each value corresponds to a predefined view mode, such as zooming to a specific location, fitting the page to the viewer’s width or height, or displaying a specific rectangle."
  },
  "api/nebulae.dotPDFium.Native.PdfDocActionType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfDocActionType.html",
    "title": "Enum PdfDocActionType | dotPDFium",
    "summary": "Enum PdfDocActionType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the types of actions that can be triggered in a PDF document lifecycle. public enum PdfDocActionType Fields AfterPrint = 20 AfterSave = 18 BeforeClose = 16 BeforePrint = 19 BeforeSave = 17 Remarks These actions represent specific events that occur during the lifecycle of a PDF document, such as before closing, before saving, or after printing. They can be used to define custom behaviors or workflows associated with these events."
  },
  "api/nebulae.dotPDFium.Native.PdfDocMDPPermission_1.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfDocMDPPermission_1.html",
    "title": "Enum PdfDocMDPPermission | dotPDFium",
    "summary": "Enum PdfDocMDPPermission Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the permission levels for modifying a PDF document with DocMDP (Document Modification Detection and Prevention) settings. public enum PdfDocMDPPermission Fields FillAndPageInsert = 2 FillSignAndAnnotate = 3 NoChangesAllowed = 1 None = 0 Remarks These permissions are used to define the allowed operations on a PDF document when DocMDP is applied. The permissions range from no changes allowed to allowing specific modifications such as filling forms or adding annotations."
  },
  "api/nebulae.dotPDFium.Native.PdfDocMdpPermission.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfDocMdpPermission.html",
    "title": "Enum PdfDocMdpPermission | dotPDFium",
    "summary": "Enum PdfDocMdpPermission Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the modification permissions for a PDF document when using Document Modification Detection and Prevention (MDP). public enum PdfDocMdpPermission Fields AnnotateFormFillAndSign = 3 FormFillAndSign = 2 NoChanges = 1 Remarks These permissions define the level of changes allowed in a PDF document while maintaining its integrity under MDP. The permissions range from disallowing all changes to allowing specific types of modifications, such as form filling or signing."
  },
  "api/nebulae.dotPDFium.Native.PdfDocNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfDocNative.html",
    "title": "Class PdfDocNative | dotPDFium",
    "summary": "Class PdfDocNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfDocNative Inheritance object PdfDocNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDFAction_GetDest(nint, nint) public static extern nint FPDFAction_GetDest(nint doc, nint action) Parameters doc nint action nint Returns nint FPDFAction_GetFilePath(nint, byte[], uint) public static extern uint FPDFAction_GetFilePath(nint action, byte[] buffer, uint buflen) Parameters action nint buffer byte[] buflen uint Returns uint FPDFAction_GetType(nint) public static extern uint FPDFAction_GetType(nint action) Parameters action nint Returns uint FPDFAction_GetURIPath(nint, nint, byte[], uint) public static extern uint FPDFAction_GetURIPath(nint doc, nint action, byte[] buffer, uint buflen) Parameters doc nint action nint buffer byte[] buflen uint Returns uint FPDFBookmark_Find(nint, string) public static extern nint FPDFBookmark_Find(nint doc, string title) Parameters doc nint title string Returns nint FPDFBookmark_GetAction(nint) public static extern nint FPDFBookmark_GetAction(nint bookmark) Parameters bookmark nint Returns nint FPDFBookmark_GetCount(nint) public static extern int FPDFBookmark_GetCount(nint bookmark) Parameters bookmark nint Returns int FPDFBookmark_GetDest(nint, nint) public static extern nint FPDFBookmark_GetDest(nint doc, nint bookmark) Parameters doc nint bookmark nint Returns nint FPDFBookmark_GetFirstChild(nint, nint) public static extern nint FPDFBookmark_GetFirstChild(nint doc, nint bookmark) Parameters doc nint bookmark nint Returns nint FPDFBookmark_GetNextSibling(nint, nint) public static extern nint FPDFBookmark_GetNextSibling(nint doc, nint bookmark) Parameters doc nint bookmark nint Returns nint FPDFBookmark_GetTitle(nint, char[], uint) public static extern uint FPDFBookmark_GetTitle(nint bookmark, char[] buffer, uint buflen) Parameters bookmark nint buffer char[] buflen uint Returns uint FPDFDest_GetDestPageIndex(nint, nint) public static extern int FPDFDest_GetDestPageIndex(nint doc, nint dest) Parameters doc nint dest nint Returns int FPDFDest_GetLocationInPage(nint, out bool, out bool, out bool, out float, out float, out float) public static extern bool FPDFDest_GetLocationInPage(nint dest, out bool hasX, out bool hasY, out bool hasZoom, out float x, out float y, out float zoom) Parameters dest nint hasX bool hasY bool hasZoom bool x float y float zoom float Returns bool FPDFDest_GetView(nint, out uint, float[]) public static extern uint FPDFDest_GetView(nint dest, out uint numParams, float[] parameters) Parameters dest nint numParams uint parameters float[] Returns uint FPDFLink_CountQuadPoints(nint) public static extern int FPDFLink_CountQuadPoints(nint link) Parameters link nint Returns int FPDFLink_Enumerate(nint, ref int, out nint) public static extern bool FPDFLink_Enumerate(nint page, ref int startPos, out nint linkAnnot) Parameters page nint startPos int linkAnnot nint Returns bool FPDFLink_GetAction(nint) public static extern nint FPDFLink_GetAction(nint link) Parameters link nint Returns nint FPDFLink_GetAnnot(nint, nint) public static extern nint FPDFLink_GetAnnot(nint page, nint link) Parameters page nint link nint Returns nint FPDFLink_GetAnnotRect(nint, out FsRectF) public static extern bool FPDFLink_GetAnnotRect(nint link, out FsRectF rect) Parameters link nint rect FsRectF Returns bool FPDFLink_GetDest(nint, nint) public static extern nint FPDFLink_GetDest(nint doc, nint link) Parameters doc nint link nint Returns nint FPDFLink_GetLinkAtPoint(nint, double, double) public static extern nint FPDFLink_GetLinkAtPoint(nint page, double x, double y) Parameters page nint x double y double Returns nint FPDFLink_GetLinkZOrderAtPoint(nint, double, double) public static extern int FPDFLink_GetLinkZOrderAtPoint(nint page, double x, double y) Parameters page nint x double y double Returns int FPDFLink_GetQuadPoints(nint, int, out FsQuadPointsF) public static extern bool FPDFLink_GetQuadPoints(nint link, int index, out FsQuadPointsF quad) Parameters link nint index int quad FsQuadPointsF Returns bool FPDF_GetFileIdentifier(nint, uint, byte[], uint) public static extern uint FPDF_GetFileIdentifier(nint doc, uint idType, byte[] buffer, uint buflen) Parameters doc nint idType uint buffer byte[] buflen uint Returns uint FPDF_GetMetaText(nint, string, char[], uint) public static extern uint FPDF_GetMetaText(nint doc, string tag, char[] buffer, uint buflen) Parameters doc nint tag string buffer char[] buflen uint Returns uint FPDF_GetPageAAction(nint, int) public static extern nint FPDF_GetPageAAction(nint page, int aaType) Parameters page nint aaType int Returns nint FPDF_GetPageLabel(nint, int, char[], uint) public static extern uint FPDF_GetPageLabel(nint doc, int pageIndex, char[] buffer, uint buflen) Parameters doc nint pageIndex int buffer char[] buflen uint Returns uint"
  },
  "api/nebulae.dotPDFium.Native.PdfDocumentAActionType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfDocumentAActionType.html",
    "title": "Enum PdfDocumentAActionType | dotPDFium",
    "summary": "Enum PdfDocumentAActionType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the types of additional actions (AAction) that can be triggered in a PDF document. public enum PdfDocumentAActionType Fields DidPrint = 4 DidSave = 3 WillClose = 0 WillPrint = 2 WillSave = 1 Remarks These actions represent specific events in the lifecycle of a PDF document, such as closing, saving, or printing. They can be used to define custom behaviors or scripts that execute when the corresponding event occurs."
  },
  "api/nebulae.dotPDFium.Native.PdfDuplexType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfDuplexType.html",
    "title": "Enum PdfDuplexType | dotPDFium",
    "summary": "Enum PdfDuplexType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the duplex printing options for a PDF document. public enum PdfDuplexType Fields FlipLongEdge = 3 FlipShortEdge = 2 Simplex = 1 Undefined = 0 Remarks This enumeration defines the possible duplex (double-sided) printing modes for a PDF document. Use these values to indicate whether and how the pages should be printed on both sides of the paper."
  },
  "api/nebulae.dotPDFium.Native.PdfEditNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfEditNative.html",
    "title": "Class PdfEditNative | dotPDFium",
    "summary": "Class PdfEditNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfEditNative Inheritance object PdfEditNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDFFont_Close(nint) public static extern void FPDFFont_Close(nint font) Parameters font nint FPDFFont_GetAscent(nint, float, out float) public static extern bool FPDFFont_GetAscent(nint font, float fontSize, out float ascent) Parameters font nint fontSize float ascent float Returns bool FPDFFont_GetBaseFontName(nint, byte[], nuint) public static extern nuint FPDFFont_GetBaseFontName(nint font, byte[] buffer, nuint length) Parameters font nint buffer byte[] length nuint Returns nuint FPDFFont_GetDescent(nint, float, out float) public static extern bool FPDFFont_GetDescent(nint font, float fontSize, out float descent) Parameters font nint fontSize float descent float Returns bool FPDFFont_GetFamilyName(nint, byte[], nuint) public static extern nuint FPDFFont_GetFamilyName(nint font, byte[] buffer, nuint length) Parameters font nint buffer byte[] length nuint Returns nuint FPDFFont_GetFlags(nint) public static extern int FPDFFont_GetFlags(nint font) Parameters font nint Returns int FPDFFont_GetFontData(nint, byte[], nuint, out nuint) public static extern bool FPDFFont_GetFontData(nint font, byte[] buffer, nuint buflen, out nuint outBufLen) Parameters font nint buffer byte[] buflen nuint outBufLen nuint Returns bool FPDFFont_GetGlyphPath(nint, uint, float) public static extern nint FPDFFont_GetGlyphPath(nint font, uint glyph, float fontSize) Parameters font nint glyph uint fontSize float Returns nint FPDFFont_GetGlyphWidth(nint, uint, float, out float) public static extern bool FPDFFont_GetGlyphWidth(nint font, uint glyph, float fontSize, out float width) Parameters font nint glyph uint fontSize float width float Returns bool FPDFFont_GetIsEmbedded(nint) public static extern int FPDFFont_GetIsEmbedded(nint font) Parameters font nint Returns int FPDFFont_GetItalicAngle(nint, out int) public static extern bool FPDFFont_GetItalicAngle(nint font, out int angle) Parameters font nint angle int Returns bool FPDFFont_GetWeight(nint) public static extern int FPDFFont_GetWeight(nint font) Parameters font nint Returns int FPDFFormObj_CountObjects(nint) public static extern int FPDFFormObj_CountObjects(nint formObject) Parameters formObject nint Returns int FPDFFormObj_GetObject(nint, uint) public static extern nint FPDFFormObj_GetObject(nint formObject, uint index) Parameters formObject nint index uint Returns nint FPDFGlyphPath_CountGlyphSegments(nint) public static extern int FPDFGlyphPath_CountGlyphSegments(nint glyphPath) Parameters glyphPath nint Returns int FPDFGlyphPath_GetGlyphPathSegment(nint, int) public static extern nint FPDFGlyphPath_GetGlyphPathSegment(nint glyphPath, int index) Parameters glyphPath nint index int Returns nint FPDFImageObj_GetBitmap(nint) public static extern nint FPDFImageObj_GetBitmap(nint imageObject) Parameters imageObject nint Returns nint FPDFImageObj_GetIccProfileDataDecoded(nint, nint, byte[], nuint, out nuint) public static extern bool FPDFImageObj_GetIccProfileDataDecoded(nint obj, nint page, byte[] buffer, nuint buflen, out nuint outBuflen) Parameters obj nint page nint buffer byte[] buflen nuint outBuflen nuint Returns bool FPDFImageObj_GetImageDataDecoded(nint, byte[], uint) public static extern uint FPDFImageObj_GetImageDataDecoded(nint obj, byte[] buffer, uint buflen) Parameters obj nint buffer byte[] buflen uint Returns uint FPDFImageObj_GetImageDataRaw(nint, byte[], uint) public static extern uint FPDFImageObj_GetImageDataRaw(nint obj, byte[] buffer, uint buflen) Parameters obj nint buffer byte[] buflen uint Returns uint FPDFImageObj_GetImageFilter(nint, int, byte[], uint) public static extern uint FPDFImageObj_GetImageFilter(nint obj, int index, byte[] buffer, uint buflen) Parameters obj nint index int buffer byte[] buflen uint Returns uint FPDFImageObj_GetImageFilterCount(nint) public static extern int FPDFImageObj_GetImageFilterCount(nint obj) Parameters obj nint Returns int FPDFImageObj_GetImageMetadata(nint, nint, out PdfImageObjMetadata) public static extern bool FPDFImageObj_GetImageMetadata(nint obj, nint page, out PdfImageObjMetadata metadata) Parameters obj nint page nint metadata PdfImageObjMetadata Returns bool FPDFImageObj_GetImagePixelSize(nint, out uint, out uint) public static extern bool FPDFImageObj_GetImagePixelSize(nint obj, out uint width, out uint height) Parameters obj nint width uint height uint Returns bool FPDFImageObj_GetRenderedBitmap(nint, nint, nint) public static extern nint FPDFImageObj_GetRenderedBitmap(nint document, nint page, nint imageObject) Parameters document nint page nint imageObject nint Returns nint FPDFImageObj_LoadJpegFile(nint[], int, nint, ref PdfFileAccess) public static extern bool FPDFImageObj_LoadJpegFile(nint[] pages, int count, nint imageObject, ref PdfFileAccess fileAccess) Parameters pages nint[] count int imageObject nint fileAccess PdfFileAccess Returns bool FPDFImageObj_LoadJpegFileInline(nint[], int, nint, ref PdfFileAccess) public static extern bool FPDFImageObj_LoadJpegFileInline(nint[] pages, int count, nint imageObject, ref PdfFileAccess fileAccess) Parameters pages nint[] count int imageObject nint fileAccess PdfFileAccess Returns bool FPDFImageObj_SetBitmap(nint[], int, nint, nint) public static extern bool FPDFImageObj_SetBitmap(nint[] pages, int count, nint imageObject, nint bitmap) Parameters pages nint[] count int imageObject nint bitmap nint Returns bool FPDFImageObj_SetMatrix(nint, double, double, double, double, double, double) public static extern bool FPDFImageObj_SetMatrix(nint imageObject, double a, double b, double c, double d, double e, double f) Parameters imageObject nint a double b double c double d double e double f double Returns bool FPDFPageObjMark_CountParams(nint) public static extern int FPDFPageObjMark_CountParams(nint mark) Parameters mark nint Returns int FPDFPageObjMark_GetName(nint, nint, uint, out uint) public static extern bool FPDFPageObjMark_GetName(nint mark, nint buffer, uint buflen, out uint outBufLen) Parameters mark nint buffer nint buflen uint outBufLen uint Returns bool FPDFPageObjMark_GetParamBlobValue(nint, string, byte[], uint, out uint) public static extern bool FPDFPageObjMark_GetParamBlobValue(nint mark, string key, byte[] buffer, uint buflen, out uint outBufLen) Parameters mark nint key string buffer byte[] buflen uint outBufLen uint Returns bool FPDFPageObjMark_GetParamIntValue(nint, string, out int) public static extern bool FPDFPageObjMark_GetParamIntValue(nint mark, string key, out int value) Parameters mark nint key string value int Returns bool FPDFPageObjMark_GetParamKey(nint, uint, nint, uint, out uint) public static extern bool FPDFPageObjMark_GetParamKey(nint mark, uint index, nint buffer, uint buflen, out uint outBufLen) Parameters mark nint index uint buffer nint buflen uint outBufLen uint Returns bool FPDFPageObjMark_GetParamStringValue(nint, string, nint, uint, out uint) public static extern bool FPDFPageObjMark_GetParamStringValue(nint mark, string key, nint buffer, uint buflen, out uint outBufLen) Parameters mark nint key string buffer nint buflen uint outBufLen uint Returns bool FPDFPageObjMark_GetParamValueType(nint, string) public static extern int FPDFPageObjMark_GetParamValueType(nint mark, string key) Parameters mark nint key string Returns int FPDFPageObjMark_RemoveParam(nint, nint, string) public static extern bool FPDFPageObjMark_RemoveParam(nint obj, nint mark, string key) Parameters obj nint mark nint key string Returns bool FPDFPageObjMark_SetBlobParam(nint, nint, nint, string, byte[], uint) public static extern bool FPDFPageObjMark_SetBlobParam(nint doc, nint obj, nint mark, string key, byte[] value, uint length) Parameters doc nint obj nint mark nint key string value byte[] length uint Returns bool FPDFPageObjMark_SetIntParam(nint, nint, nint, string, int) public static extern bool FPDFPageObjMark_SetIntParam(nint doc, nint obj, nint mark, string key, int value) Parameters doc nint obj nint mark nint key string value int Returns bool FPDFPageObjMark_SetStringParam(nint, nint, nint, string, string) public static extern bool FPDFPageObjMark_SetStringParam(nint doc, nint obj, nint mark, string key, string value) Parameters doc nint obj nint mark nint key string value string Returns bool FPDFPageObj_AddMark(nint, string) public static extern nint FPDFPageObj_AddMark(nint obj, string tag) Parameters obj nint tag string Returns nint FPDFPageObj_CountMarks(nint) public static extern int FPDFPageObj_CountMarks(nint obj) Parameters obj nint Returns int FPDFPageObj_CreateNewPath(float, float) public static extern nint FPDFPageObj_CreateNewPath(float x, float y) Parameters x float y float Returns nint FPDFPageObj_CreateNewRect(float, float, float, float) public static extern nint FPDFPageObj_CreateNewRect(float x, float y, float w, float h) Parameters x float y float w float h float Returns nint FPDFPageObj_CreateTextObj(nint, nint, float) public static extern nint FPDFPageObj_CreateTextObj(nint doc, nint font, float fontSize) Parameters doc nint font nint fontSize float Returns nint FPDFPageObj_Destroy(nint) public static extern void FPDFPageObj_Destroy(nint pageObject) Parameters pageObject nint FPDFPageObj_GetBounds(nint, out float, out float, out float, out float) public static extern bool FPDFPageObj_GetBounds(nint obj, out float left, out float bottom, out float right, out float top) Parameters obj nint left float bottom float right float top float Returns bool FPDFPageObj_GetDashArray(nint, float[], nuint) public static extern bool FPDFPageObj_GetDashArray(nint obj, float[] dashArray, nuint count) Parameters obj nint dashArray float[] count nuint Returns bool FPDFPageObj_GetDashCount(nint) public static extern int FPDFPageObj_GetDashCount(nint obj) Parameters obj nint Returns int FPDFPageObj_GetDashPhase(nint, out float) public static extern bool FPDFPageObj_GetDashPhase(nint obj, out float phase) Parameters obj nint phase float Returns bool FPDFPageObj_GetFillColor(nint, out uint, out uint, out uint, out uint) public static extern bool FPDFPageObj_GetFillColor(nint obj, out uint r, out uint g, out uint b, out uint a) Parameters obj nint r uint g uint b uint a uint Returns bool FPDFPageObj_GetIsActive(nint, out bool) public static extern bool FPDFPageObj_GetIsActive(nint obj, out bool isActive) Parameters obj nint isActive bool Returns bool FPDFPageObj_GetLineCap(nint) public static extern int FPDFPageObj_GetLineCap(nint obj) Parameters obj nint Returns int FPDFPageObj_GetLineJoin(nint) public static extern int FPDFPageObj_GetLineJoin(nint obj) Parameters obj nint Returns int FPDFPageObj_GetMark(nint, uint) public static extern nint FPDFPageObj_GetMark(nint obj, uint index) Parameters obj nint index uint Returns nint FPDFPageObj_GetMarkedContentID(nint) public static extern int FPDFPageObj_GetMarkedContentID(nint pageObject) Parameters pageObject nint Returns int FPDFPageObj_GetMatrix(nint, out FsMatrixF) public static extern bool FPDFPageObj_GetMatrix(nint obj, out FsMatrixF matrix) Parameters obj nint matrix FsMatrixF Returns bool FPDFPageObj_GetRotatedBounds(nint, out FsQuadPointsF) public static extern bool FPDFPageObj_GetRotatedBounds(nint obj, out FsQuadPointsF quad) Parameters obj nint quad FsQuadPointsF Returns bool FPDFPageObj_GetStrokeColor(nint, out uint, out uint, out uint, out uint) public static extern bool FPDFPageObj_GetStrokeColor(nint obj, out uint r, out uint g, out uint b, out uint a) Parameters obj nint r uint g uint b uint a uint Returns bool FPDFPageObj_GetStrokeWidth(nint, out float) public static extern bool FPDFPageObj_GetStrokeWidth(nint obj, out float width) Parameters obj nint width float Returns bool FPDFPageObj_GetType(nint) public static extern int FPDFPageObj_GetType(nint obj) Parameters obj nint Returns int FPDFPageObj_HasTransparency(nint) public static extern bool FPDFPageObj_HasTransparency(nint obj) Parameters obj nint Returns bool FPDFPageObj_NewImageObj(nint) public static extern nint FPDFPageObj_NewImageObj(nint document) Parameters document nint Returns nint FPDFPageObj_NewTextObj(nint, string, float) public static extern nint FPDFPageObj_NewTextObj(nint doc, string font, float fontSize) Parameters doc nint font string fontSize float Returns nint FPDFPageObj_RemoveMark(nint, nint) public static extern bool FPDFPageObj_RemoveMark(nint obj, nint mark) Parameters obj nint mark nint Returns bool FPDFPageObj_SetBlendMode(nint, string) public static extern void FPDFPageObj_SetBlendMode(nint pageObject, string blendMode) Parameters pageObject nint blendMode string FPDFPageObj_SetDashArray(nint, float[], nuint, float) public static extern bool FPDFPageObj_SetDashArray(nint obj, float[] dashArray, nuint count, float phase) Parameters obj nint dashArray float[] count nuint phase float Returns bool FPDFPageObj_SetDashPhase(nint, float) public static extern bool FPDFPageObj_SetDashPhase(nint obj, float phase) Parameters obj nint phase float Returns bool FPDFPageObj_SetFillColor(nint, uint, uint, uint, uint) public static extern void FPDFPageObj_SetFillColor(nint obj, uint r, uint g, uint b, uint a) Parameters obj nint r uint g uint b uint a uint FPDFPageObj_SetIsActive(nint, bool) public static extern bool FPDFPageObj_SetIsActive(nint obj, bool isActive) Parameters obj nint isActive bool Returns bool FPDFPageObj_SetLineCap(nint, int) public static extern bool FPDFPageObj_SetLineCap(nint obj, int lineCap) Parameters obj nint lineCap int Returns bool FPDFPageObj_SetLineJoin(nint, int) public static extern bool FPDFPageObj_SetLineJoin(nint obj, int lineJoin) Parameters obj nint lineJoin int Returns bool FPDFPageObj_SetMatrix(nint, ref FsMatrixF) public static extern bool FPDFPageObj_SetMatrix(nint obj, ref FsMatrixF matrix) Parameters obj nint matrix FsMatrixF Returns bool FPDFPageObj_SetStrokeColor(nint, uint, uint, uint, uint) public static extern void FPDFPageObj_SetStrokeColor(nint obj, uint r, uint g, uint b, uint a) Parameters obj nint r uint g uint b uint a uint FPDFPageObj_SetStrokeWidth(nint, float) public static extern bool FPDFPageObj_SetStrokeWidth(nint obj, float width) Parameters obj nint width float Returns bool FPDFPageObj_Transform(nint, double, double, double, double, double, double) public static extern void FPDFPageObj_Transform(nint obj, double a, double b, double c, double d, double e, double f) Parameters obj nint a double b double c double d double e double f double FPDFPageObj_TransformF(nint, ref FsMatrixF) public static extern bool FPDFPageObj_TransformF(nint obj, ref FsMatrixF matrix) Parameters obj nint matrix FsMatrixF Returns bool FPDFPage_CountObjects(nint) public static extern int FPDFPage_CountObjects(nint page) Parameters page nint Returns int FPDFPage_Delete(nint, int) public static extern void FPDFPage_Delete(nint doc, int page_index) Parameters doc nint page_index int FPDFPage_GenerateContent(nint) public static extern bool FPDFPage_GenerateContent(nint page) Parameters page nint Returns bool FPDFPage_GetObject(nint, int) public static extern nint FPDFPage_GetObject(nint page, int index) Parameters page nint index int Returns nint FPDFPage_GetRotation(nint) public static extern int FPDFPage_GetRotation(nint page) Parameters page nint Returns int FPDFPage_HasTransparency(nint) public static extern bool FPDFPage_HasTransparency(nint page) Parameters page nint Returns bool FPDFPage_InsertObject(nint, nint) public static extern void FPDFPage_InsertObject(nint page, nint pageObject) Parameters page nint pageObject nint FPDFPage_New(nint, int, double, double) public static extern nint FPDFPage_New(nint doc, int page_index, double width, double height) Parameters doc nint page_index int width double height double Returns nint FPDFPage_RemoveObject(nint, nint) public static extern bool FPDFPage_RemoveObject(nint page, nint pageObject) Parameters page nint pageObject nint Returns bool FPDFPage_SetRotation(nint, int) public static extern void FPDFPage_SetRotation(nint page, int rotate) Parameters page nint rotate int FPDFPage_TransformAnnots(nint, double, double, double, double, double, double) public static extern void FPDFPage_TransformAnnots(nint page, double a, double b, double c, double d, double e, double f) Parameters page nint a double b double c double d double e double f double FPDFPathSegment_GetClose(nint) public static extern bool FPDFPathSegment_GetClose(nint segment) Parameters segment nint Returns bool FPDFPathSegment_GetPoint(nint, out double, out double) public static extern bool FPDFPathSegment_GetPoint(nint segment, out double x, out double y) Parameters segment nint x double y double Returns bool FPDFPathSegment_GetType(nint) public static extern int FPDFPathSegment_GetType(nint segment) Parameters segment nint Returns int FPDFPath_BezierTo(nint, float, float, float, float, float, float) public static extern bool FPDFPath_BezierTo(nint path, float x1, float y1, float x2, float y2, float x3, float y3) Parameters path nint x1 float y1 float x2 float y2 float x3 float y3 float Returns bool FPDFPath_Close(nint) public static extern bool FPDFPath_Close(nint path) Parameters path nint Returns bool FPDFPath_CountSegments(nint) public static extern int FPDFPath_CountSegments(nint pathObject) Parameters pathObject nint Returns int FPDFPath_GetDrawMode(nint, out int, out bool) public static extern bool FPDFPath_GetDrawMode(nint path, out int fillMode, out bool stroke) Parameters path nint fillMode int stroke bool Returns bool FPDFPath_GetPathSegment(nint, int) public static extern nint FPDFPath_GetPathSegment(nint pathObject, int index) Parameters pathObject nint index int Returns nint FPDFPath_LineTo(nint, float, float) public static extern bool FPDFPath_LineTo(nint path, float x, float y) Parameters path nint x float y float Returns bool FPDFPath_MoveTo(nint, float, float) public static extern bool FPDFPath_MoveTo(nint path, float x, float y) Parameters path nint x float y float Returns bool FPDFPath_SetDrawMode(nint, int, bool) public static extern bool FPDFPath_SetDrawMode(nint path, int fillMode, bool stroke) Parameters path nint fillMode int stroke bool Returns bool FPDFTextObj_GetFont(nint) public static extern nint FPDFTextObj_GetFont(nint textObject) Parameters textObject nint Returns nint FPDFTextObj_GetFontSize(nint, out float) public static extern bool FPDFTextObj_GetFontSize(nint textObj, out float fontSize) Parameters textObj nint fontSize float Returns bool FPDFTextObj_GetRenderedBitmap(nint, nint, nint, float) public static extern nint FPDFTextObj_GetRenderedBitmap(nint doc, nint page, nint textObject, float scale) Parameters doc nint page nint textObject nint scale float Returns nint FPDFTextObj_GetText(nint, nint, char[], uint) public static extern uint FPDFTextObj_GetText(nint textObject, nint textPage, char[] buffer, uint length) Parameters textObject nint textPage nint buffer char[] length uint Returns uint FPDFTextObj_GetTextRenderMode(nint) public static extern int FPDFTextObj_GetTextRenderMode(nint textObj) Parameters textObj nint Returns int FPDFTextObj_SetTextRenderMode(nint, int) public static extern bool FPDFTextObj_SetTextRenderMode(nint textObj, int renderMode) Parameters textObj nint renderMode int Returns bool FPDFText_LoadCidType2Font(nint, byte[], uint, string, byte[], uint) public static extern nint FPDFText_LoadCidType2Font(nint doc, byte[] fontData, uint fontDataSize, string toUnicodeCMap, byte[] cidToGidMap, uint cidToGidMapSize) Parameters doc nint fontData byte[] fontDataSize uint toUnicodeCMap string cidToGidMap byte[] cidToGidMapSize uint Returns nint FPDFText_LoadFont(nint, nint, uint, int, int) public static extern nint FPDFText_LoadFont(nint document, nint fontData, uint size, int fontType, int cid) Parameters document nint fontData nint size uint fontType int cid int Returns nint FPDFText_LoadStandardFont(nint, string) public static extern nint FPDFText_LoadStandardFont(nint doc, string font) Parameters doc nint font string Returns nint FPDFText_SetCharcodes(nint, uint[], nuint) public static extern bool FPDFText_SetCharcodes(nint textObject, uint[] charcodes, nuint count) Parameters textObject nint charcodes uint[] count nuint Returns bool FPDFText_SetText(nint, string) public static extern bool FPDFText_SetText(nint textObject, string text) Parameters textObject nint text string Returns bool FPDF_CreateNewDocument() public static extern nint FPDF_CreateNewDocument() Returns nint FPDF_MovePages(nint, int[], ulong, int) public static extern bool FPDF_MovePages(nint doc, int[] pageIndices, ulong pageIndicesLen, int destPageIndex) Parameters doc nint pageIndices int[] pageIndicesLen ulong destPageIndex int Returns bool"
  },
  "api/nebulae.dotPDFium.Native.PdfExtNative.LocalTimeFunc.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfExtNative.LocalTimeFunc.html",
    "title": "Delegate PdfExtNative.LocalTimeFunc | dotPDFium",
    "summary": "Delegate PdfExtNative.LocalTimeFunc Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public delegate nint PdfExtNative.LocalTimeFunc(ref time_t time) Parameters time time_t Returns nint"
  },
  "api/nebulae.dotPDFium.Native.PdfExtNative.TimeFunc.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfExtNative.TimeFunc.html",
    "title": "Delegate PdfExtNative.TimeFunc | dotPDFium",
    "summary": "Delegate PdfExtNative.TimeFunc Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public delegate time_t PdfExtNative.TimeFunc() Returns time_t"
  },
  "api/nebulae.dotPDFium.Native.PdfExtNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfExtNative.html",
    "title": "Class PdfExtNative | dotPDFium",
    "summary": "Class PdfExtNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfExtNative Inheritance object PdfExtNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDFDoc_GetPageMode(nint) public static extern int FPDFDoc_GetPageMode(nint document) Parameters document nint Returns int FSDK_SetLocaltimeFunction(LocalTimeFunc) public static extern void FSDK_SetLocaltimeFunction(PdfExtNative.LocalTimeFunc func) Parameters func PdfExtNative.LocalTimeFunc FSDK_SetTimeFunction(TimeFunc) public static extern void FSDK_SetTimeFunction(PdfExtNative.TimeFunc func) Parameters func PdfExtNative.TimeFunc FSDK_SetUnSpObjProcessHandler(ref UnSupportInfo) public static extern bool FSDK_SetUnSpObjProcessHandler(ref UnSupportInfo info) Parameters info UnSupportInfo Returns bool"
  },
  "api/nebulae.dotPDFium.Native.PdfFileAccess.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfFileAccess.html",
    "title": "Struct PdfFileAccess | dotPDFium",
    "summary": "Struct PdfFileAccess Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct PdfFileAccess Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields fileLength public uint fileLength Field Value uint getBlock public nint getBlock Field Value nint userData public nint userData Field Value nint"
  },
  "api/nebulae.dotPDFium.Native.PdfFileIdType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfFileIdType.html",
    "title": "Enum PdfFileIdType | dotPDFium",
    "summary": "Enum PdfFileIdType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the type of file identifier used in a PDF document, as defined by the PDF specification. public enum PdfFileIdType Fields Changing = 1 Permanent = 0 Remarks A PDF file identifier consists of two parts: a \"permanent\" identifier and a \"changing\" identifier. The PdfFileIdType enum is used to distinguish between these two types: PermanentRepresents the permanent identifier, which remains constant across revisions of the document. ChangingRepresents the changing identifier, which is updated with each revision of the document."
  },
  "api/nebulae.dotPDFium.Native.PdfFileVersion.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfFileVersion.html",
    "title": "Enum PdfFileVersion | dotPDFium",
    "summary": "Enum PdfFileVersion Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the PDF file version supported by a document or operation. public enum PdfFileVersion Fields Pdf14 = 14 Pdf15 = 15 Pdf16 = 16 Pdf17 = 17 Remarks The values of this enumeration correspond to the major and minor versions of the PDF specification. For example, Pdf14 represents PDF version 1.4."
  },
  "api/nebulae.dotPDFium.Native.PdfFillMode.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfFillMode.html",
    "title": "Enum PdfFillMode | dotPDFium",
    "summary": "Enum PdfFillMode Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the fill mode to use when rendering paths in a PDF document. public enum PdfFillMode Fields Alternate = 1 None = 0 Winding = 2 Remarks The fill mode determines how the interior of a path is defined when rendering shapes. Use None to disable filling, Alternate for the alternate fill rule, or Winding for the nonzero winding number rule."
  },
  "api/nebulae.dotPDFium.Native.PdfFlattenMode.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfFlattenMode.html",
    "title": "Enum PdfFlattenMode | dotPDFium",
    "summary": "Enum PdfFlattenMode Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the mode used to flatten a PDF document. public enum PdfFlattenMode Fields NormalDisplay = 0 Print = 1 Remarks Flattening a PDF refers to merging interactive elements, such as form fields or annotations, into the static content of the document. This enumeration defines the modes that control how the flattening process is applied."
  },
  "api/nebulae.dotPDFium.Native.PdfFlattenNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfFlattenNative.html",
    "title": "Class PdfFlattenNative | dotPDFium",
    "summary": "Class PdfFlattenNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfFlattenNative Inheritance object PdfFlattenNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDFPage_Flatten(nint, int) public static extern int FPDFPage_Flatten(nint page, int nFlag) Parameters page nint nFlag int Returns int"
  },
  "api/nebulae.dotPDFium.Native.PdfFlattenResult.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfFlattenResult.html",
    "title": "Enum PdfFlattenResult | dotPDFium",
    "summary": "Enum PdfFlattenResult Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Represents the result of a PDF flattening operation. public enum PdfFlattenResult Fields Fail = 0 NothingToDo = 2 Success = 1 Remarks This enumeration indicates the outcome of a PDF flattening process, which may fail, succeed, or determine that no action was necessary. Use this to evaluate the result of the operation and take appropriate actions based on the value."
  },
  "api/nebulae.dotPDFium.Native.PdfFontFlags.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfFontFlags.html",
    "title": "Enum PdfFontFlags | dotPDFium",
    "summary": "Enum PdfFontFlags Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies font characteristics and attributes for a PDF font. [Flags] public enum PdfFontFlags Fields AllCap = 65536 FixedPitch = 1 ForceBold = 262144 Italic = 64 None = 0 Nonsymbolic = 32 Script = 8 Serif = 2 SmallCap = 131072 Symbolic = 4 Remarks This enumeration uses the FlagsAttribute to allow a bitwise combination of its member values. Each flag represents a specific font attribute, such as whether the font is italic, symbolic, or serif."
  },
  "api/nebulae.dotPDFium.Native.PdfFontInfo.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfFontInfo.html",
    "title": "Struct PdfFontInfo | dotPDFium",
    "summary": "Struct PdfFontInfo Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct PdfFontInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields DeleteFont public delegate* unmanaged[Cdecl]<PdfFontInfo*, void*, void> DeleteFont Field Value delegate* unmanaged[Cdecl]<PdfFontInfo*, void*, void> EnumFonts public delegate* unmanaged[Cdecl]<PdfFontInfo*, void*, void> EnumFonts Field Value delegate* unmanaged[Cdecl]<PdfFontInfo*, void*, void> GetFaceName public delegate* unmanaged[Cdecl]<PdfFontInfo*, void*, byte*, uint, uint> GetFaceName Field Value delegate* unmanaged[Cdecl]<PdfFontInfo*, void*, byte*, uint, uint> GetFont public delegate* unmanaged[Cdecl]<PdfFontInfo*, byte*, void*> GetFont Field Value delegate* unmanaged[Cdecl]<PdfFontInfo*, byte*, void*> GetFontCharset public delegate* unmanaged[Cdecl]<PdfFontInfo*, void*, int> GetFontCharset Field Value delegate* unmanaged[Cdecl]<PdfFontInfo*, void*, int> GetFontData public delegate* unmanaged[Cdecl]<PdfFontInfo*, void*, uint, byte*, uint, uint> GetFontData Field Value delegate* unmanaged[Cdecl]<PdfFontInfo*, void*, uint, byte*, uint, uint> MapFont public delegate* unmanaged[Cdecl]<PdfFontInfo*, int, byte, int, int, byte*, byte*, void*> MapFont Field Value delegate* unmanaged[Cdecl]<PdfFontInfo*, int, byte, int, int, byte*, byte*, void*> Release public delegate* unmanaged[Cdecl]<PdfFontInfo*, void> Release Field Value delegate* unmanaged[Cdecl]<PdfFontInfo*, void> version public int version Field Value int"
  },
  "api/nebulae.dotPDFium.Native.PdfFontType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfFontType.html",
    "title": "Enum PdfFontType | dotPDFium",
    "summary": "Enum PdfFontType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the type of font used in a PDF document or text object. public enum PdfFontType Fields TrueType = 2 Type1 = 1"
  },
  "api/nebulae.dotPDFium.Native.PdfFormFieldColorType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfFormFieldColorType.html",
    "title": "Enum PdfFormFieldColorType | dotPDFium",
    "summary": "Enum PdfFormFieldColorType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the type of color applied to a PDF form field. public enum PdfFormFieldColorType Fields Border = 1 Fill = 0 Text = 2 Remarks This enumeration is used to define the context in which a color is applied to a PDF form field, such as the background fill, border stroke, or text font color."
  },
  "api/nebulae.dotPDFium.Native.PdfFormFieldFlags.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfFormFieldFlags.html",
    "title": "Enum PdfFormFieldFlags | dotPDFium",
    "summary": "Enum PdfFormFieldFlags Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the flags that define the behavior and appearance of a form field in a PDF document. [Flags] public enum PdfFormFieldFlags Fields Comb = 16777216 Combo = 131072 CommitOnSelChange = 134217728 DoNotScroll = 8388608 DoNotSpellCheck = 4194304 Edit = 262144 FileSelect = 1048576 MultiSelect = 2097152 Multiline = 4096 NoExport = 4 NoToggleToOff = 16384 Password = 8192 PushButton = 65536 Radio = 32768 RadiosInUnison = 67108864 ReadOnly = 1 Required = 2 RichText = 33554432 Sort = 524288 Remarks This enumeration is decorated with the FlagsAttribute, allowing a combination of values to be specified using a bitwise OR operation. Each flag represents a specific characteristic or functionality of a form field, such as whether it is read-only, required, or supports multiline input."
  },
  "api/nebulae.dotPDFium.Native.PdfFormFieldHighlightType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfFormFieldHighlightType.html",
    "title": "Enum PdfFormFieldHighlightType | dotPDFium",
    "summary": "Enum PdfFormFieldHighlightType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the types of form fields in a PDF document that can be highlighted. public enum PdfFormFieldHighlightType Fields All = 0 CheckBox = 2 ComboBox = 5 ListBox = 6 PushButton = 4 RadioButton = 3 TextField = 1 Remarks This enumeration is used to indicate the type of form field to which a specific operation or behavior applies. For example, it can be used to determine which form fields should be visually highlighted in a PDF viewer."
  },
  "api/nebulae.dotPDFium.Native.PdfFormFieldType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfFormFieldType.html",
    "title": "Enum PdfFormFieldType | dotPDFium",
    "summary": "Enum PdfFormFieldType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the type of a form field in a PDF document. public enum PdfFormFieldType Fields Button = 1 CheckBox = 2 ComboBox = 4 ListBox = 5 RadioButton = 3 Signature = 7 Text = 6 Unknown = 0 Remarks This enumeration is used to identify the type of a form field within a PDF document. Each value corresponds to a specific type of interactive field, such as buttons, text fields, or signature fields."
  },
  "api/nebulae.dotPDFium.Native.PdfFormFillInfo.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfFormFillInfo.html",
    "title": "Struct PdfFormFillInfo | dotPDFium",
    "summary": "Struct PdfFormFillInfo Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct PdfFormFillInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields FFI_ExecuteNamedAction public delegate* unmanaged[Cdecl]<PdfFormFillInfo*, nint, void> FFI_ExecuteNamedAction Field Value delegate* unmanaged[Cdecl]<PdfFormFillInfo*, nint, void> FFI_GetCurrentPage public delegate* unmanaged[Cdecl]<PdfFormFillInfo*, nint, nint> FFI_GetCurrentPage Field Value delegate* unmanaged[Cdecl]<PdfFormFillInfo*, nint, nint> FFI_GetLocalTime public delegate* unmanaged[Cdecl]<PdfFormFillInfo*, FpdfSystemTime> FFI_GetLocalTime Field Value delegate* unmanaged[Cdecl]<PdfFormFillInfo*, FpdfSystemTime> FFI_GetPage public delegate* unmanaged[Cdecl]<PdfFormFillInfo*, nint, int, nint> FFI_GetPage Field Value delegate* unmanaged[Cdecl]<PdfFormFillInfo*, nint, int, nint> FFI_GetRotation public delegate* unmanaged[Cdecl]<PdfFormFillInfo*, nint, int> FFI_GetRotation Field Value delegate* unmanaged[Cdecl]<PdfFormFillInfo*, nint, int> FFI_Invalidate public delegate* unmanaged[Cdecl]<PdfFormFillInfo*, nint, double, double, double, double, void> FFI_Invalidate Field Value delegate* unmanaged[Cdecl]<PdfFormFillInfo*, nint, double, double, double, double, void> FFI_KillTimer public delegate* unmanaged[Cdecl]<PdfFormFillInfo*, int, void> FFI_KillTimer Field Value delegate* unmanaged[Cdecl]<PdfFormFillInfo*, int, void> FFI_OnChange public delegate* unmanaged[Cdecl]<PdfFormFillInfo*, void> FFI_OnChange Field Value delegate* unmanaged[Cdecl]<PdfFormFillInfo*, void> FFI_OutputSelectedRect public delegate* unmanaged[Cdecl]<PdfFormFillInfo*, nint, double, double, double, double, void> FFI_OutputSelectedRect Field Value delegate* unmanaged[Cdecl]<PdfFormFillInfo*, nint, double, double, double, double, void> FFI_SetCursor public delegate* unmanaged[Cdecl]<PdfFormFillInfo*, int, void> FFI_SetCursor Field Value delegate* unmanaged[Cdecl]<PdfFormFillInfo*, int, void> FFI_SetTimer public delegate* unmanaged[Cdecl]<PdfFormFillInfo*, int, delegate* unmanaged[Cdecl]<int, void>, int> FFI_SetTimer Field Value delegate* unmanaged[Cdecl]<PdfFormFillInfo*, int, delegate* unmanaged[Cdecl]<int, void>, int> Release public delegate* unmanaged[Cdecl]<PdfFormFillInfo*, void> Release Field Value delegate* unmanaged[Cdecl]<PdfFormFillInfo*, void> m_pJsPlatform public nint m_pJsPlatform Field Value nint version public int version Field Value int xfa_disabled public byte xfa_disabled Field Value byte"
  },
  "api/nebulae.dotPDFium.Native.PdfFormFillNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfFormFillNative.html",
    "title": "Class PdfFormFillNative | dotPDFium",
    "summary": "Class PdfFormFillNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfFormFillNative Inheritance object PdfFormFillNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FORM_CanRedo(nint, nint) public static extern bool FORM_CanRedo(nint formHandle, nint page) Parameters formHandle nint page nint Returns bool FORM_CanUndo(nint, nint) public static extern bool FORM_CanUndo(nint formHandle, nint page) Parameters formHandle nint page nint Returns bool FORM_DoDocumentAAction(nint, int) public static extern void FORM_DoDocumentAAction(nint formHandle, int aaType) Parameters formHandle nint aaType int FORM_DoDocumentJSAction(nint) public static extern void FORM_DoDocumentJSAction(nint formHandle) Parameters formHandle nint FORM_DoDocumentOpenAction(nint) public static extern void FORM_DoDocumentOpenAction(nint formHandle) Parameters formHandle nint FORM_DoPageAAction(nint, nint, int) public static extern void FORM_DoPageAAction(nint page, nint formHandle, int aaType) Parameters page nint formHandle nint aaType int FORM_ForceToKillFocus(nint) public static extern bool FORM_ForceToKillFocus(nint formHandle) Parameters formHandle nint Returns bool FORM_GetFocusedAnnot(nint, out int, out nint) public static extern bool FORM_GetFocusedAnnot(nint formHandle, out int pageIndex, out nint annot) Parameters formHandle nint pageIndex int annot nint Returns bool FORM_GetFocusedText(nint, nint, nint, uint) public static extern uint FORM_GetFocusedText(nint formHandle, nint page, nint buffer, uint buflen) Parameters formHandle nint page nint buffer nint buflen uint Returns uint FORM_GetSelectedText(nint, nint, nint, uint) public static extern uint FORM_GetSelectedText(nint formHandle, nint page, nint buffer, uint buflen) Parameters formHandle nint page nint buffer nint buflen uint Returns uint FORM_IsIndexSelected(nint, nint, int) public static extern bool FORM_IsIndexSelected(nint formHandle, nint page, int index) Parameters formHandle nint page nint index int Returns bool FORM_OnAfterLoadPage(nint, nint) public static extern void FORM_OnAfterLoadPage(nint page, nint formHandle) Parameters page nint formHandle nint FORM_OnBeforeClosePage(nint, nint) public static extern void FORM_OnBeforeClosePage(nint page, nint formHandle) Parameters page nint formHandle nint FORM_OnChar(nint, nint, int, int) public static extern bool FORM_OnChar(nint formHandle, nint page, int charCode, int modifier) Parameters formHandle nint page nint charCode int modifier int Returns bool FORM_OnFocus(nint, nint, int, double, double) public static extern bool FORM_OnFocus(nint formHandle, nint page, int modifier, double x, double y) Parameters formHandle nint page nint modifier int x double y double Returns bool FORM_OnKeyDown(nint, nint, int, int) public static extern bool FORM_OnKeyDown(nint formHandle, nint page, int keyCode, int modifier) Parameters formHandle nint page nint keyCode int modifier int Returns bool FORM_OnKeyUp(nint, nint, int, int) public static extern bool FORM_OnKeyUp(nint formHandle, nint page, int keyCode, int modifier) Parameters formHandle nint page nint keyCode int modifier int Returns bool FORM_OnLButtonDoubleClick(nint, nint, int, double, double) public static extern bool FORM_OnLButtonDoubleClick(nint formHandle, nint page, int modifier, double x, double y) Parameters formHandle nint page nint modifier int x double y double Returns bool FORM_OnLButtonDown(nint, nint, int, double, double) public static extern bool FORM_OnLButtonDown(nint formHandle, nint page, int modifier, double x, double y) Parameters formHandle nint page nint modifier int x double y double Returns bool FORM_OnLButtonUp(nint, nint, int, double, double) public static extern bool FORM_OnLButtonUp(nint formHandle, nint page, int modifier, double x, double y) Parameters formHandle nint page nint modifier int x double y double Returns bool FORM_OnMouseMove(nint, nint, int, double, double) public static extern bool FORM_OnMouseMove(nint formHandle, nint page, int modifier, double x, double y) Parameters formHandle nint page nint modifier int x double y double Returns bool FORM_OnMouseWheel(nint, nint, int, ref FsPointF, int, int) public static extern bool FORM_OnMouseWheel(nint formHandle, nint page, int modifier, ref FsPointF coord, int deltaX, int deltaY) Parameters formHandle nint page nint modifier int coord FsPointF deltaX int deltaY int Returns bool FORM_OnRButtonDown(nint, nint, int, double, double) public static extern bool FORM_OnRButtonDown(nint formHandle, nint page, int modifier, double x, double y) Parameters formHandle nint page nint modifier int x double y double Returns bool FORM_OnRButtonUp(nint, nint, int, double, double) public static extern bool FORM_OnRButtonUp(nint formHandle, nint page, int modifier, double x, double y) Parameters formHandle nint page nint modifier int x double y double Returns bool FORM_Redo(nint, nint) public static extern bool FORM_Redo(nint formHandle, nint page) Parameters formHandle nint page nint Returns bool FORM_ReplaceAndKeepSelection(nint, nint, string) public static extern void FORM_ReplaceAndKeepSelection(nint formHandle, nint page, string text) Parameters formHandle nint page nint text string FORM_ReplaceSelection(nint, nint, string) public static extern void FORM_ReplaceSelection(nint formHandle, nint page, string text) Parameters formHandle nint page nint text string FORM_SelectAllText(nint, nint) public static extern bool FORM_SelectAllText(nint formHandle, nint page) Parameters formHandle nint page nint Returns bool FORM_SetFocusedAnnot(nint, nint) public static extern bool FORM_SetFocusedAnnot(nint formHandle, nint annot) Parameters formHandle nint annot nint Returns bool FORM_SetIndexSelected(nint, nint, int, bool) public static extern bool FORM_SetIndexSelected(nint formHandle, nint page, int index, bool selected) Parameters formHandle nint page nint index int selected bool Returns bool FORM_Undo(nint, nint) public static extern bool FORM_Undo(nint formHandle, nint page) Parameters formHandle nint page nint Returns bool FPDFDOC_ExitFormFillEnvironment(nint) public static extern void FPDFDOC_ExitFormFillEnvironment(nint formHandle) Parameters formHandle nint FPDFDOC_InitFormFillEnvironment(nint, ref PdfFormFillInfo) public static extern nint FPDFDOC_InitFormFillEnvironment(nint doc, ref PdfFormFillInfo formInfo) Parameters doc nint formInfo PdfFormFillInfo Returns nint FPDFPage_FormFieldZOrderAtPoint(nint, nint, double, double) public static extern int FPDFPage_FormFieldZOrderAtPoint(nint formHandle, nint page, double x, double y) Parameters formHandle nint page nint x double y double Returns int FPDFPage_HasFormFieldAtPoint(nint, nint, double, double) public static extern int FPDFPage_HasFormFieldAtPoint(nint formHandle, nint page, double x, double y) Parameters formHandle nint page nint x double y double Returns int FPDF_FFLDraw(nint, nint, nint, int, int, int, int, int, int) public static extern void FPDF_FFLDraw(nint formHandle, nint bitmap, nint page, int startX, int startY, int sizeX, int sizeY, int rotate, int flags) Parameters formHandle nint bitmap nint page nint startX int startY int sizeX int sizeY int rotate int flags int FPDF_GetFormType(nint) public static extern int FPDF_GetFormType(nint document) Parameters document nint Returns int FPDF_LoadXFA(nint) public static extern bool FPDF_LoadXFA(nint document) Parameters document nint Returns bool FPDF_RemoveFormFieldHighlight(nint) public static extern void FPDF_RemoveFormFieldHighlight(nint formHandle) Parameters formHandle nint FPDF_SetFormFieldHighlightAlpha(nint, byte) public static extern void FPDF_SetFormFieldHighlightAlpha(nint formHandle, byte alpha) Parameters formHandle nint alpha byte FPDF_SetFormFieldHighlightColor(nint, int, uint) public static extern void FPDF_SetFormFieldHighlightColor(nint formHandle, int fieldType, uint color) Parameters formHandle nint fieldType int color uint"
  },
  "api/nebulae.dotPDFium.Native.PdfFormType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfFormType.html",
    "title": "Enum PdfFormType | dotPDFium",
    "summary": "Enum PdfFormType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the type of form contained within a PDF document. public enum PdfFormType Fields AcroForm = 1 None = 0 XfaForeground = 3 XfaFull = 2 Remarks This enumeration is used to identify the form type in a PDF file, which can influence how the form is processed or rendered."
  },
  "api/nebulae.dotPDFium.Native.PdfImageObjMetadata.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfImageObjMetadata.html",
    "title": "Struct PdfImageObjMetadata | dotPDFium",
    "summary": "Struct PdfImageObjMetadata Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct PdfImageObjMetadata Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields bits_per_pixel Bits per pixel. public uint bits_per_pixel Field Value uint colorspace The image's color space. Use FPDF_COLORSPACE_* constants. public int colorspace Field Value int height The image height in pixels. public uint height Field Value uint horizontal_dpi The image's horizontal DPI (dots per inch). public float horizontal_dpi Field Value float marked_content_id The image's marked content ID, or -1 if none. public int marked_content_id Field Value int vertical_dpi The image's vertical DPI (dots per inch). public float vertical_dpi Field Value float width The image width in pixels. public uint width Field Value uint"
  },
  "api/nebulae.dotPDFium.Native.PdfKeyModifierFlags.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfKeyModifierFlags.html",
    "title": "Enum PdfKeyModifierFlags | dotPDFium",
    "summary": "Enum PdfKeyModifierFlags Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies modifier flags that represent the state of keys or mouse buttons during a PDF-related input event. [Flags] public enum PdfKeyModifierFlags Fields AltKey = 4 AutoRepeat = 32 ControlKey = 2 KeyPad = 16 LeftButtonDown = 64 MetaKey = 8 MiddleButtonDown = 128 None = 0 RightButtonDown = 256 ShiftKey = 1 Remarks This enumeration supports bitwise combination of its values due to the FlagsAttribute. Use these flags to determine which modifier keys or mouse buttons were active during an input event."
  },
  "api/nebulae.dotPDFium.Native.PdfLineCapStyle.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfLineCapStyle.html",
    "title": "Enum PdfLineCapStyle | dotPDFium",
    "summary": "Enum PdfLineCapStyle Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the shape to be used at the ends of open paths when stroking a line in a PDF document. public enum PdfLineCapStyle Fields Butt = 0 Round = 1 Square = 2 Remarks This enumeration defines the available line cap styles for stroking operations in PDF graphics. The line cap determines how the end of a line is rendered when it does not connect to another line."
  },
  "api/nebulae.dotPDFium.Native.PdfLineJoinStyle.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfLineJoinStyle.html",
    "title": "Enum PdfLineJoinStyle | dotPDFium",
    "summary": "Enum PdfLineJoinStyle Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the style of line joins used when drawing paths in a PDF document. public enum PdfLineJoinStyle Fields Bevel = 2 Miter = 0 Round = 1 Remarks Line join styles determine how the intersection between two connected lines is rendered. This enumeration is typically used in conjunction with PDF graphics operations to control the appearance of line joins in vector graphics."
  },
  "api/nebulae.dotPDFium.Native.PdfMarkParamType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfMarkParamType.html",
    "title": "Enum PdfMarkParamType | dotPDFium",
    "summary": "Enum PdfMarkParamType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the type of parameter used in a PDF mark operation. public enum PdfMarkParamType Fields Blob = 3 Int = 1 None = 0 String = 2 Remarks This enumeration is used to define the data type of parameters when working with PDF mark operations. Each value represents a specific type of parameter that can be passed or processed."
  },
  "api/nebulae.dotPDFium.Native.PdfPageAActionType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfPageAActionType.html",
    "title": "Enum PdfPageAActionType | dotPDFium",
    "summary": "Enum PdfPageAActionType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the types of actions that can be performed on a PDF page. public enum PdfPageAActionType Fields Close = 1 Open = 0 Remarks This enumeration is used to indicate whether an action should occur when a PDF page is opened or closed."
  },
  "api/nebulae.dotPDFium.Native.PdfPageMode.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfPageMode.html",
    "title": "Enum PdfPageMode | dotPDFium",
    "summary": "Enum PdfPageMode Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the page mode to be used when a PDF document is opened. public enum PdfPageMode Fields FullScreen = 3 Unknown = -1 UseAttachments = 5 UseNone = 0 UseOC = 4 UseOutlines = 1 UseThumbs = 2 Remarks The page mode determines how the document is displayed in a PDF viewer upon opening. For example, it can specify whether the document is shown in full screen, with a navigation pane, or with thumbnails. The default behavior depends on the viewer if UseNone is specified."
  },
  "api/nebulae.dotPDFium.Native.PdfPageObjectType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfPageObjectType.html",
    "title": "Enum PdfPageObjectType | dotPDFium",
    "summary": "Enum PdfPageObjectType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the type of an object on a PDF page. public enum PdfPageObjectType Fields Form = 5 Image = 3 Link = 1001 Mark = 1000 Path = 2 Shading = 4 Text = 1 Unknown = 0 Remarks This enumeration is used to identify the category of a PDF page object, such as text, images, or paths. It can be useful for processing or analyzing the content of a PDF document."
  },
  "api/nebulae.dotPDFium.Native.PdfPageRotation.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfPageRotation.html",
    "title": "Enum PdfPageRotation | dotPDFium",
    "summary": "Enum PdfPageRotation Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll This enum represents the rotation of the PDF page. public enum PdfPageRotation Fields NoRotation = 0 Rotate180 = 2 Rotate270 = 3 Rotate90 = 1"
  },
  "api/nebulae.dotPDFium.Native.PdfPathDrawMode.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfPathDrawMode.html",
    "title": "Enum PdfPathDrawMode | dotPDFium",
    "summary": "Enum PdfPathDrawMode Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the drawing mode for a path in a PDF document. [Flags] public enum PdfPathDrawMode Fields Fill = 1 FillStroke = Fill | Stroke None = 0 Stroke = 2 Remarks This enumeration defines the options for rendering a path in a PDF, including filling, stroking, or both. It supports bitwise combination of its values due to the FlagsAttribute."
  },
  "api/nebulae.dotPDFium.Native.PdfPathSegmentType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfPathSegmentType.html",
    "title": "Enum PdfPathSegmentType | dotPDFium",
    "summary": "Enum PdfPathSegmentType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the type of a segment in a PDF path. public enum PdfPathSegmentType Fields BezierTo = 2 Close = 3 LineTo = 1 MoveTo = 0 Unknown = -1 Remarks This enumeration is used to identify the type of path segment in a PDF graphics context. Each value represents a specific drawing operation, such as moving to a point, drawing a line, or creating a Bézier curve."
  },
  "api/nebulae.dotPDFium.Native.PdfPpoNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfPpoNative.html",
    "title": "Class PdfPpoNative | dotPDFium",
    "summary": "Class PdfPpoNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfPpoNative Inheritance object PdfPpoNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDF_CloseXObject(nint) public static extern void FPDF_CloseXObject(nint xobject) Parameters xobject nint FPDF_CopyViewerPreferences(nint, nint) public static extern bool FPDF_CopyViewerPreferences(nint destDoc, nint srcDoc) Parameters destDoc nint srcDoc nint Returns bool FPDF_ImportNPagesToOne(nint, float, float, nuint, nuint) public static extern nint FPDF_ImportNPagesToOne(nint srcDoc, float outputWidth, float outputHeight, nuint pagesX, nuint pagesY) Parameters srcDoc nint outputWidth float outputHeight float pagesX nuint pagesY nuint Returns nint FPDF_ImportPages(nint, nint, string, int) public static extern bool FPDF_ImportPages(nint destDoc, nint srcDoc, string pageRange, int index) Parameters destDoc nint srcDoc nint pageRange string index int Returns bool FPDF_ImportPagesByIndex(nint, nint, int[], uint, int) public static extern bool FPDF_ImportPagesByIndex(nint destDoc, nint srcDoc, int[] pageIndices, uint length, int index) Parameters destDoc nint srcDoc nint pageIndices int[] length uint index int Returns bool FPDF_NewFormObjectFromXObject(nint) public static extern nint FPDF_NewFormObjectFromXObject(nint xobject) Parameters xobject nint Returns nint FPDF_NewXObjectFromPage(nint, nint, int) public static extern nint FPDF_NewXObjectFromPage(nint destDoc, nint srcDoc, int srcPageIndex) Parameters destDoc nint srcDoc nint srcPageIndex int Returns nint"
  },
  "api/nebulae.dotPDFium.Native.PdfProgressiveNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfProgressiveNative.html",
    "title": "Class PdfProgressiveNative | dotPDFium",
    "summary": "Class PdfProgressiveNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfProgressiveNative Inheritance object PdfProgressiveNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields FPDF_RENDER_DONE public const int FPDF_RENDER_DONE = 2 Field Value int FPDF_RENDER_FAILED public const int FPDF_RENDER_FAILED = 3 Field Value int FPDF_RENDER_READY public const int FPDF_RENDER_READY = 0 Field Value int FPDF_RENDER_TOBECONTINUED public const int FPDF_RENDER_TOBECONTINUED = 1 Field Value int Methods FPDF_RenderPageBitmapWithColorScheme_Start(nint, nint, int, int, int, int, int, int, ref PdfColorScheme, ref IfSdkPause) public static extern int FPDF_RenderPageBitmapWithColorScheme_Start(nint bitmap, nint page, int startX, int startY, int sizeX, int sizeY, int rotate, int flags, ref PdfColorScheme colorScheme, ref IfSdkPause pause) Parameters bitmap nint page nint startX int startY int sizeX int sizeY int rotate int flags int colorScheme PdfColorScheme pause IfSdkPause Returns int FPDF_RenderPageBitmap_Start(nint, nint, int, int, int, int, int, int, ref IfSdkPause) public static extern int FPDF_RenderPageBitmap_Start(nint bitmap, nint page, int startX, int startY, int sizeX, int sizeY, int rotate, int flags, ref IfSdkPause pause) Parameters bitmap nint page nint startX int startY int sizeX int sizeY int rotate int flags int pause IfSdkPause Returns int FPDF_RenderPage_Close(nint) public static extern void FPDF_RenderPage_Close(nint page) Parameters page nint FPDF_RenderPage_Continue(nint, ref IfSdkPause) public static extern int FPDF_RenderPage_Continue(nint page, ref IfSdkPause pause) Parameters page nint pause IfSdkPause Returns int"
  },
  "api/nebulae.dotPDFium.Native.PdfRenderFlags.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfRenderFlags.html",
    "title": "Enum PdfRenderFlags | dotPDFium",
    "summary": "Enum PdfRenderFlags Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies rendering options for PDF content, allowing fine-grained control over how pages are rendered. [Flags] public enum PdfRenderFlags Fields Annot = 1 ConvertFillToStroke = 32 DebugInfo = 128 ForceHalftone = 1024 Grayscale = 8 LcdText = 2 LimitedImageCache = 512 NoCatch = 256 NoNativeText = 4 NoSmoothImage = 8192 NoSmoothPath = 16384 NoSmoothText = 4096 None = 0 Printing = 2048 ReverseByteOrder = 16 Remarks This enumeration supports bitwise combination of its values due to the FlagsAttribute. Use these flags to customize rendering behavior, such as enabling annotations, adjusting text smoothing, or optimizing for printing. Some flags may affect performance or output quality, so choose options based on the specific rendering requirements."
  },
  "api/nebulae.dotPDFium.Native.PdfRenderStatus.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfRenderStatus.html",
    "title": "Enum PdfRenderStatus | dotPDFium",
    "summary": "Enum PdfRenderStatus Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Represents the status of a PDF rendering operation. public enum PdfRenderStatus Fields Done = 2 Failed = 3 Ready = 0 ToBeContinued = 1 Remarks This enumeration is used to indicate the current state of a PDF rendering process. The status can be one of the following: Ready: The rendering process is ready to start. ToBeContinued: The rendering process is in progress and requires additional steps to complete. Done: The rendering process has completed successfully. Failed: The rendering process has failed."
  },
  "api/nebulae.dotPDFium.Native.PdfSaveFlags.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfSaveFlags.html",
    "title": "Enum PdfSaveFlags | dotPDFium",
    "summary": "Enum PdfSaveFlags Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies flags that control the behavior of saving a PDF document. [Flags] public enum PdfSaveFlags Fields Incremental = 1 NoIncremental = 2 None = 0 RemoveSecurity = Incremental | NoIncremental Remarks This enumeration supports bitwise combination of its values due to the FlagsAttribute. Use these flags to customize how a PDF document is saved, such as enabling incremental updates or removing security settings."
  },
  "api/nebulae.dotPDFium.Native.PdfSaveNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfSaveNative.html",
    "title": "Class PdfSaveNative | dotPDFium",
    "summary": "Class PdfSaveNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfSaveNative Inheritance object PdfSaveNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDF_SaveAsCopy(nint, nint, uint) public static extern bool FPDF_SaveAsCopy(nint document, nint writer, uint flags) Parameters document nint writer nint flags uint Returns bool FPDF_SaveWithVersion(nint, nint, uint, int) public static extern bool FPDF_SaveWithVersion(nint document, nint writer, uint flags, int fileVersion) Parameters document nint writer nint flags uint fileVersion int Returns bool"
  },
  "api/nebulae.dotPDFium.Native.PdfSearchExNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfSearchExNative.html",
    "title": "Class PdfSearchExNative | dotPDFium",
    "summary": "Class PdfSearchExNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfSearchExNative Inheritance object PdfSearchExNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDFText_GetCharIndexFromTextIndex(nint, int) public static extern int FPDFText_GetCharIndexFromTextIndex(nint textPage, int textIndex) Parameters textPage nint textIndex int Returns int FPDFText_GetTextIndexFromCharIndex(nint, int) public static extern int FPDFText_GetTextIndexFromCharIndex(nint textPage, int charIndex) Parameters textPage nint charIndex int Returns int"
  },
  "api/nebulae.dotPDFium.Native.PdfSecurityHandlerRevision.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfSecurityHandlerRevision.html",
    "title": "Enum PdfSecurityHandlerRevision | dotPDFium",
    "summary": "Enum PdfSecurityHandlerRevision Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Represents the revision levels of the PDF security handler, which determine the encryption algorithm and key length used for securing a PDF document. public enum PdfSecurityHandlerRevision Fields None = -1 Revision2_RC4_40 = 2 Revision3_RC4_128 = 3 Revision4_AES_128 = 4 Revision5_AES_256 = 5 Revision6_AES_256_Enhanced = 6 Remarks Each revision corresponds to a specific encryption standard and key length, as defined by the PDF specification. Use this enumeration to identify or specify the security handler revision when working with encrypted PDF documents."
  },
  "api/nebulae.dotPDFium.Native.PdfSegmentType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfSegmentType.html",
    "title": "Enum PdfSegmentType | dotPDFium",
    "summary": "Enum PdfSegmentType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Represents the type of a segment in a PDF path. public enum PdfSegmentType Fields BezierTo = 1 LineTo = 0 MoveTo = 2 Unknown = -1 Remarks This enumeration is used to identify the type of drawing operation for a segment in a PDF path. It includes operations such as moving to a point, drawing a line, or creating a Bézier curve."
  },
  "api/nebulae.dotPDFium.Native.PdfSignatureNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfSignatureNative.html",
    "title": "Class PdfSignatureNative | dotPDFium",
    "summary": "Class PdfSignatureNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfSignatureNative Inheritance object PdfSignatureNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDFSignatureObj_GetByteRange(nint, int[], uint) public static extern uint FPDFSignatureObj_GetByteRange(nint signature, int[] buffer, uint length) Parameters signature nint buffer int[] length uint Returns uint FPDFSignatureObj_GetContents(nint, nint, uint) public static extern uint FPDFSignatureObj_GetContents(nint signature, nint buffer, uint length) Parameters signature nint buffer nint length uint Returns uint FPDFSignatureObj_GetDocMDPPermission(nint) public static extern uint FPDFSignatureObj_GetDocMDPPermission(nint signature) Parameters signature nint Returns uint FPDFSignatureObj_GetReason(nint, char[], uint) public static extern uint FPDFSignatureObj_GetReason(nint signature, char[] buffer, uint length) Parameters signature nint buffer char[] length uint Returns uint FPDFSignatureObj_GetSubFilter(nint, byte[], uint) public static extern uint FPDFSignatureObj_GetSubFilter(nint signature, byte[] buffer, uint length) Parameters signature nint buffer byte[] length uint Returns uint FPDFSignatureObj_GetTime(nint, byte[], uint) public static extern uint FPDFSignatureObj_GetTime(nint signature, byte[] buffer, uint length) Parameters signature nint buffer byte[] length uint Returns uint FPDF_GetSignatureCount(nint) public static extern int FPDF_GetSignatureCount(nint document) Parameters document nint Returns int FPDF_GetSignatureObject(nint, int) public static extern nint FPDF_GetSignatureObject(nint document, int index) Parameters document nint index int Returns nint"
  },
  "api/nebulae.dotPDFium.Native.PdfStructElementType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfStructElementType.html",
    "title": "Enum PdfStructElementType | dotPDFium",
    "summary": "Enum PdfStructElementType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Represents the types of structural elements in a PDF document, as defined by the PDF specification. public enum PdfStructElementType Fields Annot = 13 Art = 4 BibEntry = 10 BlockQuote = 14 Caption = 15 Code = 11 Div = 5 Document = 1 Figure = 34 Form = 36 Formula = 35 H = 18 H1 = 19 H2 = 20 H3 = 21 H4 = 22 H5 = 23 H6 = 24 L = 25 LBody = 27 LI = 26 Link = 12 NonStruct = 16 Note = 8 Paragraph = 17 Part = 2 Quote = 7 Reference = 9 Sect = 3 Span = 6 TD = 31 TH = 30 TOC = 32 TOCI = 33 TR = 29 Table = 28 Unknown = 0 Remarks This enumeration provides a comprehensive list of structural element types that can be used to describe the logical structure of a PDF document. These types are commonly used in tagged PDFs to improve accessibility, enable content reflow, and provide semantic meaning to document elements. Each value corresponds to a specific structural role, such as headings, lists, tables, or annotations. For example, H1 through H6 represent heading levels, while Table, TR, TH, and TD represent table structures."
  },
  "api/nebulae.dotPDFium.Native.PdfStructTreeNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfStructTreeNative.html",
    "title": "Class PdfStructTreeNative | dotPDFium",
    "summary": "Class PdfStructTreeNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfStructTreeNative Inheritance object PdfStructTreeNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDF_StructElement_Attr_CountChildren(nint) public static extern int FPDF_StructElement_Attr_CountChildren(nint value) Parameters value nint Returns int FPDF_StructElement_Attr_GetBlobValue(nint, nint, uint, out uint) public static extern bool FPDF_StructElement_Attr_GetBlobValue(nint value, nint buffer, uint buflen, out uint outBuflen) Parameters value nint buffer nint buflen uint outBuflen uint Returns bool FPDF_StructElement_Attr_GetBooleanValue(nint, out bool) public static extern bool FPDF_StructElement_Attr_GetBooleanValue(nint value, out bool result) Parameters value nint result bool Returns bool FPDF_StructElement_Attr_GetChildAtIndex(nint, int) public static extern nint FPDF_StructElement_Attr_GetChildAtIndex(nint value, int index) Parameters value nint index int Returns nint FPDF_StructElement_Attr_GetCount(nint) public static extern int FPDF_StructElement_Attr_GetCount(nint attr) Parameters attr nint Returns int FPDF_StructElement_Attr_GetName(nint, int, nint, uint, out uint) public static extern bool FPDF_StructElement_Attr_GetName(nint attr, int index, nint buffer, uint buflen, out uint outBuflen) Parameters attr nint index int buffer nint buflen uint outBuflen uint Returns bool FPDF_StructElement_Attr_GetNumberValue(nint, out float) public static extern bool FPDF_StructElement_Attr_GetNumberValue(nint value, out float result) Parameters value nint result float Returns bool FPDF_StructElement_Attr_GetStringValue(nint, nint, uint, out uint) public static extern bool FPDF_StructElement_Attr_GetStringValue(nint value, nint buffer, uint buflen, out uint outBuflen) Parameters value nint buffer nint buflen uint outBuflen uint Returns bool FPDF_StructElement_Attr_GetType(nint) public static extern int FPDF_StructElement_Attr_GetType(nint value) Parameters value nint Returns int FPDF_StructElement_Attr_GetValue(nint, string) public static extern nint FPDF_StructElement_Attr_GetValue(nint attr, string name) Parameters attr nint name string Returns nint FPDF_StructElement_CountChildren(nint) public static extern int FPDF_StructElement_CountChildren(nint element) Parameters element nint Returns int FPDF_StructElement_GetActualText(nint, char[], uint) public static extern uint FPDF_StructElement_GetActualText(nint element, char[] buffer, uint length) Parameters element nint buffer char[] length uint Returns uint FPDF_StructElement_GetAltText(nint, char[], uint) public static extern uint FPDF_StructElement_GetAltText(nint element, char[] buffer, uint length) Parameters element nint buffer char[] length uint Returns uint FPDF_StructElement_GetAttr(nint) public static extern nint FPDF_StructElement_GetAttr(nint element) Parameters element nint Returns nint FPDF_StructElement_GetAttributeAtIndex(nint, int) public static extern nint FPDF_StructElement_GetAttributeAtIndex(nint element, int index) Parameters element nint index int Returns nint FPDF_StructElement_GetAttributeCount(nint) public static extern int FPDF_StructElement_GetAttributeCount(nint element) Parameters element nint Returns int FPDF_StructElement_GetChildAtIndex(nint, int) public static extern nint FPDF_StructElement_GetChildAtIndex(nint element, int index) Parameters element nint index int Returns nint FPDF_StructElement_GetChildMarkedContentID(nint, int) public static extern int FPDF_StructElement_GetChildMarkedContentID(nint element, int index) Parameters element nint index int Returns int FPDF_StructElement_GetID(nint, char[], uint) public static extern uint FPDF_StructElement_GetID(nint element, char[] buffer, uint length) Parameters element nint buffer char[] length uint Returns uint FPDF_StructElement_GetLang(nint, char[], uint) public static extern uint FPDF_StructElement_GetLang(nint element, char[] buffer, uint length) Parameters element nint buffer char[] length uint Returns uint FPDF_StructElement_GetMarkedContentID(nint) public static extern int FPDF_StructElement_GetMarkedContentID(nint element) Parameters element nint Returns int FPDF_StructElement_GetMarkedContentIdAtIndex(nint, int) public static extern int FPDF_StructElement_GetMarkedContentIdAtIndex(nint element, int index) Parameters element nint index int Returns int FPDF_StructElement_GetMarkedContentIdCount(nint) public static extern int FPDF_StructElement_GetMarkedContentIdCount(nint element) Parameters element nint Returns int FPDF_StructElement_GetObjType(nint, char[], uint) public static extern uint FPDF_StructElement_GetObjType(nint element, char[] buffer, uint length) Parameters element nint buffer char[] length uint Returns uint FPDF_StructElement_GetParent(nint) public static extern nint FPDF_StructElement_GetParent(nint element) Parameters element nint Returns nint FPDF_StructElement_GetStringAttribute(nint, string, char[], uint) public static extern uint FPDF_StructElement_GetStringAttribute(nint element, string name, char[] buffer, uint length) Parameters element nint name string buffer char[] length uint Returns uint FPDF_StructElement_GetTitle(nint, char[], uint) public static extern uint FPDF_StructElement_GetTitle(nint element, char[] buffer, uint length) Parameters element nint buffer char[] length uint Returns uint FPDF_StructElement_GetType(nint, byte[], uint) public static extern uint FPDF_StructElement_GetType(nint element, byte[] buffer, uint buflen) Parameters element nint buffer byte[] buflen uint Returns uint FPDF_StructTree_Close(nint) public static extern void FPDF_StructTree_Close(nint structTree) Parameters structTree nint FPDF_StructTree_CountChildren(nint) public static extern int FPDF_StructTree_CountChildren(nint structTree) Parameters structTree nint Returns int FPDF_StructTree_GetChildAtIndex(nint, int) public static extern nint FPDF_StructTree_GetChildAtIndex(nint structTree, int index) Parameters structTree nint index int Returns nint FPDF_StructTree_GetForPage(nint) public static extern nint FPDF_StructTree_GetForPage(nint page) Parameters page nint Returns nint"
  },
  "api/nebulae.dotPDFium.Native.PdfSystemFontNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfSystemFontNative.html",
    "title": "Class PdfSystemFontNative | dotPDFium",
    "summary": "Class PdfSystemFontNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfSystemFontNative Inheritance object PdfSystemFontNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDF_AddInstalledFont(nint, string, int) public static extern void FPDF_AddInstalledFont(nint mapper, string face, int charset) Parameters mapper nint face string charset int FPDF_FreeDefaultSystemFontInfo(nint) public static extern void FPDF_FreeDefaultSystemFontInfo(nint fontInfo) Parameters fontInfo nint FPDF_GetDefaultSystemFontInfo() public static extern nint FPDF_GetDefaultSystemFontInfo() Returns nint FPDF_GetDefaultTTFMap() public static extern nint FPDF_GetDefaultTTFMap() Returns nint FPDF_GetDefaultTTFMapCount() public static extern nuint FPDF_GetDefaultTTFMapCount() Returns nuint FPDF_GetDefaultTTFMapEntry(nuint) public static extern nint FPDF_GetDefaultTTFMapEntry(nuint index) Parameters index nuint Returns nint FPDF_SetSystemFontInfo(nint) public static extern void FPDF_SetSystemFontInfo(nint fontInfo) Parameters fontInfo nint"
  },
  "api/nebulae.dotPDFium.Native.PdfTextNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfTextNative.html",
    "title": "Class PdfTextNative | dotPDFium",
    "summary": "Class PdfTextNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfTextNative Inheritance object PdfTextNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDFLink_CloseWebLinks(nint) public static extern void FPDFLink_CloseWebLinks(nint linkPage) Parameters linkPage nint FPDFLink_CountRects(nint, int) public static extern int FPDFLink_CountRects(nint linkPage, int linkIndex) Parameters linkPage nint linkIndex int Returns int FPDFLink_CountWebLinks(nint) public static extern int FPDFLink_CountWebLinks(nint linkPage) Parameters linkPage nint Returns int FPDFLink_GetRect(nint, int, int, out double, out double, out double, out double) public static extern bool FPDFLink_GetRect(nint linkPage, int linkIndex, int rectIndex, out double left, out double top, out double right, out double bottom) Parameters linkPage nint linkIndex int rectIndex int left double top double right double bottom double Returns bool FPDFLink_GetTextRange(nint, int, out int, out int) public static extern bool FPDFLink_GetTextRange(nint linkPage, int linkIndex, out int startCharIndex, out int charCount) Parameters linkPage nint linkIndex int startCharIndex int charCount int Returns bool FPDFLink_GetURL(nint, int, nint, int) public static extern int FPDFLink_GetURL(nint linkPage, int linkIndex, nint buffer, int buflen) Parameters linkPage nint linkIndex int buffer nint buflen int Returns int FPDFLink_LoadWebLinks(nint) public static extern nint FPDFLink_LoadWebLinks(nint textPage) Parameters textPage nint Returns nint FPDFText_ClosePage(nint) public static extern void FPDFText_ClosePage(nint text_page) Parameters text_page nint FPDFText_CountChars(nint) public static extern int FPDFText_CountChars(nint text_page) Parameters text_page nint Returns int FPDFText_CountRects(nint, int, int) public static extern int FPDFText_CountRects(nint text_page, int start_index, int count) Parameters text_page nint start_index int count int Returns int FPDFText_FindClose(nint) public static extern void FPDFText_FindClose(nint searchHandle) Parameters searchHandle nint FPDFText_FindNext(nint) public static extern bool FPDFText_FindNext(nint searchHandle) Parameters searchHandle nint Returns bool FPDFText_FindPrev(nint) public static extern bool FPDFText_FindPrev(nint searchHandle) Parameters searchHandle nint Returns bool FPDFText_FindStart(nint, string, uint, int) public static extern nint FPDFText_FindStart(nint text_page, string findwhat, uint flags, int start_index) Parameters text_page nint findwhat string flags uint start_index int Returns nint FPDFText_GetBoundedText(nint, double, double, double, double, ushort[], int) public static extern int FPDFText_GetBoundedText(nint text_page, double left, double top, double right, double bottom, ushort[] buffer, int buflen) Parameters text_page nint left double top double right double bottom double buffer ushort[] buflen int Returns int FPDFText_GetCharAngle(nint, int) public static extern float FPDFText_GetCharAngle(nint textPage, int index) Parameters textPage nint index int Returns float FPDFText_GetCharBox(nint, int, out double, out double, out double, out double) public static extern bool FPDFText_GetCharBox(nint text_page, int index, out double left, out double right, out double bottom, out double top) Parameters text_page nint index int left double right double bottom double top double Returns bool FPDFText_GetCharIndexAtPos(nint, double, double, double, double) public static extern int FPDFText_GetCharIndexAtPos(nint text_page, double x, double y, double xTolerance, double yTolerance) Parameters text_page nint x double y double xTolerance double yTolerance double Returns int FPDFText_GetCharOrigin(nint, int, out double, out double) public static extern bool FPDFText_GetCharOrigin(nint text_page, int index, out double x, out double y) Parameters text_page nint index int x double y double Returns bool FPDFText_GetFillColor(nint, int, out uint, out uint, out uint, out uint) public static extern bool FPDFText_GetFillColor(nint textPage, int index, out uint r, out uint g, out uint b, out uint a) Parameters textPage nint index int r uint g uint b uint a uint Returns bool FPDFText_GetFontInfo(nint, int, byte[], uint, out int) public static extern uint FPDFText_GetFontInfo(nint textPage, int index, byte[] buffer, uint buflen, out int flags) Parameters textPage nint index int buffer byte[] buflen uint flags int Returns uint FPDFText_GetFontSize(nint, int) public static extern double FPDFText_GetFontSize(nint textPage, int index) Parameters textPage nint index int Returns double FPDFText_GetFontWeight(nint, int) public static extern int FPDFText_GetFontWeight(nint textPage, int index) Parameters textPage nint index int Returns int FPDFText_GetLooseCharBox(nint, int, out FsRectF) public static extern bool FPDFText_GetLooseCharBox(nint textPage, int index, out FsRectF rect) Parameters textPage nint index int rect FsRectF Returns bool FPDFText_GetMatrix(nint, int, out FsMatrix) public static extern bool FPDFText_GetMatrix(nint textPage, int index, out FsMatrix matrix) Parameters textPage nint index int matrix FsMatrix Returns bool FPDFText_GetRect(nint, int, out double, out double, out double, out double) public static extern bool FPDFText_GetRect(nint text_page, int rect_index, out double left, out double top, out double right, out double bottom) Parameters text_page nint rect_index int left double top double right double bottom double Returns bool FPDFText_GetSchCount(nint) public static extern int FPDFText_GetSchCount(nint searchHandle) Parameters searchHandle nint Returns int FPDFText_GetSchResultIndex(nint) public static extern int FPDFText_GetSchResultIndex(nint searchHandle) Parameters searchHandle nint Returns int FPDFText_GetStrokeColor(nint, int, out uint, out uint, out uint, out uint) public static extern bool FPDFText_GetStrokeColor(nint textPage, int index, out uint r, out uint g, out uint b, out uint a) Parameters textPage nint index int r uint g uint b uint a uint Returns bool FPDFText_GetText(nint, int, int, ushort[]) public static extern int FPDFText_GetText(nint text_page, int start_index, int count, ushort[] result) Parameters text_page nint start_index int count int result ushort[] Returns int FPDFText_GetTextObject(nint, int) public static extern nint FPDFText_GetTextObject(nint textPage, int index) Parameters textPage nint index int Returns nint FPDFText_GetUnicode(nint, int) public static extern uint FPDFText_GetUnicode(nint text_page, int index) Parameters text_page nint index int Returns uint FPDFText_HasUnicodeMapError(nint, int) public static extern int FPDFText_HasUnicodeMapError(nint textPage, int index) Parameters textPage nint index int Returns int FPDFText_IsGenerated(nint, int) public static extern int FPDFText_IsGenerated(nint textPage, int index) Parameters textPage nint index int Returns int FPDFText_IsHyphen(nint, int) public static extern int FPDFText_IsHyphen(nint textPage, int index) Parameters textPage nint index int Returns int FPDFText_LoadPage(nint) public static extern nint FPDFText_LoadPage(nint page) Parameters page nint Returns nint"
  },
  "api/nebulae.dotPDFium.Native.PdfTextRenderMode.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfTextRenderMode.html",
    "title": "Enum PdfTextRenderMode | dotPDFium",
    "summary": "Enum PdfTextRenderMode Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Specifies the rendering mode for text in a PDF document. public enum PdfTextRenderMode Fields Clip = 7 Fill = 0 FillClip = 4 FillStroke = 2 FillStrokeClip = 6 Invisible = 3 Stroke = 1 StrokeClip = 5 Remarks The rendering mode determines how text is drawn or clipped in the PDF content. It can control whether the text is filled, stroked, both, or used as a clipping path."
  },
  "api/nebulae.dotPDFium.Native.PdfThumbnailNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfThumbnailNative.html",
    "title": "Class PdfThumbnailNative | dotPDFium",
    "summary": "Class PdfThumbnailNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfThumbnailNative Inheritance object PdfThumbnailNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDFPage_GetDecodedThumbnailData(nint, nint, uint) public static extern uint FPDFPage_GetDecodedThumbnailData(nint page, nint buffer, uint buflen) Parameters page nint buffer nint buflen uint Returns uint FPDFPage_GetRawThumbnailData(nint, nint, uint) public static extern uint FPDFPage_GetRawThumbnailData(nint page, nint buffer, uint buflen) Parameters page nint buffer nint buflen uint Returns uint FPDFPage_GetThumbnailAsBitmap(nint) public static extern nint FPDFPage_GetThumbnailAsBitmap(nint page) Parameters page nint Returns nint"
  },
  "api/nebulae.dotPDFium.Native.PdfTransformPageNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfTransformPageNative.html",
    "title": "Class PdfTransformPageNative | dotPDFium",
    "summary": "Class PdfTransformPageNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public static class PdfTransformPageNative Inheritance object PdfTransformPageNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDFClipPath_CountPathSegments(nint, int) public static extern int FPDFClipPath_CountPathSegments(nint clipPath, int pathIndex) Parameters clipPath nint pathIndex int Returns int FPDFClipPath_CountPaths(nint) public static extern int FPDFClipPath_CountPaths(nint clipPath) Parameters clipPath nint Returns int FPDFClipPath_GetPathSegment(nint, int, int) public static extern nint FPDFClipPath_GetPathSegment(nint clipPath, int pathIndex, int segmentIndex) Parameters clipPath nint pathIndex int segmentIndex int Returns nint FPDFPageObj_GetClipPath(nint) public static extern nint FPDFPageObj_GetClipPath(nint pageObject) Parameters pageObject nint Returns nint FPDFPageObj_TransformClipPath(nint, double, double, double, double, double, double) public static extern void FPDFPageObj_TransformClipPath(nint pageObject, double a, double b, double c, double d, double e, double f) Parameters pageObject nint a double b double c double d double e double f double FPDFPage_GetArtBox(nint, out float, out float, out float, out float) public static extern bool FPDFPage_GetArtBox(nint page, out float left, out float bottom, out float right, out float top) Parameters page nint left float bottom float right float top float Returns bool FPDFPage_GetBleedBox(nint, out float, out float, out float, out float) public static extern bool FPDFPage_GetBleedBox(nint page, out float left, out float bottom, out float right, out float top) Parameters page nint left float bottom float right float top float Returns bool FPDFPage_GetCropBox(nint, out float, out float, out float, out float) public static extern bool FPDFPage_GetCropBox(nint page, out float left, out float bottom, out float right, out float top) Parameters page nint left float bottom float right float top float Returns bool FPDFPage_GetMediaBox(nint, out float, out float, out float, out float) public static extern bool FPDFPage_GetMediaBox(nint page, out float left, out float bottom, out float right, out float top) Parameters page nint left float bottom float right float top float Returns bool FPDFPage_GetTrimBox(nint, out float, out float, out float, out float) public static extern bool FPDFPage_GetTrimBox(nint page, out float left, out float bottom, out float right, out float top) Parameters page nint left float bottom float right float top float Returns bool FPDFPage_InsertClipPath(nint, nint) public static extern void FPDFPage_InsertClipPath(nint page, nint clipPath) Parameters page nint clipPath nint FPDFPage_SetArtBox(nint, float, float, float, float) public static extern void FPDFPage_SetArtBox(nint page, float left, float bottom, float right, float top) Parameters page nint left float bottom float right float top float FPDFPage_SetBleedBox(nint, float, float, float, float) public static extern void FPDFPage_SetBleedBox(nint page, float left, float bottom, float right, float top) Parameters page nint left float bottom float right float top float FPDFPage_SetCropBox(nint, float, float, float, float) public static extern void FPDFPage_SetCropBox(nint page, float left, float bottom, float right, float top) Parameters page nint left float bottom float right float top float FPDFPage_SetMediaBox(nint, float, float, float, float) public static extern void FPDFPage_SetMediaBox(nint page, float left, float bottom, float right, float top) Parameters page nint left float bottom float right float top float FPDFPage_SetTrimBox(nint, float, float, float, float) public static extern void FPDFPage_SetTrimBox(nint page, float left, float bottom, float right, float top) Parameters page nint left float bottom float right float top float FPDFPage_TransFormWithClip(nint, ref FsMatrixF, ref FsRectF) public static extern bool FPDFPage_TransFormWithClip(nint page, ref FsMatrixF matrix, ref FsRectF clipRect) Parameters page nint matrix FsMatrixF clipRect FsRectF Returns bool FPDF_CreateClipPath(float, float, float, float) public static extern nint FPDF_CreateClipPath(float left, float bottom, float right, float top) Parameters left float bottom float right float top float Returns nint FPDF_DestroyClipPath(nint) public static extern void FPDF_DestroyClipPath(nint clipPath) Parameters clipPath nint"
  },
  "api/nebulae.dotPDFium.Native.PdfUnsupportedFeatureType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfUnsupportedFeatureType.html",
    "title": "Enum PdfUnsupportedFeatureType | dotPDFium",
    "summary": "Enum PdfUnsupportedFeatureType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Represents the types of unsupported features that may be encountered in a PDF document. public enum PdfUnsupportedFeatureType Fields Annot_3DAnnot = 11 Annot_Attachment = 16 Annot_Movie = 12 Annot_ScreenMedia = 14 Annot_ScreenRichMedia = 15 Annot_Signature = 17 Annot_Sound = 13 Doc_Attachment = 3 Doc_PortableCollection = 2 Doc_Security = 4 Doc_SharedForm_Acrobat = 6 Doc_SharedForm_Email = 8 Doc_SharedForm_Filesystem = 7 Doc_SharedReview = 5 Doc_XfaForm = 1 Remarks This enumeration categorizes various unsupported features in PDF documents, such as specific document-level features (e.g., XFA forms, security settings) or annotation types (e.g., 3D annotations, multimedia content). These values can be used to identify and handle unsupported features when processing PDF files."
  },
  "api/nebulae.dotPDFium.Native.PdfValueType.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfValueType.html",
    "title": "Enum PdfValueType | dotPDFium",
    "summary": "Enum PdfValueType Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Represents the type of a value in a PDF document. public enum PdfValueType Fields Array = 5 Boolean = 1 Dictionary = 6 Name = 4 NotFound = 0 Null = 8 Number = 2 Stream = 7 String = 3 Remarks This enumeration is used to identify the data type of a value within a PDF structure, such as a boolean, number, string, or more complex types like arrays and dictionaries. It is commonly used when parsing or manipulating PDF content to determine the type of a value."
  },
  "api/nebulae.dotPDFium.Native.PdfViewNative.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfViewNative.html",
    "title": "Class PdfViewNative | dotPDFium",
    "summary": "Class PdfViewNative Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public class PdfViewNative Inheritance object PdfViewNative Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FPDFBitmap_Create(int, int, int) public static extern nint FPDFBitmap_Create(int width, int height, int alpha) Parameters width int height int alpha int Returns nint FPDFBitmap_CreateEx(int, int, int, nint, int) public static extern nint FPDFBitmap_CreateEx(int width, int height, int format, nint first_scan, int stride) Parameters width int height int format int first_scan nint stride int Returns nint FPDFBitmap_Destroy(nint) public static extern void FPDFBitmap_Destroy(nint bitmap) Parameters bitmap nint FPDFBitmap_FillRect(nint, int, int, int, int, uint) public static extern bool FPDFBitmap_FillRect(nint bitmap, int left, int top, int width, int height, uint color) Parameters bitmap nint left int top int width int height int color uint Returns bool FPDFBitmap_GetBuffer(nint) public static extern nint FPDFBitmap_GetBuffer(nint bitmap) Parameters bitmap nint Returns nint FPDFBitmap_GetFormat(nint) public static extern int FPDFBitmap_GetFormat(nint bitmap) Parameters bitmap nint Returns int FPDFBitmap_GetHeight(nint) public static extern int FPDFBitmap_GetHeight(nint bitmap) Parameters bitmap nint Returns int FPDFBitmap_GetStride(nint) public static extern int FPDFBitmap_GetStride(nint bitmap) Parameters bitmap nint Returns int FPDFBitmap_GetWidth(nint) public static extern int FPDFBitmap_GetWidth(nint bitmap) Parameters bitmap nint Returns int FPDF_CloseDocument(nint) public static extern void FPDF_CloseDocument(nint document) Parameters document nint FPDF_ClosePage(nint) public static extern void FPDF_ClosePage(nint page) Parameters page nint FPDF_CountNamedDests(nint) public static extern uint FPDF_CountNamedDests(nint document) Parameters document nint Returns uint FPDF_DeviceToPage(nint, int, int, int, int, int, int, int, out double, out double) public static extern bool FPDF_DeviceToPage(nint page, int start_x, int start_y, int size_x, int size_y, int rotate, int device_x, int device_y, out double page_x, out double page_y) Parameters page nint start_x int start_y int size_x int size_y int rotate int device_x int device_y int page_x double page_y double Returns bool FPDF_DocumentHasValidCrossReferenceTable(nint) public static extern bool FPDF_DocumentHasValidCrossReferenceTable(nint document) Parameters document nint Returns bool FPDF_GetDocPermissions(nint) public static extern uint FPDF_GetDocPermissions(nint document) Parameters document nint Returns uint FPDF_GetDocUserPermissions(nint) public static extern uint FPDF_GetDocUserPermissions(nint document) Parameters document nint Returns uint FPDF_GetFileVersion(nint, out int) public static extern bool FPDF_GetFileVersion(nint document, out int version) Parameters document nint version int Returns bool FPDF_GetLastError() public static extern uint FPDF_GetLastError() Returns uint FPDF_GetNamedDest(nint, int, nint, ref int) public static extern nint FPDF_GetNamedDest(nint document, int index, nint buffer, ref int buflen) Parameters document nint index int buffer nint buflen int Returns nint FPDF_GetNamedDestByName(nint, string) public static extern nint FPDF_GetNamedDestByName(nint document, string name) Parameters document nint name string Returns nint FPDF_GetPageBoundingBox(nint, out FsRectF) public static extern bool FPDF_GetPageBoundingBox(nint page, out FsRectF rect) Parameters page nint rect FsRectF Returns bool FPDF_GetPageCount(nint) public static extern int FPDF_GetPageCount(nint document) Parameters document nint Returns int FPDF_GetPageHeight(nint) public static extern double FPDF_GetPageHeight(nint page) Parameters page nint Returns double FPDF_GetPageHeightF(nint) public static extern float FPDF_GetPageHeightF(nint page) Parameters page nint Returns float FPDF_GetPageSizeByIndex(nint, int, out double, out double) public static extern int FPDF_GetPageSizeByIndex(nint document, int pageIndex, out double width, out double height) Parameters document nint pageIndex int width double height double Returns int FPDF_GetPageSizeByIndexF(nint, int, out FsSizeF) public static extern bool FPDF_GetPageSizeByIndexF(nint document, int pageIndex, out FsSizeF size) Parameters document nint pageIndex int size FsSizeF Returns bool FPDF_GetPageWidth(nint) public static extern double FPDF_GetPageWidth(nint page) Parameters page nint Returns double FPDF_GetPageWidthF(nint) public static extern float FPDF_GetPageWidthF(nint page) Parameters page nint Returns float FPDF_GetSecurityHandlerRevision(nint) public static extern int FPDF_GetSecurityHandlerRevision(nint document) Parameters document nint Returns int FPDF_GetTrailerEnds(nint, uint[], uint) public static extern uint FPDF_GetTrailerEnds(nint document, uint[] buffer, uint length) Parameters document nint buffer uint[] length uint Returns uint FPDF_GetXFAPacketContent(nint, int, nint, uint, out uint) public static extern bool FPDF_GetXFAPacketContent(nint document, int index, nint buffer, uint buflen, out uint outBuflen) Parameters document nint index int buffer nint buflen uint outBuflen uint Returns bool FPDF_GetXFAPacketCount(nint) public static extern int FPDF_GetXFAPacketCount(nint document) Parameters document nint Returns int FPDF_GetXFAPacketName(nint, int, nint, uint) public static extern uint FPDF_GetXFAPacketName(nint document, int index, nint buffer, uint buflen) Parameters document nint index int buffer nint buflen uint Returns uint FPDF_LoadCustomDocument(ref PdfFileAccess, string) public static extern nint FPDF_LoadCustomDocument(ref PdfFileAccess access, string password) Parameters access PdfFileAccess password string Returns nint FPDF_LoadDocument(string, string) public static extern nint FPDF_LoadDocument(string file_path, string password) Parameters file_path string password string Returns nint FPDF_LoadMemDocument(nint, int, string) public static extern nint FPDF_LoadMemDocument(nint data_buf, int size, string password) Parameters data_buf nint size int password string Returns nint FPDF_LoadMemDocument64(nint, nuint, string) public static extern nint FPDF_LoadMemDocument64(nint data_buf, nuint size, string password) Parameters data_buf nint size nuint password string Returns nint FPDF_LoadPage(nint, int) public static extern nint FPDF_LoadPage(nint document, int page_index) Parameters document nint page_index int Returns nint FPDF_PageToDevice(nint, int, int, int, int, int, double, double, out int, out int) public static extern bool FPDF_PageToDevice(nint page, int start_x, int start_y, int size_x, int size_y, int rotate, double page_x, double page_y, out int device_x, out int device_y) Parameters page nint start_x int start_y int size_x int size_y int rotate int page_x double page_y double device_x int device_y int Returns bool FPDF_RenderPageBitmap(nint, nint, int, int, int, int, int, int) public static extern void FPDF_RenderPageBitmap(nint bitmap, nint page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags) Parameters bitmap nint page nint start_x int start_y int size_x int size_y int rotate int flags int FPDF_RenderPageBitmapWithMatrix(nint, nint, ref FsMatrixF, ref FsRectF, int) public static extern void FPDF_RenderPageBitmapWithMatrix(nint bitmap, nint page, ref FsMatrixF matrix, ref FsRectF clipping, int flags) Parameters bitmap nint page nint matrix FsMatrixF clipping FsRectF flags int FPDF_VIEWERREF_GetDuplex(nint) public static extern PdfDuplexType FPDF_VIEWERREF_GetDuplex(nint document) Parameters document nint Returns PdfDuplexType FPDF_VIEWERREF_GetName(nint, string, byte[], uint) public static extern uint FPDF_VIEWERREF_GetName(nint document, string key, byte[] buffer, uint length) Parameters document nint key string buffer byte[] length uint Returns uint FPDF_VIEWERREF_GetNumCopies(nint) public static extern int FPDF_VIEWERREF_GetNumCopies(nint document) Parameters document nint Returns int FPDF_VIEWERREF_GetPrintPageRange(nint) public static extern nint FPDF_VIEWERREF_GetPrintPageRange(nint document) Parameters document nint Returns nint FPDF_VIEWERREF_GetPrintPageRangeCount(nint) public static extern nuint FPDF_VIEWERREF_GetPrintPageRangeCount(nint pageRange) Parameters pageRange nint Returns nuint FPDF_VIEWERREF_GetPrintPageRangeElement(nint, nuint) public static extern int FPDF_VIEWERREF_GetPrintPageRangeElement(nint pageRange, nuint index) Parameters pageRange nint index nuint Returns int FPDF_VIEWERREF_GetPrintScaling(nint) public static extern bool FPDF_VIEWERREF_GetPrintScaling(nint document) Parameters document nint Returns bool"
  },
  "api/nebulae.dotPDFium.Native.PdfVirtualKey.html": {
    "href": "api/nebulae.dotPDFium.Native.PdfVirtualKey.html",
    "title": "Enum PdfVirtualKey | dotPDFium",
    "summary": "Enum PdfVirtualKey Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll Represents virtual key codes for common keyboard keys used in PDF-related operations. public enum PdfVirtualKey Fields Back = 8 Control = 17 Delete = 46 Down = 40 Escape = 27 Left = 37 Return = 13 Right = 39 Shift = 16 Space = 32 Tab = 9 Up = 38 Remarks This enumeration provides a set of virtual key codes that correspond to commonly used keyboard keys. These values can be used to handle keyboard input in PDF-related applications, such as navigation or interaction with PDF viewers. The values are based on standard virtual key codes."
  },
  "api/nebulae.dotPDFium.Native.RgbaColor.html": {
    "href": "api/nebulae.dotPDFium.Native.RgbaColor.html",
    "title": "Struct RgbaColor | dotPDFium",
    "summary": "Struct RgbaColor Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public readonly record struct RgbaColor : IEquatable<RgbaColor> Implements IEquatable<RgbaColor> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors RgbaColor(byte, byte, byte, byte) public RgbaColor(byte R, byte G, byte B, byte A) Parameters R byte G byte B byte A byte Properties A public byte A { get; init; } Property Value byte B public byte B { get; init; } Property Value byte G public byte G { get; init; } Property Value byte R public byte R { get; init; } Property Value byte"
  },
  "api/nebulae.dotPDFium.Native.UnSupportInfo.UnSupportHandler.html": {
    "href": "api/nebulae.dotPDFium.Native.UnSupportInfo.UnSupportHandler.html",
    "title": "Delegate UnSupportInfo.UnSupportHandler | dotPDFium",
    "summary": "Delegate UnSupportInfo.UnSupportHandler Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public delegate void UnSupportInfo.UnSupportHandler(nint pThis, int type) Parameters pThis nint type int"
  },
  "api/nebulae.dotPDFium.Native.UnSupportInfo.html": {
    "href": "api/nebulae.dotPDFium.Native.UnSupportInfo.html",
    "title": "Struct UnSupportInfo | dotPDFium",
    "summary": "Struct UnSupportInfo Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct UnSupportInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields FSDK_UnSupport_Handler public UnSupportInfo.UnSupportHandler FSDK_UnSupport_Handler Field Value UnSupportInfo.UnSupportHandler version public int version Field Value int"
  },
  "api/nebulae.dotPDFium.Native.html": {
    "href": "api/nebulae.dotPDFium.Native.html",
    "title": "Namespace nebulae.dotPDFium.Native | dotPDFium",
    "summary": "Namespace nebulae.dotPDFium.Native Classes PdfAnnotNative PdfAttachmentNative PdfCatalogNative PdfDataAvailNative PdfDocNative PdfEditNative PdfExtNative PdfFlattenNative PdfFormFillNative PdfPpoNative PdfProgressiveNative PdfSaveNative PdfSearchExNative PdfSignatureNative PdfStructTreeNative PdfSystemFontNative PdfTextNative PdfThumbnailNative PdfTransformPageNative PdfViewNative Structs CharsetFontMap FpdfSystemTime FsMatrix FsMatrixF FsPointF FsQuadPointsF FsRect FsRectF FsSize FsSizeF FxDownloadHints FxFileAvail IfSdkPause PdfAnnotationBorder PdfColorScheme PdfFileAccess PdfFontInfo PdfFormFillInfo PdfImageObjMetadata RgbaColor UnSupportInfo time_t Enums AttachmentValueType Represents the type of value that an attachment can hold. FpfObjectType Represents the types of objects that can be processed in the FPF (File Processing Framework). FxFontCharset Specifies character set values used to define the encoding of text in fonts. FxFontPitchFamily Specifies the pitch and family classification of a font. FxFontWeight Specifies the weight of a font, which determines the thickness of the characters. PdfActionType Specifies the type of action that can be performed in a PDF document. PdfAnnotationActionType Specifies the types of actions that can be associated with a PDF annotation. PdfAnnotationAppearanceMode PdfAnnotationColorType Specifies the type of color associated with a PDF annotation. PdfAnnotationFlags Specifies the flags that control the behavior and visibility of a PDF annotation. PdfAnnotationSubtype Represents the subtype of a PDF annotation as defined in the PDF specification. PdfBitmapFormat Specifies the bitmap formats supported for rendering in a PDF context. PdfColorspace Represents the color space used in a PDF document. PdfDestViewMode Specifies the view mode for a destination in a PDF document. PdfDocActionType Specifies the types of actions that can be triggered in a PDF document lifecycle. PdfDocMDPPermission Specifies the permission levels for modifying a PDF document with DocMDP (Document Modification Detection and Prevention) settings. PdfDocMdpPermission Specifies the modification permissions for a PDF document when using Document Modification Detection and Prevention (MDP). PdfDocumentAActionType Specifies the types of additional actions (AAction) that can be triggered in a PDF document. PdfDuplexType Specifies the duplex printing options for a PDF document. PdfFileIdType Specifies the type of file identifier used in a PDF document, as defined by the PDF specification. PdfFileVersion Specifies the PDF file version supported by a document or operation. PdfFillMode Specifies the fill mode to use when rendering paths in a PDF document. PdfFlattenMode Specifies the mode used to flatten a PDF document. PdfFlattenResult Represents the result of a PDF flattening operation. PdfFontFlags Specifies font characteristics and attributes for a PDF font. PdfFontType Specifies the type of font used in a PDF document or text object. PdfFormFieldColorType Specifies the type of color applied to a PDF form field. PdfFormFieldFlags Specifies the flags that define the behavior and appearance of a form field in a PDF document. PdfFormFieldHighlightType Specifies the types of form fields in a PDF document that can be highlighted. PdfFormFieldType Specifies the type of a form field in a PDF document. PdfFormType Specifies the type of form contained within a PDF document. PdfKeyModifierFlags Specifies modifier flags that represent the state of keys or mouse buttons during a PDF-related input event. PdfLineCapStyle Specifies the shape to be used at the ends of open paths when stroking a line in a PDF document. PdfLineJoinStyle Specifies the style of line joins used when drawing paths in a PDF document. PdfMarkParamType Specifies the type of parameter used in a PDF mark operation. PdfPageAActionType Specifies the types of actions that can be performed on a PDF page. PdfPageMode Specifies the page mode to be used when a PDF document is opened. PdfPageObjectType Specifies the type of an object on a PDF page. PdfPageRotation This enum represents the rotation of the PDF page. PdfPathDrawMode Specifies the drawing mode for a path in a PDF document. PdfPathSegmentType Specifies the type of a segment in a PDF path. PdfRenderFlags Specifies rendering options for PDF content, allowing fine-grained control over how pages are rendered. PdfRenderStatus Represents the status of a PDF rendering operation. PdfSaveFlags Specifies flags that control the behavior of saving a PDF document. PdfSecurityHandlerRevision Represents the revision levels of the PDF security handler, which determine the encryption algorithm and key length used for securing a PDF document. PdfSegmentType Represents the type of a segment in a PDF path. PdfStructElementType Represents the types of structural elements in a PDF document, as defined by the PDF specification. PdfTextRenderMode Specifies the rendering mode for text in a PDF document. PdfUnsupportedFeatureType Represents the types of unsupported features that may be encountered in a PDF document. PdfValueType Represents the type of a value in a PDF document. PdfVirtualKey Represents virtual key codes for common keyboard keys used in PDF-related operations. Delegates AddSegmentDelegate GetBlockDelegate IsDataAvailDelegate NeedToPauseNowDelegate PdfExtNative.LocalTimeFunc PdfExtNative.TimeFunc UnSupportInfo.UnSupportHandler"
  },
  "api/nebulae.dotPDFium.Native.time_t.html": {
    "href": "api/nebulae.dotPDFium.Native.time_t.html",
    "title": "Struct time_t | dotPDFium",
    "summary": "Struct time_t Namespace nebulae.dotPDFium.Native Assembly dotPDFium.dll public struct time_t Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public long Value Field Value long Operators implicit operator time_t(long) public static implicit operator time_t(long l) Parameters l long Returns time_t implicit operator long(time_t) public static implicit operator long(time_t t) Parameters t time_t Returns long"
  },
  "api/nebulae.dotPDFium.PDFiumEngine.html": {
    "href": "api/nebulae.dotPDFium.PDFiumEngine.html",
    "title": "Class PDFiumEngine | dotPDFium",
    "summary": "Class PDFiumEngine Namespace nebulae.dotPDFium Assembly dotPDFium.dll public static class PDFiumEngine Inheritance object PDFiumEngine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsInitialized public static bool IsInitialized { get; } Property Value bool Methods Init() Initializes the PDFium library. This method should be called before using any PDFium functions. public static void Init() Shutdown() Shuts down the PDFium library. This method should be called when the application is done using PDFium. Calling Shutdown() will unload PDFium. All native handles (documents, pages, bitmaps) become invalid. Use with care. public static void Shutdown()"
  },
  "api/nebulae.dotPDFium.PdfAction.html": {
    "href": "api/nebulae.dotPDFium.PdfAction.html",
    "title": "Class PdfAction | dotPDFium",
    "summary": "Class PdfAction Namespace nebulae.dotPDFium Assembly dotPDFium.dll Represents an action within a PDF document, such as a hyperlink or a named action. public sealed class PdfAction Inheritance object PdfAction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks A PdfAction encapsulates a specific action defined in a PDF document. Actions can include navigating to a URI, executing a named action, or other types of actions as defined by the PDF specification. Use the Type property to determine the type of action and the appropriate methods to retrieve additional details. Properties Type Gets the type of the PDF action represented by this instance. public PdfActionType Type { get; } Property Value PdfActionType Methods GetDestination(PdfDocument) Retrieves the destination associated with the current action in the specified PDF document. public PdfDestination? GetDestination(PdfDocument doc) Parameters doc PdfDocument The PdfDocument instance representing the PDF document containing the action. Returns PdfDestination A PdfDestination object representing the destination associated with the action, or null if no destination is associated. Remarks The destination represents a specific location within the PDF document, such as a page or a view. Use this method to navigate to or retrieve information about the target location of the action. GetFilePath() Retrieves the file path associated with the current PDF action. public string? GetFilePath() Returns string The file path as a string, or null if no file path is associated with the action. Remarks The returned file path is decoded using UTF-8 encoding and may be trimmed of any trailing null characters. GetNamedAction() Retrieves the name of a named action. public string? GetNamedAction() Returns string Always returns null as the underlying implementation does not support retrieving the name of named actions. GetUri(PdfDocument) Retrieves the URI associated with the specified PDF document action. public string? GetUri(PdfDocument doc) Parameters doc PdfDocument The PdfDocument containing the action for which the URI is retrieved. Returns string The URI as a string if the action has an associated URI; otherwise, null. Remarks The returned URI is encoded in UTF-8 and may include a null terminator, which is removed before returning the result."
  },
  "api/nebulae.dotPDFium.PdfAddSegmentDelegate.html": {
    "href": "api/nebulae.dotPDFium.PdfAddSegmentDelegate.html",
    "title": "Delegate PdfAddSegmentDelegate | dotPDFium",
    "summary": "Delegate PdfAddSegmentDelegate Namespace nebulae.dotPDFium Assembly dotPDFium.dll Delegate called by PDFium to request that a segment be downloaded or made available. Used with FX_DOWNLOADHINTS. public delegate void PdfAddSegmentDelegate(ulong offset, ulong length) Parameters offset ulong Delegate called by PDFium to request that a segment be downloaded or made available. Used with FX_DOWNLOADHINTS. length ulong Delegate called by PDFium to request that a segment be downloaded or made available. Used with FX_DOWNLOADHINTS."
  },
  "api/nebulae.dotPDFium.PdfAnnotation.html": {
    "href": "api/nebulae.dotPDFium.PdfAnnotation.html",
    "title": "Class PdfAnnotation | dotPDFium",
    "summary": "Class PdfAnnotation Namespace nebulae.dotPDFium Assembly dotPDFium.dll public class PdfAnnotation : PdfObject, IDisposable Inheritance object PdfObject PdfAnnotation Implements IDisposable Derived PdfLinkAnnotation Inherited Members PdfObject._handle PdfObject._type PdfObject._disposed PdfObject.Handle PdfObject.Type PdfObject.IsDisposed PdfObject.GetPDFiumError() PdfObject.Dispose() PdfObject.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PdfAnnotation(nint, PdfPage) Initializes a new instance of the PdfAnnotation class with the specified handle and associated page. public PdfAnnotation(nint handle, PdfPage page) Parameters handle nint A pointer to the native PDF annotation object. Must be a valid, non-null handle. page PdfPage The PdfPage object that this annotation is associated with. Cannot be null. Remarks The handle parameter is used to reference the underlying native PDF annotation object, and the page parameter links the annotation to a specific page in the PDF document. Fields _page protected readonly PdfPage _page Field Value PdfPage Properties Subtype Gets the subtype of the PDF annotation. public PdfAnnotationSubtype Subtype { get; } Property Value PdfAnnotationSubtype Remarks The subtype indicates the specific type of the annotation, such as text, link, or highlight. Methods AddFileAttachment(string) Adds a file attachment annotation to the PDF and returns a reference to the attached file. public PdfFileSpec? AddFileAttachment(string name) Parameters name string The name of the file attachment to be added. This name is used to identify the attachment in the PDF. Returns PdfFileSpec A PdfFileSpec object representing the attached file if the operation is successful; otherwise, null. Remarks The method creates a file attachment annotation in the PDF document and associates it with the specified name. If the operation fails, the method returns null. AddInkStroke(ReadOnlySpan<FsPointF>) Adds an ink stroke to the annotation using the specified collection of points. public int AddInkStroke(ReadOnlySpan<FsPointF> strokePoints) Parameters strokePoints ReadOnlySpan<FsPointF> A read-only span of FsPointF representing the points that define the ink stroke. The span must contain at least one point. Returns int An integer representing the result of the operation. The meaning of the return value depends on the underlying implementation. Remarks This method adds a new ink stroke to the annotation by passing the provided points to the underlying PDF annotation system. The caller must ensure that the span contains valid points to define the stroke. Exceptions ArgumentException Thrown if strokePoints is empty. AppendAttachmentPoints(FsQuadPointsF) Appends an attachment point (quad) to the annotation. This is typically used for annotations like highlights, underlines, or squiggly lines. public bool AppendAttachmentPoints(FsQuadPointsF quad) Parameters quad FsQuadPointsF The quadrilateral to attach to the annotation. Returns bool true if the quad was successfully appended; otherwise, false. AppendObject(PdfPageObject) Appends a specified PDF page object to the annotation. public bool AppendObject(PdfPageObject obj) Parameters obj PdfPageObject The PdfPageObject to append. This object must be valid and associated with the same document as the annotation. Returns bool true if the object was successfully appended; otherwise, false. Remarks The appended object becomes part of the annotation and will be rendered as part of it. Ensure that the obj is properly initialized and compatible with the annotation before calling this method. ClearInkStrokes() Removes all ink strokes from the annotation. public bool ClearInkStrokes() Returns bool true if all ink strokes were successfully removed; otherwise, false. Remarks This method clears the ink list associated with the annotation. If the annotation does not contain any ink strokes, the method will return true without performing any action. CommitChanges() Commits any changes made to the annotation. public void CommitChanges() Remarks This method finalizes modifications to the annotation and ensures that all changes are saved. After calling this method, the annotation handle is no longer valid and should not be used until or unless you call GetAnnotation() again. GetAppearanceStreamName(PdfAnnotationAppearanceMode) Retrieves the name of the appearance stream for the specified annotation appearance mode. public string? GetAppearanceStreamName(PdfAnnotationAppearanceMode mode) Parameters mode PdfAnnotationAppearanceMode The appearance mode for which to retrieve the stream name. This can be Normal, Rollover, or Down. Returns string The name of the appearance stream as a string, or null if no appearance stream is defined for the specified mode. Remarks The appearance stream name is used to identify the visual representation of the annotation in the specified mode. GetAttachmentPoint(int) Retrieves the attachment point at the specified index. public FsQuadPointsF? GetAttachmentPoint(int index) Parameters index int The zero-based index of the attachment point to retrieve. Must be greater than or equal to 0. Returns FsQuadPointsF? An FsQuadPointsF structure representing the attachment point if found; otherwise, null. Exceptions ArgumentOutOfRangeException Thrown if index is less than 0. GetAttachmentPointCount() Gets the number of attachment points associated with the annotation. public int GetAttachmentPointCount() Returns int The total number of attachment points. Returns 0 if the annotation has no attachment points. Remarks Attachment points are specific locations within the annotation that can be used for positioning or other purposes. GetBorder() Retrieves the border characteristics of the PDF annotation. public PdfAnnotationBorder? GetBorder() Returns PdfAnnotationBorder? A PdfAnnotationBorder object representing the horizontal radius, vertical radius, and border width of the annotation, or null if the border information is unavailable. GetColor() Retrieves the color of the annotation as an RGBA value. public RgbaColor GetColor() Returns RgbaColor An RgbaColor representing the red, green, blue, and alpha components of the annotation's color. Exceptions dotPDFiumException Thrown if the annotation color cannot be retrieved. GetFileAttachment() Retrieves the file attachment associated with the annotation, if any. public PdfFileSpec? GetFileAttachment() Returns PdfFileSpec A PdfFileSpec object representing the file attachment, or null if no file attachment is associated with the annotation. GetInkStrokeCount() Gets the number of ink strokes associated with the annotation. public int GetInkStrokeCount() Returns int The total number of ink strokes in the annotation. Returns 0 if no ink strokes are present. Remarks This method retrieves the count of ink strokes defined in the annotation's ink list. Use this method to determine how many individual strokes are part of the annotation. GetInkStrokePoints(int) Retrieves the list of points that define the ink stroke for the specified path index. public IReadOnlyList<FsPointF> GetInkStrokePoints(int pathIndex) Parameters pathIndex int The zero-based index of the ink stroke path to retrieve. Returns IReadOnlyList<FsPointF> A read-only list of FsPointF objects representing the points in the ink stroke. Returns an empty list if the specified path index does not contain any points. Remarks This method retrieves the points for a specific ink stroke path associated with an annotation. The points are returned as a read-only list of FsPointF structures, which represent the coordinates of the ink stroke in the annotation's coordinate space. GetLine() Retrieves the start and end points of the line annotation, if available. public (FsPointF Start, FsPointF End)? GetLine() Returns (FsPointF Start, FsPointF End)? A tuple containing the start and end points of the line as FsPointF objects, or null if the line annotation is not defined or cannot be retrieved. GetLink(PdfDocument) If this annotation is a link, retrieves the associated link object handle. public PdfLink? GetLink(PdfDocument context) Parameters context PdfDocument Returns PdfLink The link handle if available, or Zero if not a link. GetLinkedAnnotation(string) Retrieves the annotation linked to the specified key. public nint? GetLinkedAnnotation(string key) Parameters key string The key identifying the linked annotation. Cannot be null or empty. Returns nint? A pointer to the linked annotation if one exists; otherwise, null. Remarks This method returns a nullable nint to represent the linked annotation. If no linked annotation is found, the method returns null. GetNumberValue(string) Retrieves the numeric value for a given dictionary key on the annotation. public float? GetNumberValue(string key) Parameters key string The dictionary key (e.g. \"F\", \"CA\", etc.). Returns float? The float value if the key is present, or null if not found or not numeric. GetObject(int) Retrieves the PdfPageObject at the specified index within the annotation. public PdfPageObject? GetObject(int index) Parameters index int The zero-based index of the object to retrieve. Must be within the valid range of objects in the annotation. Returns PdfPageObject A PdfPageObject representing the object at the specified index, or null if no object exists at the given index. GetObjectCount() Gets the total number of objects associated with the annotation. public int GetObjectCount() Returns int The number of objects associated with the annotation. Returns 0 if no objects are present. Remarks This method retrieves the count of objects linked to the annotation represented by the current instance. GetRect() Retrieves the rectangular bounds of the annotation. public FsRectF GetRect() Returns FsRectF A FsRectF structure representing the annotation's rectangular bounds. Exceptions dotPDFiumException Thrown if the annotation rectangle could not be retrieved. GetStringValue(string) Retrieves the string value associated with the specified key from the annotation. public string? GetStringValue(string key) Parameters key string The key identifying the string value to retrieve. This parameter cannot be null or whitespace. Returns string The string value associated with the specified key, or null if the key does not exist or the value cannot be retrieved. Remarks The returned string is decoded from a null-terminated UTF-8 byte array. If the key is not found or the retrieval fails, the method returns null. Exceptions ArgumentNullException Thrown if key is null or consists only of whitespace. GetSubtype() Retrieves the subtype of the PDF annotation represented by this instance. public PdfAnnotationSubtype GetSubtype() Returns PdfAnnotationSubtype A PdfAnnotationSubtype value representing the annotation's subtype. Exceptions dotPDFiumException Thrown if the annotation subtype is not recognized or is not defined in the PdfAnnotationSubtype enumeration. GetValueType(string) Retrieves the type of the value associated with the specified key in the PDF annotation. public PdfValueType GetValueType(string key) Parameters key string The key identifying the value whose type is to be retrieved. Cannot be null or empty. Returns PdfValueType A PdfValueType representing the type of the value associated with the specified key. Remarks This method queries the underlying PDF annotation to determine the type of the value associated with the given key. Ensure that the key exists in the annotation to avoid unexpected results. GetVertices() Retrieves the vertices of the annotation as a read-only list of points. public IReadOnlyList<FsPointF> GetVertices() Returns IReadOnlyList<FsPointF> A read-only list of FsPointF representing the vertices of the annotation. The list will be empty if no vertices are defined. Remarks This method returns the vertices of the annotation, represented as a collection of FsPointF structures. If the annotation does not have any vertices, an empty list is returned. HasAttachmentPoints() Determines whether the annotation has attachment points. public bool HasAttachmentPoints() Returns bool true if the annotation has attachment points; otherwise, false. Remarks Attachment points are specific locations associated with the annotation, such as coordinates or markers, that may be used for positioning or rendering purposes. HasKey(string) Determines whether the annotation contains a specific key. public bool HasKey(string key) Parameters key string The name of the key to check for. This value cannot be null or empty. Returns bool true if the annotation contains the specified key; otherwise, false. IsObjectSupportedSubtype(PdfAnnotationSubtype) Determines whether the specified annotation subtype is supported. public static bool IsObjectSupportedSubtype(PdfAnnotationSubtype subtype) Parameters subtype PdfAnnotationSubtype The annotation subtype to check for support. Returns bool true if the specified annotation subtype is supported; otherwise, false. IsSupportedSubtype() Determines whether the annotation's subtype is supported. public bool IsSupportedSubtype() Returns bool true if the annotation's subtype is supported; otherwise, false. Remarks This method checks if the current annotation's subtype is recognized and supported by the underlying system. RemoveObject(int) Removes an object at the specified index from the annotation. public bool RemoveObject(int index) Parameters index int The zero-based index of the object to remove. Returns bool true if the object was successfully removed; otherwise, false. Remarks This method attempts to remove an object from the annotation at the specified index. If the index is invalid or the removal operation fails, the method returns false. SetAppearanceStream(PdfAnnotationAppearanceMode, string) Sets the appearance stream for the annotation based on the specified mode and name. public bool SetAppearanceStream(PdfAnnotationAppearanceMode mode, string name) Parameters mode PdfAnnotationAppearanceMode The appearance mode to set, such as normal, rollover, or down. name string The name of the appearance stream to apply. This value cannot be null or empty. Returns bool true if the appearance stream was successfully set; otherwise, false. SetAttachmentPoints(int, FsQuadPointsF) Sets the attachment points for the annotation at the specified index. public bool SetAttachmentPoints(int index, FsQuadPointsF quad) Parameters index int The zero-based index of the attachment point to set. quad FsQuadPointsF The quadrilateral points defining the attachment area. Returns bool true if the attachment points were successfully set; otherwise, false. Remarks The attachment points define the area associated with the annotation. Ensure that the quad parameter is properly initialized before calling this method. SetBorder(float, float, float) Sets the border properties for the annotation, including corner radii and border width. public bool SetBorder(float horizontalRadius, float verticalRadius, float borderWidth) Parameters horizontalRadius float The horizontal radius of the annotation's border corners. Must be non-negative. verticalRadius float The vertical radius of the annotation's border corners. Must be non-negative. borderWidth float The width of the annotation's border. Must be non-negative. Returns bool true if the border properties were successfully set; otherwise, false. Remarks This method modifies the visual appearance of the annotation by setting its border properties. Ensure that the annotation handle is valid before calling this method. SetColor(RgbaColor) Sets the color of the annotation using the specified RGBA color. public void SetColor(RgbaColor color) Parameters color RgbaColor The RgbaColor structure representing the red, green, blue, and alpha components of the color to apply to the annotation. Exceptions dotPDFiumException Thrown if the operation fails to set the annotation color. SetRect(FsRectF) Sets the rectangular bounds of the annotation. public void SetRect(FsRectF rect) Parameters rect FsRectF The rectangle defining the bounds of the annotation. Must be a valid FsRectF structure. Exceptions dotPDFiumException Thrown if the rectangle could not be set due to an internal error. SetUri(string) Sets the URI associated with the annotation. public bool SetUri(string uri) Parameters uri string The URI to associate with the annotation. Must not be null, empty, or consist only of whitespace. Returns bool true if the URI was successfully set; otherwise, false. Exceptions ArgumentException Thrown if uri is null, empty, or consists only of whitespace. UpdateObject(PdfPageObject) Updates the specified PDF page object within the annotation. public bool UpdateObject(PdfPageObject obj) Parameters obj PdfPageObject The PdfPageObject to update. This parameter cannot be null. Returns bool true if the object was successfully updated; otherwise, false. Exceptions ArgumentNullException Thrown if obj is null."
  },
  "api/nebulae.dotPDFium.PdfAttachment.html": {
    "href": "api/nebulae.dotPDFium.PdfAttachment.html",
    "title": "Class PdfAttachment | dotPDFium",
    "summary": "Class PdfAttachment Namespace nebulae.dotPDFium Assembly dotPDFium.dll public class PdfAttachment Inheritance object PdfAttachment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetFile() Retrieves the file contents of the PDF attachment as a byte array. public byte[] GetFile() Returns byte[] A byte array containing the file contents of the PDF attachment. Returns an empty array if the file is not available. Remarks This method performs two passes to retrieve the file contents. The first pass determines the required buffer size, and the second pass reads the actual data into the buffer. If the file cannot be retrieved, an empty byte array is returned. Exceptions dotPDFiumException Thrown if the file contents cannot be retrieved during the second pass. GetName() Retrieves the name of the PDF attachment. public string GetName() Returns string A string containing the name of the attachment. Returns an empty string if the name is not available. Remarks The returned string excludes any null terminator that may be present in the underlying data. GetStringValue(string) Retrieves the string value associated with the specified key from the attachment. public string GetStringValue(string key) Parameters key string The key identifying the string value to retrieve. Cannot be null or empty. Returns string The string value associated with the specified key, or an empty string if the key does not exist or the value is empty. GetSubtype() Retrieves the subtype of the PDF attachment. public string GetSubtype() Returns string A string representing the subtype of the attachment. Returns an empty string if the subtype is not defined or cannot be retrieved. Remarks The subtype typically provides additional information about the attachment's type or purpose. GetValueType(string) Retrieves the type of value associated with the specified key in the attachment. public AttachmentValueType GetValueType(string key) Parameters key string The key identifying the value in the attachment. Cannot be null or empty. Returns AttachmentValueType The AttachmentValueType representing the type of the value associated with the specified key. HasKey(string) Determines whether the attachment contains a specific key. public bool HasKey(string key) Parameters key string The name of the key to check for. This value cannot be null or empty. Returns bool true if the attachment contains the specified key; otherwise, false. SetFile(byte[], PdfDocument) Associates a file with the current PDF attachment. public void SetFile(byte[] data, PdfDocument doc) Parameters data byte[] The file data to associate with the attachment. Must not be null or empty. doc PdfDocument The PDF document to which the attachment belongs. Must not be null. Remarks This method sets the file data for the current attachment in the specified PDF document. The file data is passed as a byte array and must be valid and non-empty. If the operation fails, a dotPDFiumException is thrown. Exceptions ArgumentException Thrown if data is null or empty. dotPDFiumException Thrown if the file data could not be set on the attachment. SetStringValue(string, string) Sets a string value associated with the specified key. public void SetStringValue(string key, string value) Parameters key string The key identifying the value to set. Cannot be null or empty. value string The string value to associate with the specified key. Cannot be null. Remarks This method associates a string value with a given key. If the operation fails, an exception is thrown. Ensure that both key and value are valid and non-null before calling this method. Exceptions dotPDFiumException Thrown if the operation fails to set the string value for the specified key."
  },
  "api/nebulae.dotPDFium.PdfBitmap.html": {
    "href": "api/nebulae.dotPDFium.PdfBitmap.html",
    "title": "Class PdfBitmap | dotPDFium",
    "summary": "Class PdfBitmap Namespace nebulae.dotPDFium Assembly dotPDFium.dll The PdfBitmap class represents a bitmap image in the PDFium library. It provides methods to create and manipulate bitmap images from PDF pages. public class PdfBitmap : PdfObject, IDisposable Inheritance object PdfObject PdfBitmap Implements IDisposable Inherited Members PdfObject._handle PdfObject._type PdfObject._disposed PdfObject.Handle PdfObject.Type PdfObject.IsDisposed PdfObject.GetPDFiumError() PdfObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Buffer Gets a pointer to the memory buffer containing the raw image data of the PDF bitmap. public nint Buffer { get; } Property Value nint Remarks The buffer is managed by the underlying PDF rendering library and should not be modified or freed by the caller. The caller is responsible for ensuring the associated bitmap handle remains valid while accessing the buffer. Format Gets the format of the bitmap, which indicates the color depth and pixel format. public PdfBitmapFormat Format { get; } Property Value PdfBitmapFormat Height Returns the height of the bitmap in pixels. public int Height { get; } Property Value int Stride Gets the stride of the bitmap, which is the number of bytes in a row of pixel data. public int Stride { get; } Property Value int Width Returns the width of the bitmap in pixels. public int Width { get; } Property Value int Methods Create(int, int, bool) Creates a new bitmap with the specified width, height, and alpha channel support. public static PdfBitmap Create(int width, int height, bool alpha = true) Parameters width int The width of the bitmap in pixels height int The height of the bitmap in pixels alpha bool Whether or not the bitmap should support an alpha channel (transparency) Returns PdfBitmap a new PdfBitmap Exceptions dotPDFiumException Throws on PDFium library error CreateEx(int, int, PdfBitmapFormat, nint, int) Create a bitmap with the specified width, height, format, buffer, and stride. public static PdfBitmap CreateEx(int width, int height, PdfBitmapFormat format, nint buffer, int stride) Parameters width int The width of the bitmap in pixels height int The height of the bitmap in pixels format PdfBitmapFormat The format of the bitmap buffer nint The buffer for the newly created bitmap stride int The stride of the new bitmap (width of a row) Returns PdfBitmap a new PdfBitmap object whose buffer is user-controlled Exceptions dotPDFiumException Dispose(bool) Dispose method. This method is protected and should not be used directly. protected override void Dispose(bool disposing) Parameters disposing bool FillRect(int, int, int, int, uint) Fills a rectangle in the bitmap with the specified color. public void FillRect(int left, int top, int width, int height, uint color) Parameters left int The left pixel parameter of the origin of the rectangle top int The top pixel parameter of the origin of the rectangle width int The width parameter of the rectangle in pixels height int The height parameter of the rectangle in pixels color uint The color to use to fill the rectangle"
  },
  "api/nebulae.dotPDFium.PdfBitmapFormatExtension.html": {
    "href": "api/nebulae.dotPDFium.PdfBitmapFormatExtension.html",
    "title": "Class PdfBitmapFormatExtension | dotPDFium",
    "summary": "Class PdfBitmapFormatExtension Namespace nebulae.dotPDFium Assembly dotPDFium.dll public static class PdfBitmapFormatExtension Inheritance object PdfBitmapFormatExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBytesPerPixel(PdfBitmapFormat) This is a helper method to get the number of bytes per pixel for a given bitmap format. public static int GetBytesPerPixel(this PdfBitmapFormat format) Parameters format PdfBitmapFormat Returns int Exceptions NotSupportedException"
  },
  "api/nebulae.dotPDFium.PdfBookmark.html": {
    "href": "api/nebulae.dotPDFium.PdfBookmark.html",
    "title": "Class PdfBookmark | dotPDFium",
    "summary": "Class PdfBookmark Namespace nebulae.dotPDFium Assembly dotPDFium.dll Represents a bookmark in a PDF document, providing access to its title, hierarchical structure, and associated actions or destinations. public sealed class PdfBookmark Inheritance object PdfBookmark Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks A PdfBookmark allows navigation through the bookmark hierarchy of a PDF document. It provides methods to retrieve child bookmarks, sibling bookmarks, and associated actions or destinations. Bookmarks are typically used to represent a table of contents or navigation points within a PDF document. Properties Title Gets the title of the bookmark represented by this instance. public string Title { get; } Property Value string Methods GetAction() Retrieves the action associated with the current PDF bookmark, if one exists. public PdfAction? GetAction() Returns PdfAction A PdfAction object representing the action associated with the bookmark, or null if no action is associated. Remarks Use this method to obtain the action linked to a bookmark in a PDF document, such as navigating to a specific page or executing a script. If the bookmark does not have an associated action, the method returns null. GetChildCount() Gets the number of child bookmarks associated with the current bookmark. public int GetChildCount() Returns int The number of child bookmarks. Returns 0 if the current bookmark has no children. Remarks Use this method to determine the number of child bookmarks for a given bookmark in a PDF document. This can be useful for navigating or processing hierarchical bookmark structures. GetDestination() Retrieves the destination associated with the current bookmark. public PdfDestination? GetDestination() Returns PdfDestination A PdfDestination object representing the destination linked to the bookmark, or null if no destination is associated. Remarks The destination provides information about the location or view in the PDF document that the bookmark points to. If the bookmark does not have an associated destination, the method returns null. GetFirstChild() Retrieves the first child bookmark of the current bookmark. public PdfBookmark? GetFirstChild() Returns PdfBookmark A PdfBookmark representing the first child bookmark, or null if the current bookmark has no children. Remarks Use this method to navigate the hierarchy of bookmarks in a PDF document. If the current bookmark has no child bookmarks, the method returns null. GetNextSibling() Retrieves the next sibling of the current bookmark in the document's bookmark hierarchy. public PdfBookmark? GetNextSibling() Returns PdfBookmark A PdfBookmark object representing the next sibling of the current bookmark, or null if there is no next sibling. Remarks This method navigates the bookmark hierarchy of the PDF document. If the current bookmark is the last sibling in its level, the method returns null."
  },
  "api/nebulae.dotPDFium.PdfDestination.html": {
    "href": "api/nebulae.dotPDFium.PdfDestination.html",
    "title": "Class PdfDestination | dotPDFium",
    "summary": "Class PdfDestination Namespace nebulae.dotPDFium Assembly dotPDFium.dll Represents a destination within a PDF document, typically used for navigation or linking purposes. public sealed class PdfDestination Inheritance object PdfDestination Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks A destination specifies a particular location within a PDF document, such as a specific page and optionally a position on that page. This class provides access to the page index and location information for the destination. Properties PageIndex Gets the zero-based index of the page associated with the destination. public int PageIndex { get; } Property Value int Methods GetDirectDestinationPage() Retrieves the zero-based index of the destination page directly associated with this object. public int? GetDirectDestinationPage() Returns int? The zero-based index of the destination page if one is associated; otherwise, null. Remarks This method returns null if no valid destination page is associated with the object. GetLocation() Retrieves the location of the destination within the page. public FsPointF? GetLocation() Returns FsPointF? A FsPointF representing the location of the destination within the page, or null if the location cannot be determined. Coordinates will be zero if not explicitly defined. GetView() Retrieves the view mode and parameters associated with the destination. public (PdfDestViewMode ViewMode, float[] Parameters)? GetView() Returns (PdfDestViewMode ViewMode, float[] Parameters)? A tuple containing the PdfDestViewMode and associated parameters, or null if the view information is not available. GetZoom() Retrieves the zoom level of the destination, if explicitly defined. public float? GetZoom() Returns float? The zoom factor if defined, otherwise null. TryGetDirectDestinationPage(out int) Attempts to retrieve the destination page index associated with the current destination object. public bool TryGetDirectDestinationPage(out int pageIndex) Parameters pageIndex int When this method returns, contains the zero-based index of the destination page if the operation succeeds; otherwise, contains a negative value. Returns bool true if the destination page index was successfully retrieved; otherwise, false."
  },
  "api/nebulae.dotPDFium.PdfDocument.html": {
    "href": "api/nebulae.dotPDFium.PdfDocument.html",
    "title": "Class PdfDocument | dotPDFium",
    "summary": "Class PdfDocument Namespace nebulae.dotPDFium Assembly dotPDFium.dll public class PdfDocument : PdfObject, IDisposable Inheritance object PdfObject PdfDocument Implements IDisposable Inherited Members PdfObject._handle PdfObject._type PdfObject._disposed PdfObject.Handle PdfObject.Type PdfObject.IsDisposed PdfObject.GetPDFiumError() PdfObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties OpenPageCount Returns the number of open pages in the document. public int OpenPageCount { get; } Property Value int PageCount Returns the number of pages in the document. public int PageCount { get; } Property Value int Methods AddAttachment(string) Adds a new attachment to the PDF document. public PdfAttachment AddAttachment(string name) Parameters name string The name of the attachment to be added. This must be a non-empty string. Returns PdfAttachment A PdfAttachment object representing the newly added attachment. Remarks The name parameter must be unique within the document. If an attachment with the same name already exists, the behavior is undefined. Ensure that the provided name is valid and does not conflict with existing attachments. Exceptions dotPDFiumException Thrown if the attachment could not be added to the document. Close() Closes the current PdfDocument instance and releases the resources associated with it. public void Close() CopyViewerPreferencesFrom(PdfDocument) Copies the viewer preferences (e.g., page layout, UI hints) from another PDF document. public void CopyViewerPreferencesFrom(PdfDocument source) Parameters source PdfDocument The document from which to copy viewer preferences. Exceptions ArgumentNullException Thrown if source is null. dotPDFiumException Thrown if the copy operation fails. CreateImageObject() Creates a new image object for use in a PDF document. public PdfImageObject CreateImageObject() Returns PdfImageObject A PdfImageObject representing the newly created image object. Exceptions dotPDFiumException Thrown if the image object could not be created due to an error in the underlying PDF library. CreateNew() Creates a new PDF document. This method initializes a new PDF document and returns a new document object. public static PdfDocument CreateNew() Returns PdfDocument A new PdfDocument Exceptions dotPDFiumException Throws on PDFium library error. CreatePage(int, float, float) Creates a new page in the document at the specified index with the specified width and height. public PdfPage CreatePage(int index, float width, float height) Parameters index int index == 0 will insert a new page at the beginning; index == PageCount will append a new page to the end, and index = N inserts the page before existing page N. Page indexes may shift, so be cautious width float The width of the page to insert in points (1/72 of an inch) height float The height of the page to insert in points (1/72 of an inch) Returns PdfPage CreatePathObject() Creates a new path object for use in a PDF document. public PdfPathObject CreatePathObject() Returns PdfPathObject A PdfPathObject representing the newly created path object. Exceptions dotPDFiumException Thrown if the path object could not be created due to an error in the underlying PDF library. CreateRectObject(float, float, float, float) Creates a new rectangular path object with the specified dimensions. public PdfPathObject CreateRectObject(float x, float y, float width, float height) Parameters x float The x-coordinate of the lower-left corner of the rectangle. y float The y-coordinate of the lower-left corner of the rectangle. width float The width of the rectangle. Must be greater than 0. height float The height of the rectangle. Must be greater than 0. Returns PdfPathObject A PdfPathObject representing the created rectangle. Remarks The rectangle is defined in the coordinate space of the PDF page. Ensure that the provided dimensions are valid and fit within the desired page area. Exceptions dotPDFiumException Thrown if the rectangle object could not be created due to an internal error. CreateStandardTextObject(string, float) Creates a new text objecct in the document. This method creates a new text object with the specified font and font size. The text object can then be added to a page or manipulated as needed. public PdfTextObject CreateStandardTextObject(string fontName, float fontSize) Parameters fontName string Name of the font to use fontSize float Size of the font to use Returns PdfTextObject a new PdfTextObject Exceptions dotPDFiumException Thrown on PDFium library error CreateTextObject(PdfFont, float) Creates a new text object in the document. This method creates a new text object with the specified font and font size. The text object can then be added to a page or manipulated as needed. public PdfTextObject CreateTextObject(PdfFont font, float fontSize) Parameters font PdfFont The PdfFont to apply to the text object fontSize float The font size Returns PdfTextObject a new PdfTextObject Exceptions ArgumentNullException Throws if the specified font is null ArgumentOutOfRangeException Throws if the font size is <= 0 dotPDFiumException Throws on PDFium library error DeleteAttachment(int) Deletes the attachment at the specified index from the PDF document. public void DeleteAttachment(int index) Parameters index int The zero-based index of the attachment to delete. Exceptions dotPDFiumException Thrown if the attachment cannot be deleted. The exception message will include the specific error details. DeletePage(int) Deletes a page from the document at the specified index. This method will shift the indexes of all subsequent pages. public void DeletePage(int index) Parameters index int Dispose(bool) Called when the PdfDocument is disposed. This method is responsible for releasing the resources used by the PdfDocument instance, including closing any open pages and freeing the native resources associated with the document. protected override void Dispose(bool disposing) Parameters disposing bool FindBookmark(string) public PdfBookmark? FindBookmark(string title) Parameters title string Returns PdfBookmark GetAdditionalAction(PdfPageAActionType) Retrieves the additional action associated with the specified page action type. public PdfAction? GetAdditionalAction(PdfPageAActionType type) Parameters type PdfPageAActionType The type of page action to retrieve. This specifies the event for which the additional action is defined. Returns PdfAction A PdfAction representing the additional action for the specified page action type, or null if no additional action is defined for the specified type. GetAttachment(int) Retrieves the attachment at the specified index from the PDF document. public PdfAttachment GetAttachment(int index) Parameters index int The zero-based index of the attachment to retrieve. Must be within the valid range of available attachments. Returns PdfAttachment A PdfAttachment object representing the attachment at the specified index. Remarks Use this method to access attachments embedded in the PDF document. Ensure that the index is within the range of available attachments to avoid exceptions. Exceptions dotPDFiumException Thrown if no attachment exists at the specified index. GetAttachmentCount() Gets the total number of attachments in the PDF document. public int GetAttachmentCount() Returns int The number of attachments in the PDF document. Returns 0 if the document contains no attachments. GetFileIdentifier(uint) Retrieves the file identifier associated with the document. public byte[]? GetFileIdentifier(uint idType = 0) Parameters idType uint The type of file identifier to retrieve. Use 0 to retrieve the primary identifier, or other values as defined by the document specification. Returns byte[] A byte array containing the file identifier, or null if no identifier is available. Remarks File identifiers are typically used to uniquely identify a document. The returned identifier may vary depending on the idType specified. GetFileVersion() Retrieves the version number of the PDF file associated with the current instance. public int? GetFileVersion() Returns int? The version number of the PDF file if it is successfully retrieved; otherwise, null. Remarks The version number corresponds to the PDF specification version of the file. For example, a version number of 1 indicates PDF 1.x. GetFirstPageIndex() Gets the index of the first page for linearized viewing. public int GetFirstPageIndex() Returns int The zero-based page index (typically 0). GetMetadata(string) Retrieves the metadata value associated with the specified tag from the PDF document. public string? GetMetadata(string tag) Parameters tag string The metadata tag to retrieve. Common tags include \"Title\", \"Author\", and \"Subject\". Returns string The metadata value as a string, or null if the specified tag does not exist or has no value. Remarks The returned string excludes any null terminator that may be present in the underlying data. GetNamedDestination(int) Retrieves the named destination at the specified index within the PDF document. public (string Name, PdfDestination? Destination)? GetNamedDestination(int index) Parameters index int The zero-based index of the named destination to retrieve. Returns (string Name, PdfDestination Destination)? A tuple containing the name of the destination and a PdfDestination object representing the destination, or null if the index is out of range or the destination cannot be retrieved. Remarks Named destinations are predefined locations within a PDF document that can be used for navigation. The method returns null if the specified index does not correspond to a valid named destination. GetNamedDestinationByName(string) Retrieves a named destination from the PDF document by its name. public PdfDestination? GetNamedDestinationByName(string name) Parameters name string The name of the destination to retrieve. This value cannot be null or empty. Returns PdfDestination A PdfDestination object representing the named destination if found; otherwise, null. Remarks Named destinations are predefined locations within the PDF document that can be used for navigation. Use this method to retrieve a destination by its name for further processing or navigation. GetNamedDestinationCount() Returns the number of named destinations defined in this document. public int GetNamedDestinationCount() Returns int GetPageLabel(int) Retrieves the label associated with the specified page index in the document. public string? GetPageLabel(int pageIndex) Parameters pageIndex int The zero-based index of the page for which to retrieve the label. Returns string The label of the specified page as a string, or null if the page does not have a label. Remarks Page labels are often used to display custom page numbering or names in a document. If no label is defined for the specified page, the method returns null. GetPageMode() Retrieves the page mode of the PDF document. public PdfPageMode GetPageMode() Returns PdfPageMode A PdfPageMode value representing the page mode of the document. Returns Unknown if the page mode is not defined or cannot be determined. Remarks The page mode specifies how the document should be displayed when opened, such as whether bookmarks, thumbnails, or other navigation panels are shown. GetPageSizeByIndex(int) Retrieves the size of a page in the document specified by its index as double-precision floating-point units. public FsSize GetPageSizeByIndex(int pageIndex) Parameters pageIndex int The zero-based index of the page whose size is to be retrieved. Must be within the range of available pages. Returns FsSize An FsSize object representing the width and height of the specified page, in points. Exceptions ObjectDisposedException Thrown if the document has been disposed and is no longer accessible. ArgumentOutOfRangeException Thrown if pageIndex is less than 0 or greater than or equal to the total number of pages in the document. dotPDFiumException Thrown if the page size could not be retrieved due to an error in the underlying PDF library. GetPageSizeByIndexF(int) Retrieves the size of the page at the specified index in floating-point units. public FsSizeF GetPageSizeByIndexF(int pageIndex) Parameters pageIndex int The zero-based index of the page whose size is to be retrieved. Must be within the range of available pages. Returns FsSizeF An FsSizeF structure representing the width and height of the specified page in floating-point units. Exceptions ObjectDisposedException Thrown if the PdfDocument has been disposed. ArgumentOutOfRangeException Thrown if pageIndex is less than 0 or greater than or equal to the total number of pages in the document. dotPDFiumException Thrown if the page size could not be retrieved due to an internal error. GetParsedPrintPageRange() Retrieves the print page range specified in the PDF viewer preferences. public PdfPrintPageRange? GetParsedPrintPageRange() Returns PdfPrintPageRange A PdfPrintPageRange object representing the print page range if specified; otherwise, null if no print page range is defined. Remarks This method checks the PDF viewer preferences for a defined print page range and returns it as a PdfPrintPageRange object. If no range is specified, the method returns null. GetPermissions() Retrieves the permissions associated with the current PDF document. public uint GetPermissions() Returns uint A 32-bit unsigned integer representing the permissions of the PDF document. The value is a bitmask where each bit indicates a specific permission, such as printing, copying, or modifying the document. Remarks The permissions are determined by the document's security settings. Refer to the PDF specification for details on the meaning of each bit in the returned bitmask. GetPrintScalingAllowed() Gets the print scaling flag defined in the document's viewer preferences. public bool GetPrintScalingAllowed() Returns bool true if the document allows automatic scaling when printed; false if it requests no scaling (actual size). GetRenderedBitmap(PdfPage, PdfTextObject, float) Retrieves a rendered bitmap of the specified text object on a PDF page at the given scale. public nint GetRenderedBitmap(PdfPage page, PdfTextObject text, float scale) Parameters page PdfPage The PdfPage containing the text object to render. Must not be null. text PdfTextObject The PdfTextObject to render as a bitmap. Must not be null. scale float The scale factor to apply when rendering the bitmap. Must be greater than 0. Returns nint A pointer to the rendered bitmap as an nint. The caller is responsible for managing the memory of the returned bitmap. Remarks This method uses the underlying PDF library to render the specified text object into a bitmap. Ensure that the provided page and text objects are valid and associated with the same PDF document. Exceptions dotPDFiumException Thrown if the bitmap could not be rendered due to an error in the underlying PDF library. GetSecurityHandlerRevision() Gets the security handler revision used for encryption, or -1 if the document is not encrypted. public int GetSecurityHandlerRevision() Returns int The revision number (e.g., 2 for RC4-40, 4 for AES-128, 6 for AES-256), or -1 if not encrypted. GetSignatures() Gets all digital signatures defined in this document. public IReadOnlyList<PdfSignature> GetSignatures() Returns IReadOnlyList<PdfSignature> A list of PdfSignature objects. GetSuggestedPrintCopies() Gets the suggested number of copies to print as defined in the document's viewer preferences. public int GetSuggestedPrintCopies() Returns int The suggested number of copies, or 0 if unspecified. GetSuggestedPrintRange() Gets the suggested print page range defined in the viewer preferences (e.g., \"1-3,5\"). public string GetSuggestedPrintRange() Returns string A UTF-8 encoded string with the suggested print range, or an empty string if none is defined. GetTrailerEndOffsets() Retrieves the byte offsets of all trailer dictionaries in the PDF file. public IReadOnlyList<uint> GetTrailerEndOffsets() Returns IReadOnlyList<uint> A list of unsigned 32-bit integers representing the end offsets of each trailer section. Exceptions dotPDFiumException Thrown if the call fails unexpectedly. GetUserPermissions() Retrieves the user permissions for the current PDF document. public uint GetUserPermissions() Returns uint A 32-bit unsigned integer representing the user permissions for the document. The value is a bitmask where each bit corresponds to a specific permission, such as printing, copying, or modifying the document. Remarks The permissions are determined by the document's security settings. Refer to the PDF specification for details on the meaning of each bit in the bitmask. GetViewerDuplexPreference() Gets the duplex printing preference defined in the document's viewer preferences. public PdfDuplexType GetViewerDuplexPreference() Returns PdfDuplexType The PdfDuplexType specified by the document. GetViewerPreferenceName(string) Retrieves a raw name value from the document's /ViewerPreferences dictionary. public string GetViewerPreferenceName(string key) Parameters key string The name key to query (e.g., \"Direction\", \"PrintScaling\"). Returns string The associated name string, or an empty string if not present or invalid. Exceptions ArgumentNullException Thrown if the key is null or empty. dotPDFiumException Thrown if decoding fails despite valid key. HasValidCrossReferenceTable() Checks whether the PDF document has a valid cross-reference table or stream. public bool HasValidCrossReferenceTable() Returns bool true if the cross-reference structure is valid; otherwise, false. ImportNPagesToOne(PdfDocument, float, float, int, int) Creates a new PDF document by importing pages from an existing document arranged in an N-up layout. public static PdfDocument ImportNPagesToOne(PdfDocument source, float width, float height, int columns, int rows) Parameters source PdfDocument The source document to import pages from. width float The width of the output composite page in points. height float The height of the output composite page in points. columns int Number of pages horizontally. rows int Number of pages vertically. Returns PdfDocument A new PdfDocument containing a single composite page. Exceptions ArgumentNullException Thrown if the source document is null. dotPDFiumException Thrown if the operation fails. ImportPagesFrom(PdfDocument, string, int) Imports pages from another document into this one, starting at the given index. public void ImportPagesFrom(PdfDocument source, string pageRange, int insertAtIndex) Parameters source PdfDocument The source document to import pages from. pageRange string Page range string (e.g., \"1-3,5\"). Must use 1-based indexing. insertAtIndex int Zero-based index to insert pages into this document. Exceptions ArgumentNullException Thrown if source or pageRange is null. dotPDFiumException Thrown if the operation fails. ImportPagesFromByIndex(PdfDocument, int[], int) Imports specific pages (by zero-based index) from another document into this one. public void ImportPagesFromByIndex(PdfDocument source, int[] pageIndices, int insertAtIndex) Parameters source PdfDocument The source PDF document. pageIndices int[] Array of zero-based page indices to import. insertAtIndex int Zero-based insertion point in the destination document. Exceptions ArgumentNullException Thrown if source or pageIndices is null. ArgumentException Thrown if the pageIndices array is empty. dotPDFiumException Thrown if the import fails. IsTagged() Determines whether the document is tagged (i.e., contains a structure tree). public bool IsTagged() Returns bool true if the document is tagged; otherwise false. LoadCidType2Font(byte[], string, string, byte[]?) Loads a CIDType2 font into the PDF document. public PdfFont LoadCidType2Font(byte[] fontData, string name, string toUnicodeCMap = \"\", byte[]? cidToGidMap = null) Parameters fontData byte[] The font data as a byte array. This cannot be null or empty. name string The name of the font to be used in the PDF document. toUnicodeCMap string An optional string representing the ToUnicode CMap, which maps character codes to Unicode values. If not provided, an empty string is used. cidToGidMap byte[] An optional byte array representing the CID-to-GID map, which maps character identifiers (CIDs) to glyph identifiers (GIDs). If not provided, an empty array is used. Returns PdfFont A PdfFont object representing the loaded CIDType2 font. Remarks CIDType2 fonts are commonly used for embedding TrueType fonts in PDF documents. Ensure that the provided font data is valid and compatible with the PDF library. Exceptions ArgumentException Thrown if fontData is null or empty. dotPDFiumException Thrown if the font fails to load due to an error in the underlying PDF library. LoadEmbeddedFont(byte[], PdfFontType, bool) Loads an embedded font into the document for use with text objects. This method loads a font from a byte array. public PdfEmbeddedFont LoadEmbeddedFont(byte[] fontData, PdfFontType fontType, bool isCid = false) Parameters fontData byte[] The font data as a byte array fontType PdfFontType The type of font isCid bool Whether the font is a character identifier font Returns PdfEmbeddedFont A new PdfEmbeddedFont object Exceptions ArgumentException Throws if font data is null or empty dotPDFiumException Throws on PDFium library error LoadFromFile(string, string?) Loads a PDF document from a file. The file path must be valid and the file must exist. public static PdfDocument LoadFromFile(string filePath, string? password = null) Parameters filePath string Path to the file to load password string Password to the file being loaded Returns PdfDocument PdfDocument on success Exceptions ArgumentException Thrown on null or empty filePath dotPDFiumException Thrown on PDFium library error LoadFromMemory(byte[], string?) Loads a PDF document from a byte array. The byte array must not be null or empty. public static PdfDocument LoadFromMemory(byte[] buffer, string? password = null) Parameters buffer byte[] The byte array containing the PDF document password string Password to the file being loaded Returns PdfDocument PdfDocument on success Exceptions ArgumentException Thrown if the byte array is null or empty dotPDFiumException Thrown on PDFium library error LoadPage(int) Returns the page from the document at the specified index. public PdfPage LoadPage(int pageIndex) Parameters pageIndex int The index of the page to load Returns PdfPage PdfPage on success Exceptions ArgumentOutOfRangeException Thrown if the page index specified is out of range dotPDFiumException Thrown on PDFium library error LoadStandardFont(string) Loads a font into the document for use with text objects. This method loads a standard font, such as \"Arial\" or \"Times-Roman\". public PdfFont LoadStandardFont(string fontName) Parameters fontName string The name of the font to load Returns PdfFont a PdfFont object Exceptions ArgumentException Throws if the font name is null or empty dotPDFiumException Throws on PDFium library error MovePages(int[], int) Moves the specified pages to a new position within the document. public void MovePages(int[] pageIndices, int destinationIndex) Parameters pageIndices int[] An array of zero-based indices representing the pages to move. Must contain at least one index. destinationIndex int The zero-based index where the pages will be moved. The pages will be inserted before this index. Remarks The order of the pages in pageIndices is preserved during the move operation. Ensure that the indices are valid and within the bounds of the document's page count. Exceptions ArgumentException Thrown if pageIndices is null or empty. dotPDFiumException Thrown if the operation fails to move the pages. ResolvePage(nint) Resolves a PDF page from the specified handle. public PdfPage? ResolvePage(nint pageHandle) Parameters pageHandle nint The handle of the page to resolve. Returns PdfPage The PdfPage instance associated with the specified handle if it is currently open; otherwise, null. Remarks This method searches through the collection of open pages to find a match for the provided handle. If the handle does not correspond to any open page, the method returns null. SaveTo(string, bool) Saves the current PDF document to the specified file path. public bool SaveTo(string path, bool incremental = false) Parameters path string The path to write the document to incremental bool Whether to append changes to the PDF or to re-encode the entire PDF Returns bool true on success, false on failure SaveWithVersion(string, PdfFileVersion) Saves the current PDF document to the specified file path with a specific PDF version. public bool SaveWithVersion(string path, PdfFileVersion fileVersion) Parameters path string fileVersion PdfFileVersion Returns bool true on success, false on failure SetDefaultLanguage(string) Sets the document-level default language in the PDF catalog (/Lang). public bool SetDefaultLanguage(string language) Parameters language string The BCP 47 language tag (e.g., \"en-US\", \"fr-FR\"). Returns bool true if the language was successfully set; otherwise false. TryLoadFromFile(string, out PdfDocument?, string?) Loads a PDF document from a file. The file path must be valid and the file must exist. public static bool TryLoadFromFile(string filePath, out PdfDocument? document, string? password = null) Parameters filePath string Path to the file to load document PdfDocument The out variable to receive the PdfDocument object password string Password to the file being loaded Returns bool true on success, false on failure TryLoadFromMemory(byte[], out PdfDocument?, string?) Loads a PDF document from a byte array. The byte array must not be null or empty. public static bool TryLoadFromMemory(byte[] buffer, out PdfDocument? document, string? password = null) Parameters buffer byte[] The byte array containing the PDF document document PdfDocument The out variable to receive the PdfDocument object password string Password to the file being loaded Returns bool true on success, false on failure TryLoadPage(int, out PdfPage?) Returns the page from the document at the specified index. public bool TryLoadPage(int pageIndex, out PdfPage? page) Parameters pageIndex int The index of the page to load page PdfPage The out variable to receive the specfied page Returns bool true on success, false on failure"
  },
  "api/nebulae.dotPDFium.PdfEmbeddedFont.html": {
    "href": "api/nebulae.dotPDFium.PdfEmbeddedFont.html",
    "title": "Class PdfEmbeddedFont | dotPDFium",
    "summary": "Class PdfEmbeddedFont Namespace nebulae.dotPDFium Assembly dotPDFium.dll public sealed class PdfEmbeddedFont : PdfFont, IDisposable Inheritance object PdfObject PdfFont PdfEmbeddedFont Implements IDisposable Inherited Members PdfFont.Name PdfFont.GetBaseFontName() PdfFont.GetFamilyName() PdfFont.GetFontData() PdfFont.IsEmbedded PdfFont.GetFlags() PdfFont.GetWeight() PdfFont.GetItalicAngle() PdfFont.GetAscent(float) PdfFont.GetDescent(float) PdfFont.GetGlyphWidth(uint, float) PdfFont.GetGlyphPath(uint, float) PdfObject.Handle PdfObject.Type PdfObject.IsDisposed PdfObject.GetPDFiumError() PdfObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Dispose(bool) Releases the resources used by the current instance of the class. protected override void Dispose(bool disposing) Parameters disposing bool Are we disposing managed objects? Remarks This method should be called when the instance is no longer needed to free unmanaged resources. It ensures that any associated native resources are properly released based on the type of the object. Exceptions InvalidOperationException Thrown if the object type is not supported for disposal."
  },
  "api/nebulae.dotPDFium.PdfFileSpec.html": {
    "href": "api/nebulae.dotPDFium.PdfFileSpec.html",
    "title": "Class PdfFileSpec | dotPDFium",
    "summary": "Class PdfFileSpec Namespace nebulae.dotPDFium Assembly dotPDFium.dll Represents a file specification in a PDF document. public sealed class PdfFileSpec Inheritance object PdfFileSpec Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks This class provides a representation of a file specification object within a PDF document. File specifications are used to reference external files or embedded files in a PDF. Instances of this class are typically obtained through PDF processing libraries and are not intended to be created directly by user code."
  },
  "api/nebulae.dotPDFium.PdfFont.html": {
    "href": "api/nebulae.dotPDFium.PdfFont.html",
    "title": "Class PdfFont | dotPDFium",
    "summary": "Class PdfFont Namespace nebulae.dotPDFium Assembly dotPDFium.dll Represents a font object in a PDF document, providing access to font properties and metrics. public class PdfFont : PdfObject, IDisposable Inheritance object PdfObject PdfFont Implements IDisposable Derived PdfEmbeddedFont PdfStandardFont Inherited Members PdfObject._handle PdfObject._type PdfObject._disposed PdfObject.Handle PdfObject.Type PdfObject.IsDisposed PdfObject.GetPDFiumError() PdfObject.Dispose() PdfObject.Dispose(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class allows users to retrieve information about a font, such as its name, family, weight, and style, as well as access font data and glyph-specific metrics. It also provides methods to determine whether the font is embedded in the PDF and to retrieve glyph paths for rendering or analysis. Properties IsEmbedded Gets a value indicating whether the font is embedded within the PDF document. public bool IsEmbedded { get; } Property Value bool Remarks An embedded font ensures that the font's appearance is preserved regardless of the availability of the font on the viewing system. Name Gets the name associated with the current instance. public string Name { get; } Property Value string Methods GetAscent(float) Calculates the ascent of the font for the specified font size. public float? GetAscent(float fontSize) Parameters fontSize float The size of the font, in points, for which the ascent is calculated. Must be greater than 0. Returns float? The ascent of the font as a floating-point value, or null if the ascent could not be determined. Remarks The ascent represents the distance from the baseline to the highest point of the font's glyphs for the given font size. GetBaseFontName() Retrieves the base font name of the current font. public string GetBaseFontName() Returns string A string containing the base font name. The returned string represents the name of the font as defined in the PDF document. Returns an empty string if the font name cannot be determined. Remarks The base font name is typically used to identify the font in a PDF document. This method ensures that the font name is read as a UTF-8 encoded string. GetDescent(float) Calculates the descent value for the font at the specified size. public float? GetDescent(float fontSize) Parameters fontSize float The size of the font, in points, for which the descent is calculated. Must be greater than zero. Returns float? The descent value of the font as a float if the calculation is successful; otherwise, null. Remarks The descent value represents the distance from the baseline to the lowest point of the font's glyphs, expressed as a negative value. This method returns null if the calculation fails. GetFamilyName() Retrieves the family name of the font associated with this instance. public string GetFamilyName() Returns string A string containing the family name of the font. Returns an empty string if the family name cannot be determined. Remarks The family name is typically used to identify the general design of the font, such as \"Arial\" or \"Times New Roman\". This method ensures the name is returned as a UTF-8 encoded string. GetFlags() Retrieves the font flags associated with the current font. public int GetFlags() Returns int An integer representing the font flags. The value is a bitmask where each bit represents a specific font property, such as whether the font is fixed-pitch, serif, symbolic, or others. Remarks The returned bitmask can be used to determine various characteristics of the font. For example, specific bits may indicate whether the font is bold, italic, or symbolic. Refer to the PDF specification for details on the meaning of each bit. GetFontData() Retrieves the raw font data associated with the current font. public byte[] GetFontData() Returns byte[] A byte array containing the raw font data. If the font has no data, an empty array is returned. Remarks This method returns the font data as a byte array. If the font has no associated data, an empty array is returned. The caller can use this data for further processing, such as embedding the font in a document or analyzing its structure. Exceptions dotPDFiumException Thrown if the font data cannot be retrieved due to an internal error. GetGlyphPath(uint, float) Retrieves the glyph path for the specified glyph ID and font size. public PdfGlyphPath? GetGlyphPath(uint glyphId, float fontSize) Parameters glyphId uint The ID of the glyph to retrieve the path for. fontSize float The size of the font, in points, used to scale the glyph path. Returns PdfGlyphPath A PdfGlyphPath object representing the path of the specified glyph, or null if the glyph path could not be retrieved. Remarks The glyph path represents the vector outline of the glyph, which can be used for rendering or analysis. Ensure that the font size is a positive value to avoid unexpected behavior. GetGlyphWidth(uint, float) Retrieves the width of a specified glyph at a given font size. public float? GetGlyphWidth(uint glyphId, float fontSize) Parameters glyphId uint The identifier of the glyph whose width is to be retrieved. fontSize float The size of the font, in points, used to calculate the glyph's width. Must be greater than 0. Returns float? The width of the glyph as a float if the operation succeeds; otherwise, null. Remarks This method queries the width of a glyph using the underlying font handle. The result is dependent on the font's metrics and the specified font size. If the glyph ID is invalid or the operation fails, the method returns null. GetItalicAngle() Retrieves the italic angle of the font. public int? GetItalicAngle() Returns int? The italic angle of the font in degrees, or null if the angle cannot be determined. A positive value indicates a right-leaning italic angle, while a negative value indicates a left-leaning italic angle. GetWeight() Gets the weight of the font. public int GetWeight() Returns int An integer representing the weight of the font. The value typically ranges from 100 (Thin) to 900 (Black), where higher values indicate a bolder font weight. Remarks The font weight is a numerical representation of the font's thickness or boldness. This value can be used to determine the visual style of the font in rendering or layout operations."
  },
  "api/nebulae.dotPDFium.PdfFontInfo.html": {
    "href": "api/nebulae.dotPDFium.PdfFontInfo.html",
    "title": "Class PdfFontInfo | dotPDFium",
    "summary": "Class PdfFontInfo Namespace nebulae.dotPDFium Assembly dotPDFium.dll public class PdfFontInfo Inheritance object PdfFontInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PdfFontInfo(string, int) public PdfFontInfo(string name, int flags) Parameters name string flags int Properties Flags public int Flags { get; } Property Value int Name public string Name { get; } Property Value string"
  },
  "api/nebulae.dotPDFium.PdfFontRegistry.html": {
    "href": "api/nebulae.dotPDFium.PdfFontRegistry.html",
    "title": "Class PdfFontRegistry | dotPDFium",
    "summary": "Class PdfFontRegistry Namespace nebulae.dotPDFium Assembly dotPDFium.dll Manages system font registration and integration with the PDFium engine. public static class PdfFontRegistry Inheritance object PdfFontRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddInstalledFont(string, int) Registers an installed font with the specified face name and charset. public static void AddInstalledFont(string faceName, int charset = 0) Parameters faceName string Font face name (e.g., 'Arial') charset int Windows charset code, usually 0 (ANSI) Dispose() Frees the font system resources. Call this once on shutdown. public static void Dispose() GetInstalledFontNames() public static IEnumerable<string> GetInstalledFontNames() Returns IEnumerable<string> Initialize() Initializes the font registry using PDFium's default system font provider. public static void Initialize()"
  },
  "api/nebulae.dotPDFium.PdfGetBlockDelegate.html": {
    "href": "api/nebulae.dotPDFium.PdfGetBlockDelegate.html",
    "title": "Delegate PdfGetBlockDelegate | dotPDFium",
    "summary": "Delegate PdfGetBlockDelegate Namespace nebulae.dotPDFium Assembly dotPDFium.dll Delegate to read data into a buffer from a backing source (Stream, network, etc.). Used with FPDF_FILEACCESS. public delegate int PdfGetBlockDelegate(nint userData, uint offset, nint buffer, uint size) Parameters userData nint Delegate to read data into a buffer from a backing source (Stream, network, etc.). Used with FPDF_FILEACCESS. offset uint Delegate to read data into a buffer from a backing source (Stream, network, etc.). Used with FPDF_FILEACCESS. buffer nint Delegate to read data into a buffer from a backing source (Stream, network, etc.). Used with FPDF_FILEACCESS. size uint Delegate to read data into a buffer from a backing source (Stream, network, etc.). Used with FPDF_FILEACCESS. Returns int Delegate to read data into a buffer from a backing source (Stream, network, etc.). Used with FPDF_FILEACCESS."
  },
  "api/nebulae.dotPDFium.PdfGlyphPath.html": {
    "href": "api/nebulae.dotPDFium.PdfGlyphPath.html",
    "title": "Class PdfGlyphPath | dotPDFium",
    "summary": "Class PdfGlyphPath Namespace nebulae.dotPDFium Assembly dotPDFium.dll Represents a glyph path in a PDF document, providing access to its segments. public sealed class PdfGlyphPath Inheritance object PdfGlyphPath Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks A glyph path is a series of segments that define the shape of a character or symbol in a PDF. This class allows you to retrieve individual segments or enumerate all segments in the glyph path. Properties SegmentCount Gets the number of segments in the glyph path associated with the current PDF element. public int SegmentCount { get; } Property Value int Methods GetSegment(int) Retrieves the glyph path segment at the specified index. public PdfGlyphPathSegment GetSegment(int index) Parameters index int The zero-based index of the segment to retrieve. Must be greater than or equal to 0 and less than SegmentCount. Returns PdfGlyphPathSegment A PdfGlyphPathSegment representing the glyph path segment at the specified index. Exceptions ArgumentOutOfRangeException Thrown if index is less than 0 or greater than or equal to SegmentCount. dotPDFiumException Thrown if the segment cannot be retrieved due to an internal error. GetSegments() Retrieves all glyph path segments in the current collection. public IEnumerable<PdfGlyphPathSegment> GetSegments() Returns IEnumerable<PdfGlyphPathSegment> An IEnumerable<T> of PdfGlyphPathSegment objects representing the glyph path segments. Remarks This method lazily enumerates the glyph path segments, yielding each segment one at a time. It is suitable for scenarios where processing segments incrementally is preferred."
  },
  "api/nebulae.dotPDFium.PdfGlyphPathSegment.html": {
    "href": "api/nebulae.dotPDFium.PdfGlyphPathSegment.html",
    "title": "Struct PdfGlyphPathSegment | dotPDFium",
    "summary": "Struct PdfGlyphPathSegment Namespace nebulae.dotPDFium Assembly dotPDFium.dll public readonly struct PdfGlyphPathSegment Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Handle public nint Handle { get; } Property Value nint"
  },
  "api/nebulae.dotPDFium.PdfImageObject.html": {
    "href": "api/nebulae.dotPDFium.PdfImageObject.html",
    "title": "Class PdfImageObject | dotPDFium",
    "summary": "Class PdfImageObject Namespace nebulae.dotPDFium Assembly dotPDFium.dll public class PdfImageObject : PdfPageObject, IDisposable Inheritance object PdfObject PdfPageObject PdfImageObject Implements IDisposable Inherited Members PdfPageObject._hasOwner PdfPageObject.GetMarkedContentId() PdfPageObject.Transform(FsMatrix) PdfPageObject.SetPosition(double, double) PdfPageObject.ScaleBy(double, double) PdfPageObject.ScaleTo(double, double) PdfPageObject.TransformF(FsMatrixF) PdfPageObject.SetPositionF(float, float) PdfPageObject.ScaleByF(float, float) PdfPageObject.ScaleToF(float, float) PdfPageObject.GetIsActive() PdfPageObject.SetIsActive(bool) PdfPageObject.GetBounds() PdfPageObject.GetFillColor() PdfPageObject.SetFillColor(RgbaColor) PdfPageObject.GetMatrixF() PdfPageObject.SetMatrix(FsMatrixF) PdfPageObject.GetRotatedBounds() PdfPageObject.GetStrokeColor() PdfPageObject.SetStrokeColor(RgbaColor) PdfPageObject.GetStrokeWidth() PdfPageObject.SetStrokeWidth(float) PdfPageObject.HasTransparency() PdfPageObject.GetClipPath() PdfPageObject.TransformClipPath(FsMatrix) PdfPageObject.AddMark(string) PdfPageObject.RemoveMark(PdfMark) PdfPageObject.GetMarkCount() PdfPageObject.GetMark(int) PdfPageObject.Dispose(bool) PdfObject._handle PdfObject._type PdfObject._disposed PdfObject.Handle PdfObject.Type PdfObject.IsDisposed PdfObject.GetPDFiumError() PdfObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDecodedImageData() Retrieves the decoded image data from the PDF image object. public byte[] GetDecodedImageData() Returns byte[] A byte array containing the decoded image data. Returns an empty array if no image data is available. Exceptions dotPDFiumException Thrown if the decoded image data cannot be retrieved due to an error in the underlying PDF library. GetIccProfileData(PdfPage) Retrieves the ICC (International Color Consortium) profile data associated with the specified PDF page. public byte[] GetIccProfileData(PdfPage page) Parameters page PdfPage The PdfPage object representing the PDF page from which to extract the ICC profile data. Returns byte[] A byte array containing the ICC profile data. Returns an empty array if no ICC profile data is available. Remarks The ICC profile data is used to define the color characteristics of the PDF content. This method first determines the required buffer size for the ICC profile data and then retrieves the data if available. Exceptions dotPDFiumException Thrown if the ICC profile data cannot be retrieved due to an error in the underlying PDF processing library. GetImageFilter(int) Retrieves the name of the image filter applied to the image at the specified index. public string GetImageFilter(int index) Parameters index int The zero-based index of the image filter to retrieve. Returns string A string representing the name of the image filter. The string is encoded in ASCII and does not include a null terminator. Remarks The method retrieves the name of the image filter associated with an image object in a PDF. The index must correspond to a valid filter applied to the image; otherwise, an exception is thrown. Exceptions dotPDFiumException Thrown if the image filter cannot be retrieved for the specified index. GetImageFilterCount() Gets the number of image filters applied to the current image object. public int GetImageFilterCount() Returns int The total number of image filters applied. Returns 0 if no filters are applied. Remarks This method retrieves the count of filters associated with the image object represented by this instance. Use this method to determine how many filters are applied before accessing individual filter details. GetImagePixelSize() Retrieves the pixel dimensions of the image associated with this object. public FsSize GetImagePixelSize() Returns FsSize An FsSize structure representing the width and height of the image in pixels. Exceptions dotPDFiumException Thrown if the image pixel dimensions cannot be retrieved. GetRawImageData() Retrieves the raw image data from the PDF image object. public byte[] GetRawImageData() Returns byte[] A byte array containing the raw image data. If the image object has no data, an empty array is returned. Remarks This method returns the raw byte data of the image associated with the PDF image object. If the image object contains no data, an empty byte array is returned. Exceptions dotPDFiumException Thrown if the raw image data cannot be retrieved due to an error in the underlying PDF library. GetRenderedBitmap(PdfDocument, PdfPage) Retrieves the rendered bitmap representation of the current image object on the specified PDF page. public PdfBitmap? GetRenderedBitmap(PdfDocument doc, PdfPage page) Parameters doc PdfDocument The PDF document containing the page and image object. Cannot be null. page PdfPage The PDF page containing the image object. Cannot be null. Returns PdfBitmap A PdfBitmap representing the rendered image object, or null if the rendering fails. Remarks The dimensions of the returned bitmap are not known and must be determined by the caller if needed. LoadJpeg(PdfPage?, PdfFileAccess) Loads a JPEG image into the current PDF image object. public void LoadJpeg(PdfPage? page, PdfFileAccess access) Parameters page PdfPage The PdfPage instance representing the page where the image will be loaded. Can be null if the image is not associated with a specific page. access PdfFileAccess A PdfFileAccess object that provides access to the JPEG file. This object must remain valid for the duration of the operation. Remarks This method uses the native PDFium library to load a JPEG image into the current image object. If a page is specified, the image will be associated with that page. Ensure that the access object provides valid access to the JPEG file. Exceptions dotPDFiumException Thrown if the JPEG image fails to load into the PDF image object. LoadJpegInline(PdfPage?, PdfFileAccess) Loads a JPEG image into the current PDF image object inline. public void LoadJpegInline(PdfPage? page, PdfFileAccess fileAccess) Parameters page PdfPage The PdfPage to associate with the image, or null if no specific page is associated. fileAccess PdfFileAccess The FPDF_FILEACCESS structure providing access to the JPEG file. Remarks This method attempts to load a JPEG image directly into the PDF image object. If a page is provided, the image is associated with that page. If no page is provided, the image is loaded without a specific page association. Ensure that the fileAccess parameter is properly configured to provide access to the JPEG file. Exceptions dotPDFiumException Thrown if the JPEG image could not be loaded into the image object inline. SetBitmap(PdfBitmap, PdfPage?) Sets the specified bitmap as the content of this image object. public void SetBitmap(PdfBitmap bitmap, PdfPage? page = null) Parameters bitmap PdfBitmap The PdfBitmap to set as the image content. Cannot be null. page PdfPage The PdfPage associated with the bitmap, or null if the bitmap is not tied to a specific page. Remarks If a page is provided, the bitmap will be associated with that page. If no page is specified, the bitmap will be set without a specific page context. Exceptions dotPDFiumException Thrown if the operation fails due to an error in the underlying PDF library. SetBlendMode(string) Sets the blend mode for this page object. Valid values are \"Normal\" (default), \"Multiply\", \"Screen\", \"Overlay\", \"Darken\", \"Lighten\", \"ColorDodge\", \"ColorBurn\", \"HardLight\", \"SoftLight\", \"Difference\" and \"Exclusion\". public void SetBlendMode(string blendMode) Parameters blendMode string The PDF blend mode name as a string. Exceptions ArgumentNullException Thrown if blendMode is null or empty. SetMatrix(double, double, double, double, double, double) Sets the transformation matrix for the image object. public void SetMatrix(double a, double b, double c, double d, double e, double f) Parameters a double The horizontal scaling factor. b double The horizontal skewing factor. c double The vertical skewing factor. d double The vertical scaling factor. e double The horizontal translation (x-axis offset). f double The vertical translation (y-axis offset). Remarks The transformation matrix defines how the image object is scaled, skewed, rotated, and translated within the PDF. Ensure that the provided values form a valid transformation matrix. Exceptions dotPDFiumException Thrown if the operation to set the image matrix fails."
  },
  "api/nebulae.dotPDFium.PdfIsDataAvailDelegate.html": {
    "href": "api/nebulae.dotPDFium.PdfIsDataAvailDelegate.html",
    "title": "Delegate PdfIsDataAvailDelegate | dotPDFium",
    "summary": "Delegate PdfIsDataAvailDelegate Namespace nebulae.dotPDFium Assembly dotPDFium.dll Delegate to report whether a given byte range is already available. Used with FX_FILEAVAIL. public delegate int PdfIsDataAvailDelegate(object userData, ulong offset, ulong length) Parameters userData object Delegate to report whether a given byte range is already available. Used with FX_FILEAVAIL. offset ulong Delegate to report whether a given byte range is already available. Used with FX_FILEAVAIL. length ulong Delegate to report whether a given byte range is already available. Used with FX_FILEAVAIL. Returns int Delegate to report whether a given byte range is already available. Used with FX_FILEAVAIL."
  },
  "api/nebulae.dotPDFium.PdfLink.html": {
    "href": "api/nebulae.dotPDFium.PdfLink.html",
    "title": "Class PdfLink | dotPDFium",
    "summary": "Class PdfLink Namespace nebulae.dotPDFium Assembly dotPDFium.dll public sealed class PdfLink : PdfPageObject, IDisposable Inheritance object PdfObject PdfPageObject PdfLink Implements IDisposable Inherited Members PdfPageObject.GetMarkedContentId() PdfPageObject.Transform(FsMatrix) PdfPageObject.SetPosition(double, double) PdfPageObject.ScaleBy(double, double) PdfPageObject.ScaleTo(double, double) PdfPageObject.TransformF(FsMatrixF) PdfPageObject.SetPositionF(float, float) PdfPageObject.ScaleByF(float, float) PdfPageObject.ScaleToF(float, float) PdfPageObject.GetIsActive() PdfPageObject.SetIsActive(bool) PdfPageObject.GetBounds() PdfPageObject.GetFillColor() PdfPageObject.SetFillColor(RgbaColor) PdfPageObject.GetMatrixF() PdfPageObject.SetMatrix(FsMatrixF) PdfPageObject.GetRotatedBounds() PdfPageObject.GetStrokeColor() PdfPageObject.SetStrokeColor(RgbaColor) PdfPageObject.GetStrokeWidth() PdfPageObject.SetStrokeWidth(float) PdfPageObject.HasTransparency() PdfPageObject.GetClipPath() PdfPageObject.TransformClipPath(FsMatrix) PdfPageObject.AddMark(string) PdfPageObject.RemoveMark(PdfMark) PdfPageObject.GetMarkCount() PdfPageObject.GetMark(int) PdfObject.Handle PdfObject.Type PdfObject.IsDisposed PdfObject.GetPDFiumError() PdfObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods GetAction() public PdfAction? GetAction() Returns PdfAction GetDestination() public PdfDestination? GetDestination() Returns PdfDestination"
  },
  "api/nebulae.dotPDFium.PdfLinkAnnotation.html": {
    "href": "api/nebulae.dotPDFium.PdfLinkAnnotation.html",
    "title": "Class PdfLinkAnnotation | dotPDFium",
    "summary": "Class PdfLinkAnnotation Namespace nebulae.dotPDFium Assembly dotPDFium.dll public sealed class PdfLinkAnnotation : PdfAnnotation, IDisposable Inheritance object PdfObject PdfAnnotation PdfLinkAnnotation Implements IDisposable Inherited Members PdfAnnotation.Subtype PdfAnnotation.AddFileAttachment(string) PdfAnnotation.AddInkStroke(ReadOnlySpan<FsPointF>) PdfAnnotation.AppendObject(PdfPageObject) PdfAnnotation.CommitChanges() PdfAnnotation.ClearInkStrokes() PdfAnnotation.GetAppearanceStreamName(PdfAnnotationAppearanceMode) PdfAnnotation.AppendAttachmentPoints(FsQuadPointsF) PdfAnnotation.GetAttachmentPoint(int) PdfAnnotation.GetAttachmentPointCount() PdfAnnotation.GetBorder() PdfAnnotation.GetFileAttachment() PdfAnnotation.GetInkStrokeCount() PdfAnnotation.GetInkStrokePoints(int) PdfAnnotation.GetLine() PdfAnnotation.GetLink(PdfDocument) PdfAnnotation.GetLinkedAnnotation(string) PdfAnnotation.GetNumberValue(string) PdfAnnotation.GetStringValue(string) PdfAnnotation.GetObject(int) PdfAnnotation.GetObjectCount() PdfAnnotation.GetSubtype() PdfAnnotation.GetValueType(string) PdfAnnotation.GetVertices() PdfAnnotation.HasAttachmentPoints() PdfAnnotation.HasKey(string) PdfAnnotation.IsObjectSupportedSubtype(PdfAnnotationSubtype) PdfAnnotation.IsSupportedSubtype() PdfAnnotation.GetRect() PdfAnnotation.SetRect(FsRectF) PdfAnnotation.GetColor() PdfAnnotation.SetColor(RgbaColor) PdfAnnotation.RemoveObject(int) PdfAnnotation.SetAppearanceStream(PdfAnnotationAppearanceMode, string) PdfAnnotation.SetAttachmentPoints(int, FsQuadPointsF) PdfAnnotation.SetBorder(float, float, float) PdfAnnotation.SetUri(string) PdfAnnotation.UpdateObject(PdfPageObject) PdfObject.Handle PdfObject.Type PdfObject.IsDisposed PdfObject.GetPDFiumError() PdfObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods GetAction() public PdfAction? GetAction() Returns PdfAction GetBoundingRect() public FsRectF GetBoundingRect() Returns FsRectF GetDestination(PdfDocument) public PdfDestination? GetDestination(PdfDocument doc) Parameters doc PdfDocument Returns PdfDestination GetQuadPointCount() public int GetQuadPointCount() Returns int GetQuadPoints(int) public FsQuadPointsF GetQuadPoints(int index) Parameters index int Returns FsQuadPointsF"
  },
  "api/nebulae.dotPDFium.PdfMark.html": {
    "href": "api/nebulae.dotPDFium.PdfMark.html",
    "title": "Class PdfMark | dotPDFium",
    "summary": "Class PdfMark Namespace nebulae.dotPDFium Assembly dotPDFium.dll Represents a semantic mark attached to a page object, such as accessibility or structure metadata. public sealed class PdfMark Inheritance object PdfMark Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets the name associated with the current PDF page object mark. public string Name { get; } Property Value string Remarks This property retrieves the name of the mark associated with the PDF page object. If the name cannot be determined, an empty string is returned. ParameterCount Gets the number of parameters associated with the current PDF page object mark. public int ParameterCount { get; } Property Value int Remarks This property retrieves the number of parameters defined for the mark associated with the PDF page object. It can be used to iterate through or inspect the parameters of the mark. Methods GetBlobValue(string) Retrieves the binary data (blob) associated with the specified key. public byte[]? GetBlobValue(string key) Parameters key string The key identifying the blob value to retrieve. Cannot be null or empty. Returns byte[] A byte array containing the blob value associated with the specified key, or null if the key does not exist or the blob value is empty. Remarks This method attempts to retrieve binary data associated with the given key. If the key is not found or the blob value is empty, the method returns null. GetIntValue(string) Retrieves the integer value associated with the specified key from the underlying object. public int? GetIntValue(string key) Parameters key string The key identifying the parameter whose integer value is to be retrieved. Cannot be null or empty. Returns int? The integer value associated with the specified key, or null if the key does not exist or the value cannot be retrieved. GetParamKeys() Retrieves the keys of all parameters associated with the current page object mark. public IEnumerable<string> GetParamKeys() Returns IEnumerable<string> An IEnumerable<T> of strings containing the parameter keys. The collection will be empty if no parameters are associated with the page object mark. Remarks This method enumerates the parameter keys for the page object mark represented by the current instance. The keys are returned as UTF-8 encoded strings. If a key cannot be retrieved, an empty string is returned for that key. GetParamType(string) Retrieves the parameter type associated with the specified key in the PDF mark. public PdfMarkParamType GetParamType(string key) Parameters key string The key identifying the parameter whose type is to be retrieved. Cannot be null or empty. Returns PdfMarkParamType The PdfMarkParamType representing the type of the parameter associated with the specified key. Remarks This method queries the underlying PDF object to determine the type of the parameter associated with the given key. Ensure that the key exists in the PDF mark to avoid unexpected results. GetStringValue(string) Retrieves the string value associated with the specified key from the PDF page object mark. public string? GetStringValue(string key) Parameters key string The key identifying the parameter whose string value is to be retrieved. Cannot be null or empty. Returns string The string value associated with the specified key, or null if the key does not exist or the value cannot be retrieved. RemoveParam(PdfPageObject, string) Removes a parameter with the specified key from the mark associated with the given PDF page object. public void RemoveParam(PdfPageObject obj, string key) Parameters obj PdfPageObject The PDF page object from which the parameter will be removed. Cannot be null. key string The key of the parameter to remove. Cannot be null or empty. Exceptions dotPDFiumException Thrown if the parameter with the specified key could not be removed from the mark. SetBlobParam(PdfDocument, PdfPageObject, string, byte[]) Sets a blob parameter on a specified mark within a PDF page object. public void SetBlobParam(PdfDocument doc, PdfPageObject obj, string key, byte[] data) Parameters doc PdfDocument The PdfDocument containing the page object. obj PdfPageObject The PdfPageObject to which the mark belongs. key string The key identifying the blob parameter to set. data byte[] The binary data to associate with the specified key. Must not be null or empty. Remarks This method associates binary data with a specific key on a mark within a PDF page object. The operation will fail if the underlying PDF library cannot set the parameter. Exceptions ArgumentException Thrown if data is null or empty. dotPDFiumException Thrown if the operation fails to set the blob parameter. SetIntParam(PdfDocument, PdfPageObject, string, int) Sets an integer parameter on a mark associated with a PDF page object. public void SetIntParam(PdfDocument doc, PdfPageObject obj, string key, int value) Parameters doc PdfDocument The PdfDocument containing the page object. obj PdfPageObject The PdfPageObject to which the mark is associated. key string The key identifying the parameter to set. Cannot be null or empty. value int The integer value to assign to the specified parameter. Remarks This method modifies the metadata of a mark associated with a PDF page object by setting an integer parameter. Ensure that the key is valid and that the doc and obj are properly initialized before calling this method. Exceptions dotPDFiumException Thrown if the operation fails to set the integer parameter for the specified key. SetStringParam(PdfDocument, PdfPageObject, string, string) Sets a string parameter on a mark associated with a PDF page object. public void SetStringParam(PdfDocument doc, PdfPageObject obj, string key, string value) Parameters doc PdfDocument The PdfDocument containing the page object. obj PdfPageObject The PdfPageObject to which the mark is associated. key string The key identifying the parameter to set. Cannot be null or empty. value string The string value to assign to the parameter. Cannot be null. Exceptions dotPDFiumException Thrown if the operation fails to set the string parameter."
  },
  "api/nebulae.dotPDFium.PdfObject.html": {
    "href": "api/nebulae.dotPDFium.PdfObject.html",
    "title": "Class PdfObject | dotPDFium",
    "summary": "Class PdfObject Namespace nebulae.dotPDFium Assembly dotPDFium.dll This class is the base class for all PDFium objects. It implements IDisposable to ensure proper resource management. public abstract class PdfObject : IDisposable Inheritance object PdfObject Implements IDisposable Derived PdfForm PdfAnnotation PdfBitmap PdfDocument PdfFont PdfPage PdfPageObject PdfText PdfSignature Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PdfObject(nint, PdfObjectType) Base class constructor. This constructor is protected and should not be used directly. protected PdfObject(nint handle, PdfObjectType type) Parameters handle nint type PdfObjectType Fields _disposed protected bool _disposed Field Value bool _handle protected nint _handle Field Value nint _type protected PdfObjectType _type Field Value PdfObjectType Properties Handle public nint Handle { get; } Property Value nint IsDisposed public bool IsDisposed { get; } Property Value bool Type public PdfObjectType Type { get; } Property Value PdfObjectType Methods Dispose() Releases the resources used by this instance of the PdfObject class. public virtual void Dispose() Dispose(bool) Releases the resources used by the current instance of the class. protected virtual void Dispose(bool disposing) Parameters disposing bool Are we disposing managed objects? Remarks This method should be called when the instance is no longer needed to free unmanaged resources. It ensures that any associated native resources are properly released based on the type of the object. Exceptions InvalidOperationException Thrown if the object type is not supported for disposal. ~PdfObject() Base class destructor. This destructor is here for the IDisposable pattern. protected ~PdfObject() GetPDFiumError() Returns the last error message from PDFium. public static string GetPDFiumError() Returns string"
  },
  "api/nebulae.dotPDFium.PdfObjectType.html": {
    "href": "api/nebulae.dotPDFium.PdfObjectType.html",
    "title": "Enum PdfObjectType | dotPDFium",
    "summary": "Enum PdfObjectType Namespace nebulae.dotPDFium Assembly dotPDFium.dll This enum represents the type of the PDF object. public enum PdfObjectType Fields Annotation = 6 Bitmap = 4 Document = 1 Font = 7 Form = 8 Page = 2 PageObject = 5 Signature = 9 TextPage = 3 Unknown = 0"
  },
  "api/nebulae.dotPDFium.PdfPage.html": {
    "href": "api/nebulae.dotPDFium.PdfPage.html",
    "title": "Class PdfPage | dotPDFium",
    "summary": "Class PdfPage Namespace nebulae.dotPDFium Assembly dotPDFium.dll public class PdfPage : PdfObject, IDisposable Inheritance object PdfObject PdfPage Implements IDisposable Inherited Members PdfObject._handle PdfObject._type PdfObject._disposed PdfObject.Handle PdfObject.Type PdfObject.IsDisposed PdfObject.GetPDFiumError() PdfObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Height Gets the height of the current PDF page in points. public double Height { get; } Property Value double Remarks The height is retrieved directly from the underlying PDF page handle. The value is typically used for rendering or layout purposes. HeightF Gets the height of the current PDF page in points as a float. public float HeightF { get; } Property Value float Width Gets the width of the current PDF page in points. public double Width { get; } Property Value double Remarks The width is retrieved directly from the underlying PDF page handle. The value is typically used for rendering or layout purposes. WidthF Gets the width of the current PDF page in points as a float. public float WidthF { get; } Property Value float Methods Close() Closes the current page and releases the associated resources. public void Close() CreateAnnotation(PdfAnnotationSubtype) Creates a new annotation of the specified subtype on the current PDF page. public PdfAnnotation CreateAnnotation(PdfAnnotationSubtype subtype) Parameters subtype PdfAnnotationSubtype The subtype of the annotation to create. This determines the type of annotation, such as a text note, highlight, or shape. Returns PdfAnnotation A PdfAnnotation object representing the newly created annotation. Exceptions dotPDFiumException Thrown if the annotation could not be created for the specified subtype. DeviceToPage(int, int, int, int, PdfPageRotation, int, int, out double, out double) Converts device (pixel) coordinates into page-space coordinates (points). public void DeviceToPage(int startX, int startY, int width, int height, PdfPageRotation rotate, int deviceX, int deviceY, out double pageX, out double pageY) Parameters startX int The X position of the rendered area in device pixels (usually 0). startY int The Y position of the rendered area in device pixels (usually 0). width int The width of the rendered area in pixels (matches the bitmap width). height int The height of the rendered area in pixels (matches the bitmap height). rotate PdfPageRotation The rotation of the page (0, 90, 180, 270 degrees). See PdfRotation enum. Do not swap width and height manually; PDFium handles this automatically. deviceX int The device-space X coordinate (in pixels) to convert. deviceY int The device-space Y coordinate (in pixels) to convert. pageX double Output variable for the resulting X coordinate in page-space points. pageY double Output variable for the resulting Y coordinate in page-space points. Exceptions ObjectDisposedException Thrown if the page has been disposed. Dispose(bool) Releases the resources used by the page, optionally unregistering it from the parent document. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. Remarks When disposing is true, this method unregisters the page from its parent document, if applicable. Ensure that this method is called to properly clean up resources associated with the page. EnumerateLinks() Enumerates all link annotations on the current PDF page. public IEnumerable<PdfLinkAnnotation> EnumerateLinks() Returns IEnumerable<PdfLinkAnnotation> An IEnumerable<T> of PdfLinkAnnotation objects representing the link annotations found on the page. The enumeration will be empty if no link annotations are present. Remarks This method lazily enumerates the link annotations on the page. Each PdfLinkAnnotation object represents a single link annotation and provides access to its properties and behaviors. FinalizeContent() Finalizes the content of the current page. This method should be called after all modifications to the page are complete. public void FinalizeContent() Exceptions dotPDFiumException Throws on PDFium library error FindLinkAtPoint(double, double) Finds a link annotation at the specified point on the PDF page. public PdfLinkAnnotation? FindLinkAtPoint(double x, double y) Parameters x double The x-coordinate of the point, in the coordinate system of the PDF page. y double The y-coordinate of the point, in the coordinate system of the PDF page. Returns PdfLinkAnnotation A PdfLinkAnnotation object representing the link annotation at the specified point, or null if no link annotation is found. Flatten(PdfFlattenMode) Flattens the PDF page content into a single layer, making annotations and form fields part of the page content. public PdfFlattenResult Flatten(PdfFlattenMode mode = PdfFlattenMode.NormalDisplay) Parameters mode PdfFlattenMode The flattening mode that determines how the content is rendered. Defaults to NormalDisplay. Returns PdfFlattenResult A PdfFlattenResult indicating the result of the flattening operation: Success if the operation was successful, NothingToDo if there was no content to flatten, or Fail if the operation failed. Remarks Flattening a PDF page can be useful for ensuring that annotations and form fields are no longer interactive and are instead rendered as part of the static page content. This operation is typically irreversible. GetAnnotation(int) Retrieves the annotation at the specified index on the PDF page. public PdfAnnotation GetAnnotation(int index) Parameters index int The zero-based index of the annotation to retrieve. Must be within the range of available annotations on the page. Returns PdfAnnotation A PdfAnnotation object representing the annotation at the specified index. Exceptions dotPDFiumException Thrown if the annotation at the specified index cannot be retrieved. GetAnnotationCount() Gets the total number of annotations on the current PDF page. public int GetAnnotationCount() Returns int The number of annotations on the page. Returns 0 if the page has no annotations. Remarks This method retrieves the count of annotations present on the PDF page represented by this instance. GetAnnotationIndex(PdfAnnotation) Retrieves the index of the specified annotation within the PDF page. public int GetAnnotationIndex(PdfAnnotation annotation) Parameters annotation PdfAnnotation The annotation whose index is to be retrieved. Must not be null. Returns int The zero-based index of the annotation within the page. Exceptions dotPDFiumException Thrown if the annotation cannot be located on the page. GetArtBox() Retrieves the ArtBox of the current PDF page. public FsRectF GetArtBox() Returns FsRectF A FsRectF structure representing the ArtBox of the page. The rectangle's coordinates are in user space units. Remarks The ArtBox defines the extent of the page's meaningful content as intended by the creator. This method returns the rectangle that represents the ArtBox in user space coordinates. GetBleedBox() Retrieves the bleed box of the page, which defines the region to which the page's content should be clipped when printed. public FsRectF GetBleedBox() Returns FsRectF An FsRectF structure representing the bleed box of the page. The bleed box is defined in the page's coordinate system. Remarks The bleed box is typically used in printing workflows to account for content that extends beyond the trim box, such as bleeds. GetBoundingBox() Retrieves the bounding box of the current PDF page. public FsRectF GetBoundingBox() Returns FsRectF A FsRectF structure representing the bounding box of the page. Exceptions ObjectDisposedException Thrown if the PDF page has been disposed. dotPDFiumException Thrown if the bounding box could not be retrieved. GetCropBox() Retrieves the crop box of the current page. public FsRectF GetCropBox() Returns FsRectF A FsRectF structure representing the crop box of the page. The crop box defines the visible area of the page in user space coordinates. GetDecodedThumbnailData() Retrieves the decoded thumbnail image data for the current PDF page. public byte[] GetDecodedThumbnailData() Returns byte[] A byte array containing the decoded thumbnail image data. Returns an empty array if no thumbnail data is available. Remarks The returned byte array represents the raw image data of the thumbnail. Callers can process this data further as needed, such as converting it into an image format. GetLinkAnnotation(int) Retrieves the link annotation at the specified index as a PdfAnnotation, if it exists. public PdfAnnotation? GetLinkAnnotation(int linkIndex) Parameters linkIndex int The zero-based index of the link annotation. Returns PdfAnnotation The corresponding PdfAnnotation or null if not found. GetLinkZOrderAtPoint(double, double) Gets the z-order index of a link at the specified point on the page. public int GetLinkZOrderAtPoint(double x, double y) Parameters x double The x-coordinate of the point, in the page's coordinate system. y double The y-coordinate of the point, in the page's coordinate system. Returns int The zero-based z-order index of the link at the specified point, where a lower index indicates a link closer to the top of the z-order. Returns -1 if no link is found at the specified point. Remarks The z-order index determines the stacking order of links at a given point, with lower indices representing links that are visually on top. This method can be used to identify and interact with specific links in a document. GetMediaBox() Retrieves the MediaBox of the current PDF page. public FsRectF GetMediaBox() Returns FsRectF An FsRectF structure representing the MediaBox of the page. The MediaBox defines the boundaries of the physical medium on which the page is intended to be displayed or printed. Remarks The MediaBox is the default boundary for the page content in a PDF document. It specifies the dimensions of the page in user space units. GetObject(int) Gets the object at the specified index on the current page. public PdfPageObject GetObject(int index) Parameters index int The index of the object to retrieve Returns PdfPageObject The object at the specified index Exceptions dotPDFiumException Throws on PDFium library error GetObjectCount() Gets the number of objects on the current page. public int GetObjectCount() Returns int GetOrLoadText() Gets the text content of the current PDF page if it is already loaded, otherwise loads it. public PdfText GetOrLoadText() Returns PdfText Exceptions ObjectDisposedException Throws if the page has been disposed dotPDFiumException Throws on PDFium library error GetRawThumbnailData() Retrieves the raw thumbnail data for the current PDF page. public byte[] GetRawThumbnailData() Returns byte[] A byte array containing the raw thumbnail data of the PDF page. Returns an empty array if no thumbnail data is available. Remarks The raw thumbnail data can be used for further processing or rendering. The caller is responsible for interpreting the data appropriately. GetRotation() Gets the rotation of the current PDF page. public PdfPageRotation GetRotation() Returns PdfPageRotation A PdfPageRotation value representing the rotation of the page. Exceptions dotPDFiumException Thrown if the rotation value retrieved from the native PDF library is invalid. GetStructTree() Gets the logical structure tree for this page, if one exists. public PdfStructTree? GetStructTree() Returns PdfStructTree A PdfStructTree, or null if the page has no tagged content. GetThumbnailBitmap() Retrieves the thumbnail image of the current PDF page as a PdfBitmap object. public PdfBitmap? GetThumbnailBitmap() Returns PdfBitmap A PdfBitmap representing the thumbnail image of the current PDF page, or null if no thumbnail is available. Remarks The returned PdfBitmap contains the thumbnail image of the current PDF page, with its dimensions estimated based on the bitmap's stride and format. If the thumbnail cannot be retrieved, the method returns null. Exceptions dotPDFiumException Thrown if the thumbnail image is in an unsupported format. GetTrimBox() Retrieves the trim box of the current page. public FsRectF GetTrimBox() Returns FsRectF An FsRectF structure representing the trim box of the page. The trim box defines the intended dimensions of the page's content after trimming. HasTransparency() Determines whether the PDF page contains any transparent elements. public bool HasTransparency() Returns bool true if the PDF page has transparent elements; otherwise, false. Remarks This method checks for the presence of transparency on the PDF page, which may affect rendering or printing. InsertObject(PdfPageObject) Insert a PDF page object into the current page. public void InsertObject(PdfPageObject obj) Parameters obj PdfPageObject The PdfObject to insert into the page Exceptions ArgumentNullException Throws if obj is null PageToDevice(int, int, int, int, PdfPageRotation, double, double, out int, out int) Converts a point from page coordinates (points) to device coordinates (pixels). public void PageToDevice(int startX, int startY, int width, int height, PdfPageRotation rotate, double pageX, double pageY, out int deviceX, out int deviceY) Parameters startX int The X offset in device pixels where the page rendering starts (usually 0). startY int The Y offset in device pixels where the page rendering starts (usually 0). width int The width of the rendered area in device pixels (e.g., the bitmap width). height int The height of the rendered area in device pixels (e.g., the bitmap height). rotate PdfPageRotation pageX double The X coordinate in page space (points, where 1 point = 1/72 inch). pageY double The Y coordinate in page space (points). deviceX int Output parameter receiving the corresponding X coordinate in device space (pixels). deviceY int Output parameter receiving the corresponding Y coordinate in device space (pixels). Exceptions ObjectDisposedException Thrown if the page has been disposed. RemoveAnnotation(PdfAnnotation) Removes the specified annotation from the PDF page. public void RemoveAnnotation(PdfAnnotation annotation) Parameters annotation PdfAnnotation The annotation to remove from the page. This parameter cannot be null. Remarks Use this method to delete an annotation from the current PDF page. Ensure that the annotation is valid and associated with this page before calling this method. Exceptions dotPDFiumException Thrown if the annotation could not be removed from the page. RemoveObject(PdfPageObject) Removes the specified PDF page object from the current page. public void RemoveObject(PdfPageObject obj) Parameters obj PdfPageObject The PdfPageObject to remove. This parameter cannot be null. Exceptions dotPDFiumException Thrown if the removal operation fails due to an error in the underlying PDF library. RenderToBitmap(PdfBitmap, int, int, int, int, PdfPageRotation, PdfRenderFlags) This method renders the current PDF page to a bitmap. public void RenderToBitmap(PdfBitmap bitmap, int startX, int startY, int width, int height, PdfPageRotation rotate = PdfPageRotation.NoRotation, PdfRenderFlags flags = PdfRenderFlags.None) Parameters bitmap PdfBitmap The bitmap to render the page to startX int The starting x coordinate in pixels startY int The starting y coordinate in pixels width int The width of the bitmap to render in pixels height int The height of the bitmap to render in pixels rotate PdfPageRotation The rotation of the page (see PdfRotation enum) flags PdfRenderFlags See PdfRenderFlags Exceptions ObjectDisposedException ArgumentNullException RenderToBitmapWithMatrix(PdfBitmap, ref FsMatrixF, ref FsRectF, PdfRenderFlags) Renders the current PDF page to a bitmap using a transformation matrix and clipping rectangle. public void RenderToBitmapWithMatrix(PdfBitmap bitmap, ref FsMatrixF transform, ref FsRectF clip, PdfRenderFlags flags = PdfRenderFlags.None) Parameters bitmap PdfBitmap The bitmap to render to transform FsMatrixF The transform matrix for the page clip FsRectF The clipping rectangle for the page flags PdfRenderFlags Flags - see PdfRenderFlags Exceptions ObjectDisposedException Thrown if the PDF page has already been disposed ArgumentNullException Thrown if the PDF bitmap is null SetArtBox(FsRectF) Sets the ArtBox for the current page. public void SetArtBox(FsRectF box) Parameters box FsRectF The FsRectF structure defining the ArtBox dimensions. The coordinates must be specified in the page's coordinate system. Remarks The ArtBox defines the extent of the page's meaningful content, excluding any additional elements such as bleed or trim areas. Ensure that the specified box is valid and within the page's boundaries. SetBleedBox(FsRectF) Sets the bleed box for the current page. public void SetBleedBox(FsRectF box) Parameters box FsRectF The FsRectF structure representing the bleed box dimensions. The bleed box defines the region to which the page content should extend, typically used for printing purposes. Remarks The bleed box is used to ensure that content intended to extend to the edge of the page is printed correctly, even if the page is trimmed. Ensure that the box parameter specifies valid dimensions within the page boundaries. SetCropBox(FsRectF) Sets the crop box for the current page. public void SetCropBox(FsRectF box) Parameters box FsRectF The FsRectF structure defining the crop box dimensions. The coordinates are specified in points, with the origin at the bottom-left corner of the page. Remarks The crop box defines the visible area of the page when displayed or printed. Any content outside the crop box will be clipped. SetMediaBox(FsRectF) Sets the MediaBox for the current page. public void SetMediaBox(FsRectF box) Parameters box FsRectF The FsRectF structure representing the new MediaBox dimensions. The coordinates must be specified in points and follow the PDF coordinate system. Remarks The MediaBox defines the boundaries of the physical medium on which the page is intended to be displayed or printed. Ensure that the provided box is valid and within the acceptable range for the page. SetRotation(PdfPageRotation) Sets the rotation of the current PDF page. public void SetRotation(PdfPageRotation rotation) Parameters rotation PdfPageRotation The desired rotation for the page, specified as a PdfPageRotation value. Remarks This method updates the rotation of the page to the specified value. The rotation is applied in 90-degree increments, as defined by the PdfPageRotation enumeration. SetTrimBox(FsRectF) Sets the trim box for the current page. public void SetTrimBox(FsRectF box) Parameters box FsRectF The FsRectF structure representing the trim box dimensions. The trim box defines the intended visible area of the page after trimming. Remarks The trim box is typically used to specify the final dimensions of the page after any trimming or cutting operations. Ensure that the provided box dimensions are valid and within the bounds of the page. TransformAnnotations(FsMatrix) Applies a transformation matrix to all annotations on the current PDF page. public void TransformAnnotations(FsMatrix matrix) Parameters matrix FsMatrix The transformation matrix to apply. Each element of the matrix represents a specific transformation component (e.g., scaling, rotation, translation). Remarks This method modifies the appearance and positioning of annotations on the page by applying the specified transformation matrix. The transformation is applied directly to the annotations and does not affect the page content itself. TransformWithClip(FsMatrixF, FsRectF) Applies a transformation matrix and a clipping rectangle to the current page. public void TransformWithClip(FsMatrixF matrix, FsRectF clip) Parameters matrix FsMatrixF The transformation matrix to apply to the page. This defines how the page content is scaled, rotated, or translated. clip FsRectF The clipping rectangle that limits the visible area of the page after the transformation is applied. Exceptions dotPDFiumException Thrown if the transformation or clipping operation fails. TryGetOrLoadText(out PdfText?) Gets the text content of the current PDF page if it is already loaded, otherwise loads it. public bool TryGetOrLoadText(out PdfText? pdfText) Parameters pdfText PdfText Out parameter for receiving the PdfText object Returns bool true on success, false on failure"
  },
  "api/nebulae.dotPDFium.PdfPageObject.html": {
    "href": "api/nebulae.dotPDFium.PdfPageObject.html",
    "title": "Class PdfPageObject | dotPDFium",
    "summary": "Class PdfPageObject Namespace nebulae.dotPDFium Assembly dotPDFium.dll Represents a page object within a PDF document, such as text, images, or shapes. public class PdfPageObject : PdfObject, IDisposable Inheritance object PdfObject PdfPageObject Implements IDisposable Derived PdfImageObject PdfLink PdfPathObject PdfTextObject Inherited Members PdfObject._handle PdfObject._type PdfObject._disposed PdfObject.Handle PdfObject.Type PdfObject.IsDisposed PdfObject.GetPDFiumError() PdfObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class provides methods to manipulate and retrieve information about a specific page object. Page objects are elements that make up the content of a PDF page, and they can be transformed or queried for their properties, such as bounds. Fields _hasOwner protected bool _hasOwner Field Value bool Methods AddMark(string) Adds a mark with the specified tag to the PDF page object. public PdfMark AddMark(string tag) Parameters tag string The tag identifying the mark to be added. Cannot be null, empty, or consist only of whitespace. Returns PdfMark A PdfMark instance representing the newly added mark. Exceptions ArgumentException Thrown if tag is null, empty, or consists only of whitespace. dotPDFiumException Thrown if the mark could not be added to the page object. Dispose(bool) The dispose method for the PdfPageObject class. This method is called to release the resources used by this object. It overrides the base class Dispose method to ensure that the native handle is properly destroyed. protected override void Dispose(bool disposing) Parameters disposing bool GetBounds() Gets the bounds of the page object. The bounds are represented as a rectangle defined by its left, bottom, right, and top. public FsRectF GetBounds() Returns FsRectF Exceptions dotPDFiumException GetClipPath() Retrieves the handle to the clip path associated with the current page object. public nint? GetClipPath() Returns nint? A nullable nint representing the handle to the clip path. Returns null if no clip path is associated with the page object. GetFillColor() Retrieves the fill color of the PDF page object. public RgbaColor GetFillColor() Returns RgbaColor An RgbaColor structure representing the fill color of the object, including red, green, blue, and alpha channel values. Exceptions dotPDFiumException Thrown if the fill color cannot be retrieved due to an error in the underlying PDF library. GetIsActive() Determines whether the current page object is active. public bool GetIsActive() Returns bool true if the page object is active; otherwise, false. Remarks This method checks the active state of the page object associated with the current instance. If the underlying operation fails, the method returns false. GetMark(int) Retrieves the PdfMark at the specified index. public PdfMark GetMark(int index) Parameters index int The zero-based index of the mark to retrieve. Must be within the range of available marks. Returns PdfMark The PdfMark at the specified index. Exceptions ArgumentOutOfRangeException Thrown if index is less than 0 or greater than or equal to the total number of marks. dotPDFiumException Thrown if the mark cannot be retrieved due to an internal error. GetMarkCount() Gets the number of marks associated with the current PDF page object. public int GetMarkCount() Returns int The total number of marks present in the PDF page object. Returns 0 if no marks are associated. Remarks Marks are metadata or annotations associated with a PDF page object. This method retrieves the count of such marks. GetMarkedContentId() Gets the marked content ID (MCID) associated with this page object. public int GetMarkedContentId() Returns int The marked content ID, or -1 if none is associated. Remarks The MCID is used in tagged/structured PDFs to associate content with logical structure. Returns -1 if no MCID is present. GetMatrixF() Retrieves the transformation matrix associated with the current PDF object. public FsMatrixF GetMatrixF() Returns FsMatrixF An FsMatrixF representing the transformation matrix of the PDF object. Exceptions dotPDFiumException Thrown if the transformation matrix cannot be retrieved due to an error in the underlying PDF library. GetRotatedBounds() Retrieves the rotated bounding box of the current PDF page object. public FsQuadPointsF GetRotatedBounds() Returns FsQuadPointsF A FsQuadPointsF structure representing the four corners of the rotated bounding box. Exceptions dotPDFiumException Thrown if the operation fails to retrieve the rotated bounds. GetStrokeColor() Retrieves the stroke color of the current PDF page object. public RgbaColor GetStrokeColor() Returns RgbaColor An RgbaColor structure representing the stroke color, including red, green, blue, and alpha channel values. Exceptions dotPDFiumException Thrown if the stroke color cannot be retrieved due to an error in the underlying PDF library. GetStrokeWidth() Retrieves the stroke width of the current PDF page object. public float GetStrokeWidth() Returns float The stroke width of the PDF page object as a float. Exceptions dotPDFiumException Thrown if the stroke width cannot be retrieved due to an error in the underlying PDF library. HasTransparency() Determines whether the PDF page object has transparency. public bool HasTransparency() Returns bool true if the PDF page object contains transparent elements; otherwise, false. Remarks This method checks for the presence of transparency in the PDF page object, which may affect rendering or printing. RemoveMark(PdfMark) Removes the specified mark from the PDF page object. public void RemoveMark(PdfMark mark) Parameters mark PdfMark The PdfMark to be removed. Must not be null. Exceptions dotPDFiumException Thrown if the mark could not be removed from the page object. ScaleBy(double, double) Scales the object by the specified factors in the x and y directions. The scaling is done relative to the original position of the object. The parameters sx and sy are the scaling factors in the x and y directions, public void ScaleBy(double sx, double sy) Parameters sx double sy double ScaleByF(float, float) Scales the object by the specified factors in the x and y directions. The scaling is done relative to the original position of the object. The parameters sx and sy are the scaling factors in the x and y directions, public void ScaleByF(float sx, float sy) Parameters sx float sy float ScaleTo(double, double) Scales the object to fit within the specified width and height. The scaling is done relative to the original position of the object. The parameters targetWidth and targetHeight are the desired dimensions public void ScaleTo(double targetWidth, double targetHeight) Parameters targetWidth double Desired width targetHeight double Desired height Exceptions InvalidOperationException Thrown when the object bounds are zero ScaleToF(float, float) Scales the object to fit within the specified width and height. The scaling is done relative to the original position of the object. The parameters targetWidth and targetHeight are the desired dimensions public void ScaleToF(float targetWidth, float targetHeight) Parameters targetWidth float Desired width targetHeight float Desired height Exceptions InvalidOperationException Thrown when the object bounds are zero SetFillColor(RgbaColor) public void SetFillColor(RgbaColor color) Parameters color RgbaColor SetIsActive(bool) Sets the active state of the PDF page object. public void SetIsActive(bool active) Parameters active bool true to activate the page object; false to deactivate it. Remarks The active state of a page object may influence its visibility or behavior in certain contexts. Ensure that the appropriate state is set based on the desired outcome. SetMatrix(FsMatrixF) Sets the transformation matrix for the current PDF page object. public void SetMatrix(FsMatrixF matrix) Parameters matrix FsMatrixF The transformation matrix to apply. This defines how the page object is scaled, rotated, or translated. Exceptions dotPDFiumException Thrown if the matrix could not be applied. The exception message will contain additional details about the failure. SetPosition(double, double) Sets the x, y position of the page object. x is the horizontal distance from the left edge of the page and y is the vertical distance from the bottom edge of the page. public void SetPosition(double x, double y) Parameters x double The horizontal distance from the left edge of the page y double The vertical distance from the bottom edge of the page SetPositionF(float, float) Sets the x, y position of the page object. x is the horizontal distance from the left edge of the page and y is the vertical distance from the bottom edge of the page. public void SetPositionF(float x, float y) Parameters x float The horizontal distance from the left edge of the page y float The vertical distance from the bottom edge of the page SetStrokeColor(RgbaColor) Sets the stroke color for the current PDF page object. public void SetStrokeColor(RgbaColor color) Parameters color RgbaColor The RgbaColor structure representing the stroke color, including red, green, blue, and alpha components. Remarks The stroke color determines the color used for drawing the outline of shapes or paths in the PDF page object. Ensure that the color parameter contains valid RGBA values, where each component is in the range of 0 to 255. SetStrokeWidth(float) Sets the stroke width for the current PDF page object. public void SetStrokeWidth(float width) Parameters width float The width of the stroke, in points. Must be a non-negative value. Exceptions dotPDFiumException Thrown if the operation fails due to an error in the underlying PDF library. Transform(FsMatrix) Transforms a page object using a specified transformation matrix. The transformation matrix is defined by the six parameters: a, b, c, d, e, and f. This method modifies the object's position and size on the page. public void Transform(FsMatrix matrix) Parameters matrix FsMatrix TransformClipPath(FsMatrix) Applies a transformation to the clip path of the current page object using the specified matrix. public void TransformClipPath(FsMatrix matrix) Parameters matrix FsMatrix The transformation matrix to apply. The matrix defines how the clip path should be scaled, rotated, translated, or skewed. Each component of the matrix must be specified. Remarks This method modifies the clip path of the page object by applying the given transformation matrix. Ensure that the matrix is properly defined to achieve the desired transformation. TransformF(FsMatrixF) Transforms a page object using a specified transformation matrix. The transformation matrix is defined by the six parameters: a, b, c, d, e, and f. This method modifies the object's position and size on the page. public void TransformF(FsMatrixF matrix) Parameters matrix FsMatrixF"
  },
  "api/nebulae.dotPDFium.PdfPathObject.html": {
    "href": "api/nebulae.dotPDFium.PdfPathObject.html",
    "title": "Class PdfPathObject | dotPDFium",
    "summary": "Class PdfPathObject Namespace nebulae.dotPDFium Assembly dotPDFium.dll public class PdfPathObject : PdfPageObject, IDisposable Inheritance object PdfObject PdfPageObject PdfPathObject Implements IDisposable Inherited Members PdfPageObject._hasOwner PdfPageObject.GetMarkedContentId() PdfPageObject.Transform(FsMatrix) PdfPageObject.SetPosition(double, double) PdfPageObject.ScaleBy(double, double) PdfPageObject.ScaleTo(double, double) PdfPageObject.TransformF(FsMatrixF) PdfPageObject.SetPositionF(float, float) PdfPageObject.ScaleByF(float, float) PdfPageObject.ScaleToF(float, float) PdfPageObject.GetIsActive() PdfPageObject.SetIsActive(bool) PdfPageObject.GetBounds() PdfPageObject.GetFillColor() PdfPageObject.SetFillColor(RgbaColor) PdfPageObject.GetMatrixF() PdfPageObject.SetMatrix(FsMatrixF) PdfPageObject.GetRotatedBounds() PdfPageObject.GetStrokeColor() PdfPageObject.SetStrokeColor(RgbaColor) PdfPageObject.GetStrokeWidth() PdfPageObject.SetStrokeWidth(float) PdfPageObject.HasTransparency() PdfPageObject.GetClipPath() PdfPageObject.TransformClipPath(FsMatrix) PdfPageObject.AddMark(string) PdfPageObject.RemoveMark(PdfMark) PdfPageObject.GetMarkCount() PdfPageObject.GetMark(int) PdfPageObject.Dispose(bool) PdfObject._handle PdfObject._type PdfObject._disposed PdfObject.Handle PdfObject.Type PdfObject.IsDisposed PdfObject.GetPDFiumError() PdfObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BezierTo(float, float, float, float, float, float) Appends a cubic Bézier curve to the current path. public void BezierTo(float x1, float y1, float x2, float y2, float x3, float y3) Parameters x1 float X-coordinate of the first control point. y1 float Y-coordinate of the first control point. x2 float X-coordinate of the second control point. y2 float Y-coordinate of the second control point. x3 float X-coordinate of the end point. y3 float Y-coordinate of the end point. Exceptions dotPDFiumException Thrown if the curve could not be added. ClosePath() Closes the current path in the PDF document. public void ClosePath() Remarks This method finalizes the current path by connecting the last point to the first point, forming a closed shape. It is typically used when creating vector graphics or shapes in a PDF document. If the operation fails, an exception is thrown. Exceptions dotPDFiumException Thrown if the path cannot be closed due to an error in the underlying PDF library. GetDashPattern() Retrieves the full stroke dash pattern as an array of floats. If none is defined, returns an empty array. public float[] GetDashPattern() Returns float[] GetDashPatternCount() Retrieves the dash pattern used for stroking paths in the current page object. public int GetDashPatternCount() Returns int An array of float values representing the dash pattern. Each value specifies the length of a dash or gap in the pattern. Returns an empty array if no dash pattern is defined. Exceptions dotPDFiumException Thrown if the dash pattern cannot be retrieved due to an error in the underlying PDF library. GetDashPhase() Retrieves the dash phase, which specifies the offset into the dash pattern at which stroking begins. public float GetDashPhase() Returns float The dash phase as a float. Exceptions dotPDFiumException Thrown if the phase could not be retrieved. GetDrawMode(out PdfPathDrawMode, out bool) Retrieves the drawing mode and stroke information for the current PDF path. public void GetDrawMode(out PdfPathDrawMode mode, out bool stroke) Parameters mode PdfPathDrawMode When this method returns, contains the drawing mode of the PDF path, represented as a PdfPathDrawMode enumeration value. stroke bool When this method returns, contains a value indicating whether the path is stroked. true if the path is stroked; otherwise, false. Exceptions dotPDFiumException Thrown if the drawing mode cannot be retrieved due to an error in the underlying PDFium library. GetLineCap() Retrieves the line cap style used when stroking the path. public PdfLineCapStyle GetLineCap() Returns PdfLineCapStyle A PdfLineCapStyle value indicating the cap type. GetLineJoin() Retrieves the line join style used when stroking connected segments in the path. public PdfLineJoinStyle GetLineJoin() Returns PdfLineJoinStyle A PdfLineJoinStyle indicating how corners are rendered. GetPoint() Gets the (x, y) coordinates of this path segment. public (double X, double Y) GetPoint() Returns (double X, double Y) GetSegmentCount() Returns the number of segments in this path object. public int GetSegmentCount() Returns int GetSegmentType() Gets the type of this path segment. public PdfPathSegmentType GetSegmentType() Returns PdfPathSegmentType IsCloseSegment() Returns true if this segment closes the current subpath. public bool IsCloseSegment() Returns bool LineTo(float, float) Adds a straight line segment from the current point to the specified coordinates. public void LineTo(float x, float y) Parameters x float The x-coordinate of the endpoint of the line segment. y float The y-coordinate of the endpoint of the line segment. Exceptions dotPDFiumException Thrown if the operation fails due to an error in the underlying PDF library. MoveTo(float, float) Moves the current path to the specified coordinates. public void MoveTo(float x, float y) Parameters x float The x-coordinate of the new position. y float The y-coordinate of the new position. Exceptions dotPDFiumException Thrown if the operation fails to move the path to the specified coordinates. SetDashPattern(float[], float) Sets the dash pattern and phase used when stroking the path. public void SetDashPattern(float[] pattern, float phase = 0) Parameters pattern float[] An array of floats representing the dash/gap lengths (e.g. [3,2] for 3pt line, 2pt gap). phase float Offset into the dash pattern at which stroking begins. Exceptions ArgumentException Thrown if pattern is null or empty. dotPDFiumException Thrown if the dash pattern could not be set. SetDashPhase(float) Sets the dash phase, which specifies the offset into the dash pattern at which stroking begins. public void SetDashPhase(float phase) Parameters phase float The phase offset (in points). Exceptions dotPDFiumException Thrown if the operation fails. SetDrawMode(PdfPathDrawMode, bool) Sets the drawing mode for the current PDF path. public void SetDrawMode(PdfPathDrawMode mode, bool stroke) Parameters mode PdfPathDrawMode The drawing mode to apply to the path. This determines how the path is rendered, such as fill, stroke, or a combination of both. stroke bool A value indicating whether the path should be stroked. true to stroke the path; otherwise, false. Exceptions dotPDFiumException Thrown if the operation fails to set the draw mode. SetLineCap(PdfLineCapStyle) Sets the line cap style used at the ends of stroked open subpaths. public void SetLineCap(PdfLineCapStyle capStyle) Parameters capStyle PdfLineCapStyle The desired PdfLineCapStyle. Exceptions dotPDFiumException Thrown if the operation fails. SetLineJoin(PdfLineJoinStyle) Sets the line join style used for path corners when stroking. public void SetLineJoin(PdfLineJoinStyle joinStyle) Parameters joinStyle PdfLineJoinStyle The desired PdfLineJoinStyle to apply. Exceptions dotPDFiumException Thrown if the operation fails."
  },
  "api/nebulae.dotPDFium.PdfPrintPageRange.html": {
    "href": "api/nebulae.dotPDFium.PdfPrintPageRange.html",
    "title": "Class PdfPrintPageRange | dotPDFium",
    "summary": "Class PdfPrintPageRange Namespace nebulae.dotPDFium Assembly dotPDFium.dll Represents the parsed print page range defined in /ViewerPreferences. public sealed class PdfPrintPageRange Inheritance object PdfPrintPageRange Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Count Gets the number of subranges in this print range. public int Count { get; } Property Value int Methods GetPageNumberAt(int) Gets the zero-based starting page number of the subrange at the given index. public int GetPageNumberAt(int index) Parameters index int The index of the subrange (0-based). Returns int The page number, or -1 if invalid. Exceptions ArgumentOutOfRangeException If index is out of bounds."
  },
  "api/nebulae.dotPDFium.PdfProgressiveRenderer.html": {
    "href": "api/nebulae.dotPDFium.PdfProgressiveRenderer.html",
    "title": "Class PdfProgressiveRenderer | dotPDFium",
    "summary": "Class PdfProgressiveRenderer Namespace nebulae.dotPDFium Assembly dotPDFium.dll public static class PdfProgressiveRenderer Inheritance object PdfProgressiveRenderer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Close(PdfPage) public static void Close(PdfPage page) Parameters page PdfPage Continue(PdfPage, IfSdkPause) Continues a previously started progressive render operation. public static PdfRenderStatus Continue(PdfPage page, IfSdkPause pause) Parameters page PdfPage The page being rendered. pause IfSdkPause A pause struct used to control pausing. Returns PdfRenderStatus A PdfRenderStatus indicating the current state. Start(PdfBitmap, PdfPage, int, int, int, int, int, int, IfSdkPause) public static PdfRenderStatus Start(PdfBitmap bitmap, PdfPage page, int x, int y, int width, int height, int rotation, int flags, IfSdkPause pause) Parameters bitmap PdfBitmap page PdfPage x int y int width int height int rotation int flags int pause IfSdkPause Returns PdfRenderStatus StartWithColorScheme(PdfBitmap, PdfPage, int, int, int, int, int, int, PdfColorScheme, IfSdkPause) public static PdfRenderStatus StartWithColorScheme(PdfBitmap bitmap, PdfPage page, int x, int y, int width, int height, int rotation, int flags, PdfColorScheme colorScheme, IfSdkPause pause) Parameters bitmap PdfBitmap page PdfPage x int y int width int height int rotation int flags int colorScheme PdfColorScheme pause IfSdkPause Returns PdfRenderStatus"
  },
  "api/nebulae.dotPDFium.PdfRuntime.html": {
    "href": "api/nebulae.dotPDFium.PdfRuntime.html",
    "title": "Class PdfRuntime | dotPDFium",
    "summary": "Class PdfRuntime Namespace nebulae.dotPDFium Assembly dotPDFium.dll public static class PdfRuntime Inheritance object PdfRuntime Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUnsupportedObjectHandler(UnSupportInfo) Registers a handler for unsupported PDF objects such as Type3 fonts, XFA, or advanced features. This must be set before opening documents. public static void SetUnsupportedObjectHandler(UnSupportInfo info) Parameters info UnSupportInfo The handler info struct with a function pointer."
  },
  "api/nebulae.dotPDFium.PdfStandardFont.html": {
    "href": "api/nebulae.dotPDFium.PdfStandardFont.html",
    "title": "Class PdfStandardFont | dotPDFium",
    "summary": "Class PdfStandardFont Namespace nebulae.dotPDFium Assembly dotPDFium.dll public sealed class PdfStandardFont : PdfFont, IDisposable Inheritance object PdfObject PdfFont PdfStandardFont Implements IDisposable Inherited Members PdfFont.Name PdfFont.GetBaseFontName() PdfFont.GetFamilyName() PdfFont.GetFontData() PdfFont.IsEmbedded PdfFont.GetFlags() PdfFont.GetWeight() PdfFont.GetItalicAngle() PdfFont.GetAscent(float) PdfFont.GetDescent(float) PdfFont.GetGlyphWidth(uint, float) PdfFont.GetGlyphPath(uint, float) PdfObject.Handle PdfObject.Type PdfObject.IsDisposed PdfObject.GetPDFiumError() PdfObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Dispose(bool) Releases the resources used by the current instance of the class. protected override void Dispose(bool disposing) Parameters disposing bool Are we disposing managed objects? Remarks This method should be called when the instance is no longer needed to free unmanaged resources. It ensures that any associated native resources are properly released based on the type of the object. Exceptions InvalidOperationException Thrown if the object type is not supported for disposal."
  },
  "api/nebulae.dotPDFium.PdfStreamAvailability.html": {
    "href": "api/nebulae.dotPDFium.PdfStreamAvailability.html",
    "title": "Class PdfStreamAvailability | dotPDFium",
    "summary": "Class PdfStreamAvailability Namespace nebulae.dotPDFium Assembly dotPDFium.dll Provides an interface for managing the availability of PDF data streams, enabling incremental loading and access to PDF documents and their components. public sealed class PdfStreamAvailability : IDisposable Inheritance object PdfStreamAvailability Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks This class is designed to facilitate the loading of PDF documents in scenarios where the data is retrieved incrementally, such as from a network stream. It provides methods to check the availability of the document, individual pages, and form data, as well as to determine whether the file is linearized (optimized for fast web viewing). Instances of this class must be disposed of when no longer needed to release unmanaged resources. Constructors PdfStreamAvailability(PdfStreamAvailabilityOptions) Initializes a new instance of the PdfStreamAvailability class, which provides functionality for managing PDF stream availability using custom data access and availability callbacks. public PdfStreamAvailability(PdfStreamAvailabilityOptions options) Parameters options PdfStreamAvailabilityOptions A PdfStreamAvailabilityOptions object that specifies the configuration for the PDF stream availability, including user data, data access callbacks, and availability checks. Remarks This constructor initializes the PDF stream availability context by pinning the provided user data and delegates to prevent garbage collection during the lifetime of the instance. It also sets up the necessary native interop structures for managing PDF data availability and download hints. Exceptions ArgumentNullException Thrown if options is null or if any of its required properties (UserData, GetBlock, IsDataAvailable, or RequestSegment) are null. dotPDFiumException Methods Dispose() Releases all resources used by the current instance of the class. public void Dispose() Remarks This method should be called when the instance is no longer needed to free unmanaged resources and release any allocated handles. After calling this method, the instance should not be used. IsDocAvailable() Determines whether the document is available for processing. public bool IsDocAvailable() Returns bool true if the document is available; otherwise, false. Remarks This method checks the availability of the document using the underlying PDF data availability mechanism. It is typically used to verify whether the document can be accessed or processed further. IsFormAvailable() Determines whether the form data in the PDF document is available for use. public bool IsFormAvailable() Returns bool true if the form data is available; otherwise, false. Remarks This method checks the availability of form data in the PDF document. It may be useful in scenarios where form data needs to be processed or accessed. IsLinearized() Returns whether the underlying file is linearized (Fast Web View). public bool IsLinearized() Returns bool IsPageAvailable(int) Determines whether the specified page is available for viewing or processing. public bool IsPageAvailable(int pageIndex) Parameters pageIndex int The zero-based index of the page to check. Returns bool true if the specified page is available; otherwise, false. Remarks This method checks the availability of a page in the document, which may depend on factors such as the document's loading state or the availability of required resources. TryLoadDocument(string) Attempts to load the PDF document from this availability context. public PdfDocument? TryLoadDocument(string password = \"\") Parameters password string The password, or empty string for no password. Returns PdfDocument A PdfDocument instance if the document is available; otherwise null. Exceptions dotPDFiumException If PDFium returns an invalid handle despite IsDocAvailable returning true."
  },
  "api/nebulae.dotPDFium.PdfStreamAvailabilityOptions.html": {
    "href": "api/nebulae.dotPDFium.PdfStreamAvailabilityOptions.html",
    "title": "Class PdfStreamAvailabilityOptions | dotPDFium",
    "summary": "Class PdfStreamAvailabilityOptions Namespace nebulae.dotPDFium Assembly dotPDFium.dll public sealed class PdfStreamAvailabilityOptions Inheritance object PdfStreamAvailabilityOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties FileLength public required uint FileLength { get; init; } Property Value uint GetBlock public required PdfGetBlockDelegate GetBlock { get; init; } Property Value PdfGetBlockDelegate IsDataAvailable public required PdfIsDataAvailDelegate IsDataAvailable { get; init; } Property Value PdfIsDataAvailDelegate RequestSegment public required PdfAddSegmentDelegate RequestSegment { get; init; } Property Value PdfAddSegmentDelegate UserData public required object UserData { get; init; } Property Value object"
  },
  "api/nebulae.dotPDFium.PdfStructAttributeSet.html": {
    "href": "api/nebulae.dotPDFium.PdfStructAttributeSet.html",
    "title": "Class PdfStructAttributeSet | dotPDFium",
    "summary": "Class PdfStructAttributeSet Namespace nebulae.dotPDFium Assembly dotPDFium.dll public sealed class PdfStructAttributeSet : PdfTaggedObject, IDisposable Inheritance object PdfTaggedObject PdfStructAttributeSet Implements IDisposable Inherited Members PdfTaggedObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Count Returns the number of attributes (key-value pairs) in the attribute dictionary. public int Count { get; } Property Value int Methods CountChildren() Returns the number of attributes (key-value pairs) in the structure element's attribute dictionary. public int CountChildren() Returns int GetKeyAt(int) Gets the key name for the attribute at the given index. public string? GetKeyAt(int index) Parameters index int Zero-based index into the attribute set. Returns string The key name as a string, or null if unavailable. GetValue(string) Attempts to get a named attribute from the dictionary. public PdfStructAttributeValue? GetValue(string name) Parameters name string The attribute key to retrieve. Returns PdfStructAttributeValue A PdfStructAttributeValue if found; otherwise null. GetValueAt(int) Gets the attribute value object at the given index. public PdfStructAttributeValue? GetValueAt(int index) Parameters index int Zero-based index of the attribute child. Returns PdfStructAttributeValue A PdfStructAttributeValue for the child, or null if not found. TryGetBlobValue() public byte[]? TryGetBlobValue() Returns byte[]"
  },
  "api/nebulae.dotPDFium.PdfStructAttributeValue.html": {
    "href": "api/nebulae.dotPDFium.PdfStructAttributeValue.html",
    "title": "Class PdfStructAttributeValue | dotPDFium",
    "summary": "Class PdfStructAttributeValue Namespace nebulae.dotPDFium Assembly dotPDFium.dll public sealed class PdfStructAttributeValue : PdfTaggedObject, IDisposable Inheritance object PdfTaggedObject PdfStructAttributeValue Implements IDisposable Inherited Members PdfTaggedObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods GetValueType() Gets the underlying type of this attribute value. public PdfObjectType GetValueType() Returns PdfObjectType The PdfObjectType enum value representing the attribute's type. TryGetBoolean() public bool? TryGetBoolean() Returns bool? TryGetNumber() Attempts to retrieve the attribute's value as a float. public float? TryGetNumber() Returns float? The numeric value, or null if the value is not a number. TryGetString() Attempts to retrieve the attribute's value as a UTF-8 string. public string? TryGetString() Returns string The string value, or null if the value is not a string or missing."
  },
  "api/nebulae.dotPDFium.PdfStructElement.html": {
    "href": "api/nebulae.dotPDFium.PdfStructElement.html",
    "title": "Class PdfStructElement | dotPDFium",
    "summary": "Class PdfStructElement Namespace nebulae.dotPDFium Assembly dotPDFium.dll public sealed class PdfStructElement : PdfTaggedObject, IDisposable Inheritance object PdfTaggedObject PdfStructElement Implements IDisposable Inherited Members PdfTaggedObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods CountChildren() Gets the number of child structure elements (or content references) under this element. public int CountChildren() Returns int GetActualText() Retrieves the ActualText associated with this structure element, if present. public string GetActualText() Returns string The actual text as a string, or an empty string if not defined. GetAltText() Gets the alternative text (/Alt) associated with this structure element, if present. public string GetAltText() Returns string The alternative text string, or an empty string if none exists. GetAttributeAt(int) Gets the attribute value at the specified index in the element's /A dictionary. public PdfStructAttributeValue? GetAttributeAt(int index) Parameters index int Zero-based index into the attribute set. Returns PdfStructAttributeValue A PdfStructAttributeValue, or null if invalid or missing. GetAttributeCount() Returns the number of attributes directly associated with this structure element. public int GetAttributeCount() Returns int GetAttributes() Gets the full attribute dictionary for this structure element. public PdfStructAttributeSet? GetAttributes() Returns PdfStructAttributeSet A PdfStructAttributeSet representing the attributes, or null if none exist. GetChildAt(int) Gets the child structure element at the given index. public PdfStructElement GetChildAt(int index) Parameters index int Index of the child. Returns PdfStructElement The child PdfStructElement. Exceptions ArgumentOutOfRangeException If index is invalid. GetChildMarkedContentID(int) Gets the Marked Content ID (MCID) for the child at the specified index. public int GetChildMarkedContentID(int index) Parameters index int Index of the structure child. Returns int The MCID if present, or -1 if the child is not marked content. GetElementType() Gets the structure element type as an enum. public PdfStructElementType GetElementType() Returns PdfStructElementType GetId() Gets the value of the /ID entry for this structure element. public string GetId() Returns string The ID string, or an empty string if not present. GetLanguage() Gets the language specified for this structure element (e.g., \"en-US\"). public string GetLanguage() Returns string The language string, or an empty string if not defined. GetMarkedContentId() Gets the primary Marked Content ID (MCID) associated with this structure element. public int GetMarkedContentId() Returns int The MCID, or -1 if not associated with any marked content. GetMarkedContentIdAt(int) Gets the Marked Content ID (MCID) at the specified index, if the child at that index is a marked content item. public int GetMarkedContentIdAt(int index) Parameters index int Index of the child within this structure element. Returns int The MCID, or -1 if the entry is not marked content. GetMarkedContentIdCount() Gets the number of Marked Content IDs associated with this structure element. public int GetMarkedContentIdCount() Returns int The count of MCIDs (can be 0). GetObjectType() Gets the /ObjType string associated with this structure element (if present). public string GetObjectType() Returns string The object type string (e.g., \"Annot\", \"Layout\"), or an empty string if none is defined. GetParent() Gets the parent structure element of this node, if one exists. public PdfStructElement? GetParent() Returns PdfStructElement A PdfStructElement representing the parent, or null if this is the root element. GetRawType() Gets the structure type of this element (e.g., \"H1\", \"P\", \"Table\"). public string GetRawType() Returns string GetStringAttribute(string) Retrieves the value of a string attribute associated with the specified key from the structure element. public string GetStringAttribute(string key) Parameters key string The key of the attribute to retrieve. This value cannot be null. Returns string The value of the string attribute if it exists; otherwise, an empty string. Exceptions dotPDFiumException Thrown if the attribute retrieval fails or the written size exceeds the buffer size. GetTitle() Gets the /T (title) entry of this structure element, if present. public string GetTitle() Returns string The title string, or an empty string if not defined."
  },
  "api/nebulae.dotPDFium.PdfStructTree.html": {
    "href": "api/nebulae.dotPDFium.PdfStructTree.html",
    "title": "Class PdfStructTree | dotPDFium",
    "summary": "Class PdfStructTree Namespace nebulae.dotPDFium Assembly dotPDFium.dll public sealed class PdfStructTree : PdfTaggedObject, IDisposable Inheritance object PdfTaggedObject PdfStructTree Implements IDisposable Inherited Members PdfTaggedObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods CountChildren() Returns the number of top-level structure elements in the structure tree. public int CountChildren() Returns int Dispose(bool) protected override void Dispose(bool disposing) Parameters disposing bool GetChildAt(int) Returns the structure element at the specified index. public PdfStructElement GetChildAt(int index) Parameters index int Zero-based index of the child element. Returns PdfStructElement The PdfStructElement at the specified index. Exceptions ArgumentOutOfRangeException If the index is invalid."
  },
  "api/nebulae.dotPDFium.PdfTaggedObject.html": {
    "href": "api/nebulae.dotPDFium.PdfTaggedObject.html",
    "title": "Class PdfTaggedObject | dotPDFium",
    "summary": "Class PdfTaggedObject Namespace nebulae.dotPDFium Assembly dotPDFium.dll public abstract class PdfTaggedObject : IDisposable Inheritance object PdfTaggedObject Implements IDisposable Derived PdfStructAttributeSet PdfStructAttributeValue PdfStructElement PdfStructTree Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields _handle protected nint _handle Field Value nint Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool ~PdfTaggedObject() protected ~PdfTaggedObject()"
  },
  "api/nebulae.dotPDFium.PdfText.html": {
    "href": "api/nebulae.dotPDFium.PdfText.html",
    "title": "Class PdfText | dotPDFium",
    "summary": "Class PdfText Namespace nebulae.dotPDFium Assembly dotPDFium.dll public class PdfText : PdfObject, IDisposable Inheritance object PdfObject PdfText Implements IDisposable Inherited Members PdfObject._handle PdfObject._type PdfObject._disposed PdfObject.Handle PdfObject.Type PdfObject.IsDisposed PdfObject.GetPDFiumError() PdfObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CountChars Gets the total number of characters in the associated PDF text. public int CountChars { get; } Property Value int WebLinkCount Gets the number of web links associated with the current PDF text object. public int WebLinkCount { get; } Property Value int Methods CloseWebLinks() Releases resources associated with the web links and resets the handle. public void CloseWebLinks() Remarks This method should be called to clean up resources when web link processing is no longer needed. Failing to call this method may result in resource leaks. CountRects(int, int) Counts how many bounding rectangles exist for a specific range of characters in the associated PDF text. public int CountRects(int startIndex, int count) Parameters startIndex int The starting index of the character to begin counting bounding rectangles count int The count of characters to count bounding rectangles for Returns int The number of bounding rectangles that exist for the specified range of characters Exceptions ObjectDisposedException Dispose(bool) Dispose method for the PdfText object. This method is called when the object is disposed. protected override void Dispose(bool disposing) Parameters disposing bool Whether to dispose of managed resources Find(string, bool, bool, int) Searches for the specified text in the associated PDF text. The search can be case-sensitive and/or whole-word only. public PdfTextSearch Find(string searchTerm, bool matchCase = false, bool matchWholeWord = false, int startIndex = 0) Parameters searchTerm string The term to search for matchCase bool A boolean indicating whether or not the search should be case-sensitive matchWholeWord bool Flag indicating whether or not the search whould match the whole-word only startIndex int The index of the character to begin searching at Returns PdfTextSearch A PdfTextSearch result Exceptions ArgumentException Throws if the search term is null or empty dotPDFiumException Throws on a PDFium library error GetChar(int) Gets the character at the specified index in the associated PDF text. public uint GetChar(int index) Parameters index int Returns uint Exceptions ObjectDisposedException ArgumentOutOfRangeException GetCharAngle(int) Retrieves the rotation angle of the character at the specified index within the text object. public float GetCharAngle(int index) Parameters index int The zero-based index of the character whose rotation angle is to be retrieved. Must be within the range of 0 to the total number of characters minus one. Returns float The rotation angle of the character at the specified index, in degrees. Exceptions ArgumentOutOfRangeException Thrown if index is less than 0 or greater than or equal to the total number of characters. GetCharBox(int, out double, out double, out double, out double) Gets the bounding box of the character at the specified index in the associated PDF text. public bool GetCharBox(int index, out double left, out double right, out double bottom, out double top) Parameters index int The index of the character left double The out paramater for the left dimension right double The out parameter for the right dimension bottom double The out parameter for the bottom dimension top double The out parameter for the top dimension Returns bool The bounding box of the chacter in the out parameters Exceptions ObjectDisposedException Throws if the PdfText object has been disposed ArgumentOutOfRangeException Throws if the index is out of range GetCharIndexAtPos(double, double, double, double) Gets the index of the character located at the specified position within the text. public int GetCharIndexAtPos(double x, double y, double xTolerance = 2, double yTolerance = 2) Parameters x double The x-coordinate of the position to check, in device-independent points. y double The y-coordinate of the position to check, in device-independent points. xTolerance double The horizontal tolerance, in device-independent points, for matching the position to a character. Defaults to 2.0. yTolerance double The vertical tolerance, in device-independent points, for matching the position to a character. Defaults to 2.0. Returns int The zero-based index of the character at the specified position, or -1 if no character is found within the specified tolerances. Exceptions ObjectDisposedException Thrown if the underlying text object has been disposed. GetCharIndexFromTextIndex(int) Converts a text index to the corresponding character index within the document. public int GetCharIndexFromTextIndex(int textIndex) Parameters textIndex int The zero-based index of the text element to be converted. Must be a valid index within the document's text content. Returns int The zero-based character index corresponding to the specified text index. Remarks This method maps a logical text index to its associated character index, which can be used for further text processing. Ensure that the provided textIndex is within the bounds of the document's text content to avoid exceptions. GetCharOrigin(int, out double, out double) public bool GetCharOrigin(int index, out double x, out double y) Parameters index int x double y double Returns bool GetFillColor(int) Retrieves the fill color of the character at the specified index. public RgbaColor? GetFillColor(int index) Parameters index int The zero-based index of the character whose fill color is to be retrieved. Returns RgbaColor? An RgbaColor representing the fill color of the character, or null if the fill color is not available. Exceptions ObjectDisposedException Thrown if the object has been disposed. ArgumentOutOfRangeException Thrown if index is less than 0 or greater than or equal to the total number of characters. GetFontInfo(int) Retrieves font information for the character at the specified index. public PdfFontInfo? GetFontInfo(int index) Parameters index int The zero-based index of the character for which to retrieve font information. Must be within the range of available characters. Returns PdfFontInfo A PdfFontInfo object containing the font name and style flags for the specified character, or null if the font information cannot be retrieved. Flags can be checked using the PdfFontFlags enum and .HasFlag(). Exceptions ObjectDisposedException Thrown if the PdfText object has been disposed. ArgumentOutOfRangeException Thrown if index is less than 0 or greater than or equal to the total number of characters. GetFontSize(int) Retrieves the font size of the character at the specified index in the text. public double GetFontSize(int index) Parameters index int The zero-based index of the character whose font size is to be retrieved. Must be within the range of 0 to the total character count minus one. Returns double The font size of the character at the specified index, expressed as a double. Exceptions ObjectDisposedException Thrown if the underlying text object has been disposed. ArgumentOutOfRangeException Thrown if index is less than 0 or greater than or equal to the total character count. GetFontWeight(int) Retrieves the font weight of the character at the specified index. public int GetFontWeight(int index) Parameters index int The zero-based index of the character whose font weight is to be retrieved. Must be within the range of available characters. Returns int An integer representing the font weight of the specified character. The value corresponds to the font weight as defined in the PDF document. Exceptions ObjectDisposedException Thrown if the underlying PDF text object has been disposed. ArgumentOutOfRangeException Thrown if index is less than 0 or greater than or equal to the total number of characters. GetLooseCharBox(int) Retrieves the loose bounding box of a character at the specified index within the text. public FsRectF? GetLooseCharBox(int index) Parameters index int The zero-based index of the character whose bounding box is to be retrieved. Returns FsRectF? A FsRectF structure representing the loose bounding box of the character if successful; otherwise, null. Remarks The loose bounding box may include additional space around the character, such as padding or spacing, depending on the font and rendering context. Exceptions ObjectDisposedException Thrown if the text object has been disposed. ArgumentOutOfRangeException Thrown if index is less than 0 or greater than or equal to the total number of characters. GetMatrix(int) Retrieves the transformation matrix for the character at the specified index. public FsMatrix? GetMatrix(int index) Parameters index int The zero-based index of the character for which to retrieve the transformation matrix. Returns FsMatrix? An FsMatrix representing the transformation matrix of the character if the operation is successful; otherwise, null. Remarks The transformation matrix describes how the character is positioned and scaled within the document. Exceptions ObjectDisposedException Thrown if the object has been disposed. ArgumentOutOfRangeException Thrown if index is less than 0 or greater than or equal to the total number of characters. GetStrokeColor(int) Retrieves the stroke color of the character at the specified index. public RgbaColor? GetStrokeColor(int index) Parameters index int The zero-based index of the character whose stroke color is to be retrieved. Returns RgbaColor? An RgbaColor representing the stroke color of the character, or null if the stroke color could not be determined. Exceptions ObjectDisposedException Thrown if the object has been disposed. ArgumentOutOfRangeException Thrown if index is less than 0 or greater than or equal to the total number of characters. GetTextIndexFromCharIndex(int) Converts a character index to the corresponding text index in the document. public int GetTextIndexFromCharIndex(int charIndex) Parameters charIndex int The zero-based index of the character within the text content. Returns int The zero-based text index corresponding to the specified character index. Remarks This method maps a character index to its equivalent text index, which may differ depending on the document's internal representation of text. Ensure that charIndex is within the valid range of the text content to avoid exceptions. GetTextObject(int) Retrieves the text object at the specified index within the PDF text. public PdfTextObject? GetTextObject(int index) Parameters index int The zero-based index of the text object to retrieve. Must be within the range of available text objects. Returns PdfTextObject A PdfTextObject representing the text object at the specified index, or null if no text object exists at the specified index. Exceptions ObjectDisposedException Thrown if the current PdfText instance has been disposed. ArgumentOutOfRangeException Thrown if index is less than 0 or greater than or equal to the total number of text objects. GetTextRange(int, int) Returns the chacters from the specified index and count from the associated PDF text. public string GetTextRange(int index, int count) Parameters index int The starting character index count int The number of characters to return Returns string A string from the start charcter and reading the specified number of characters Exceptions ObjectDisposedException Throws if the PdfText object has been disposed ArgumentOutOfRangeException Throws if the starting index or the ending index are out of bounds HasUnicodeMapError(int) Determines whether the character at the specified index has a Unicode mapping error. public bool HasUnicodeMapError(int index) Parameters index int The zero-based index of the character to check. Must be within the range of valid character indices. Returns bool true if the character at the specified index has a Unicode mapping error; otherwise, false. Exceptions ObjectDisposedException Thrown if the object has been disposed. ArgumentOutOfRangeException Thrown if index is less than 0 or greater than or equal to the total character count. IsGenerated(int) Determines whether the character at the specified index is a generated character. public bool IsGenerated(int index) Parameters index int The zero-based index of the character to check. Must be within the valid range of characters. Returns bool true if the character at the specified index is a generated character; otherwise, false. Exceptions ObjectDisposedException Thrown if the underlying object has been disposed. ArgumentOutOfRangeException Thrown if index is less than 0 or greater than or equal to the total character count. IsHyphen(int) Determines whether the character at the specified index is a hyphen. public bool IsHyphen(int index) Parameters index int The zero-based index of the character to check. Must be within the range of valid character indices. Returns bool true if the character at the specified index is a hyphen; otherwise, false. Exceptions ObjectDisposedException Thrown if the underlying text resource has been disposed. ArgumentOutOfRangeException Thrown if index is less than 0 or greater than or equal to the total number of characters. LoadWebLinks() Loads the web links associated with the current PDF document. public void LoadWebLinks() Remarks This method initializes the web link handle for the PDF document if it has not already been loaded. If the web link handle is already initialized, the method returns without performing any action. If the operation fails, an exception is thrown. Exceptions dotPDFiumException Thrown if the web links cannot be loaded successfully. TryCountRects(int, int, int) Counts how many bounding rectangles exist for a specific range of characters in the associated PDF text. public bool TryCountRects(int startIndex, int count, int rects) Parameters startIndex int The starting index of the character to begin counting bounding rectangles count int The count of characters to count bounding rectangles for rects int The out parameter to hold The number of bounding rectangles that exist for the specified range of characters Returns bool true on success, false on failure TryGetCharBox(int, out double, out double, out double, out double) public bool TryGetCharBox(int index, out double left, out double right, out double bottom, out double top) Parameters index int left double right double bottom double top double Returns bool TryGetCharIndexAtPos(double, double, out int, double, double) Attempts to retrieve the character index at the specified position within the document. public bool TryGetCharIndexAtPos(double x, double y, out int index, double xTolerance = 2, double yTolerance = 2) Parameters x double The x-coordinate of the position, in device-independent points. y double The y-coordinate of the position, in device-independent points. index int When this method returns, contains the zero-based index of the character at the specified position, if the operation succeeds. If the operation fails, this will be set to 0. xTolerance double The horizontal tolerance, in device-independent points, for determining the character at the position. The default value is 2.0. yTolerance double The vertical tolerance, in device-independent points, for determining the character at the position. The default value is 2.0. Returns bool true if a character index was successfully retrieved at the specified position; otherwise, false. Remarks This method returns false if the underlying document handle is invalid or if no character is found at the specified position within the given tolerances. TryGetCharOrigin(int, out double, out double) public bool TryGetCharOrigin(int index, out double x, out double y) Parameters index int x double y double Returns bool TryGetTextRange(int, int, out string) Returns the chacters from the specified index and count from the associated PDF text. public bool TryGetTextRange(int index, int count, out string text) Parameters index int The starting character index count int The number of characters to return text string Returns bool A string from the start charcter and reading the specified number of characters and true on success, false on failure"
  },
  "api/nebulae.dotPDFium.PdfTextObject.html": {
    "href": "api/nebulae.dotPDFium.PdfTextObject.html",
    "title": "Class PdfTextObject | dotPDFium",
    "summary": "Class PdfTextObject Namespace nebulae.dotPDFium Assembly dotPDFium.dll PdfTextObject represents a text object within a PDF document. It is derived from PdfPageObject and provides the ability to manipulate text content on a PDF page. public class PdfTextObject : PdfPageObject, IDisposable Inheritance object PdfObject PdfPageObject PdfTextObject Implements IDisposable Inherited Members PdfPageObject._hasOwner PdfPageObject.GetMarkedContentId() PdfPageObject.Transform(FsMatrix) PdfPageObject.SetPosition(double, double) PdfPageObject.ScaleBy(double, double) PdfPageObject.ScaleTo(double, double) PdfPageObject.TransformF(FsMatrixF) PdfPageObject.SetPositionF(float, float) PdfPageObject.ScaleByF(float, float) PdfPageObject.ScaleToF(float, float) PdfPageObject.GetIsActive() PdfPageObject.SetIsActive(bool) PdfPageObject.GetBounds() PdfPageObject.GetFillColor() PdfPageObject.SetFillColor(RgbaColor) PdfPageObject.GetMatrixF() PdfPageObject.SetMatrix(FsMatrixF) PdfPageObject.GetRotatedBounds() PdfPageObject.GetStrokeColor() PdfPageObject.SetStrokeColor(RgbaColor) PdfPageObject.GetStrokeWidth() PdfPageObject.SetStrokeWidth(float) PdfPageObject.HasTransparency() PdfPageObject.GetClipPath() PdfPageObject.TransformClipPath(FsMatrix) PdfPageObject.AddMark(string) PdfPageObject.RemoveMark(PdfMark) PdfPageObject.GetMarkCount() PdfPageObject.GetMark(int) PdfPageObject.Dispose(bool) PdfObject._handle PdfObject._type PdfObject._disposed PdfObject.Handle PdfObject.Type PdfObject.IsDisposed PdfObject.GetPDFiumError() PdfObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetFont() Retrieves the font associated with the current text object. public PdfFont GetFont() Returns PdfFont A PdfFont instance representing the font of the text object. Exceptions dotPDFiumException Thrown if the font cannot be retrieved from the text object. GetFontSize() Retrieves the font size of the text object. public float GetFontSize() Returns float The font size of the text object as a float. Exceptions dotPDFiumException Thrown if the font size cannot be retrieved from the text object. GetRenderMode() Retrieves the text rendering mode of the current PDF text object. public PdfTextRenderMode GetRenderMode() Returns PdfTextRenderMode A PdfTextRenderMode value representing the rendering mode of the text object. Exceptions dotPDFiumException Thrown if the text rendering mode retrieved is not a valid PdfTextRenderMode value. GetText(PdfPage) Extracts the text content from the specified PDF page. public string GetText(PdfPage page) Parameters page PdfPage The PdfPage object representing the page from which to extract text. Returns string A string containing the text content of the specified PDF page. Returns an empty string if the page contains no text or if the extraction fails. Remarks The extracted text may include a null terminator at the end, which is removed before returning the result. SetRenderMode(PdfTextRenderMode) Sets the text rendering mode for the current PDF text object. public void SetRenderMode(PdfTextRenderMode mode) Parameters mode PdfTextRenderMode The text rendering mode to apply. This determines how text is rendered, such as fill, stroke, or a combination of both. Remarks The mode parameter specifies the rendering style for text, which can include options such as filling, stroking, or clipping text. Ensure that the text object is valid and properly initialized before calling this method. Exceptions dotPDFiumException Thrown if the operation fails due to an error in the underlying PDF library. SetText(string) Sets the text content of the PdfTextObject. This method allows you to modify the text displayed in the text object. public void SetText(string text) Parameters text string Exceptions dotPDFiumException"
  },
  "api/nebulae.dotPDFium.PdfTextSearch.html": {
    "href": "api/nebulae.dotPDFium.PdfTextSearch.html",
    "title": "Class PdfTextSearch | dotPDFium",
    "summary": "Class PdfTextSearch Namespace nebulae.dotPDFium Assembly dotPDFium.dll The PdfTextSearch class provides functionality for handling search results within a PdfText object. public class PdfTextSearch : IDisposable Inheritance object PdfTextSearch Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentIndex Gets the current index of the search cursor. public int CurrentIndex { get; } Property Value int MatchCount Returns the number of search results for the current search string. public int MatchCount { get; } Property Value int Methods Dispose() Releases the resources used by the current instance of the class. public void Dispose() Remarks This method should be called to release unmanaged resources when the instance is no longer needed. Failure to call this method may result in resource leaks. FindNext() Find next search result. Moves the search cursor to thext match of the search string. public bool FindNext() Returns bool FindPrev() Find previous search result. Moves the search cursor to the previous match of the search string. public bool FindPrev() Returns bool"
  },
  "api/nebulae.dotPDFium.PdfWebLink.html": {
    "href": "api/nebulae.dotPDFium.PdfWebLink.html",
    "title": "Class PdfWebLink | dotPDFium",
    "summary": "Class PdfWebLink Namespace nebulae.dotPDFium Assembly dotPDFium.dll Represents a web link within a PDF document, providing access to its associated text range, URL, and bounding rectangles. public sealed class PdfWebLink Inheritance object PdfWebLink Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks This class allows users to retrieve information about a web link in a PDF, such as its text range, URL, and the rectangular regions that define its clickable area. Instances of this class are typically obtained through a parent PdfText object. Methods GetRect(int) Retrieves the rectangle at the specified index for the current link. public FsRect GetRect(int rectIndex) Parameters rectIndex int The zero-based index of the rectangle to retrieve. Returns FsRect An FsRect representing the rectangle's boundaries, defined by its left, top, right, and bottom coordinates. Exceptions dotPDFiumException Thrown if the rectangle cannot be retrieved for the specified rectIndex. GetRectCount() Gets the number of rectangular areas associated with the current link annotation. public int GetRectCount() Returns int The total number of rectangular areas that define the clickable regions of the link annotation. Returns 0 if no rectangles are associated with the link. Remarks This method retrieves the count of rectangles that represent the clickable regions of a link annotation in a PDF document. Each rectangle corresponds to a distinct clickable area. GetRects() Retrieves a collection of rectangles currently managed by the system. public IEnumerable<FsRect> GetRects() Returns IEnumerable<FsRect> An IEnumerable<T> of FsRect objects representing the rectangles. The collection will be empty if no rectangles are available. Remarks Each rectangle in the collection is retrieved lazily as the enumeration progresses. This method is suitable for scenarios where the number of rectangles is large or unknown, as it avoids loading all rectangles into memory at once. GetTextRange() Retrieves the start position and length of the text range associated with the current web link. public (int Start, int Length) GetTextRange() Returns (int Start, int Length) A tuple containing the start position and length of the text range: Start: The zero-based starting position of the text range. Length: The number of characters in the text range. Exceptions dotPDFiumException Thrown if the text range cannot be retrieved due to an internal error. GetUrl() Retrieves the URL associated with the current link object. public string GetUrl() Returns string A string containing the URL of the link. Returns an empty string if no URL is available. Remarks The returned URL is trimmed of any trailing null characters. This method allocates unmanaged memory to retrieve the URL and ensures proper cleanup of resources."
  },
  "api/nebulae.dotPDFium.Security.PdfSignature.html": {
    "href": "api/nebulae.dotPDFium.Security.PdfSignature.html",
    "title": "Class PdfSignature | dotPDFium",
    "summary": "Class PdfSignature Namespace nebulae.dotPDFium.Security Assembly dotPDFium.dll Represents a digital signature in a PDF document. public sealed class PdfSignature : PdfObject, IDisposable Inheritance object PdfObject PdfSignature Implements IDisposable Inherited Members PdfObject.Handle PdfObject.Type PdfObject.IsDisposed PdfObject.GetPDFiumError() PdfObject.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods GetByteRange() Gets the byte range used to compute the signature hash. This typically contains 4 integers: start offset, length before signature, offset after signature, and length after. public IReadOnlyList<int> GetByteRange() Returns IReadOnlyList<int> A list of signed byte range values, or empty if none are present. GetContents() Gets the raw PKCS#7 signature contents as a DER-encoded binary blob. public byte[] GetContents() Returns byte[] A byte array containing the raw signature data. GetDocMDPPermission() Gets the DocMDP permission level defined by this signature. public PdfDocMDPPermission GetDocMDPPermission() Returns PdfDocMDPPermission A PdfDocMDPPermission value indicating the allowed operations after signing. GetReason() Gets the human-readable reason string associated with the signature (if available). public string GetReason() Returns string The reason string provided by the signer, or an empty string if none. GetSigningTime() Gets the timestamp string associated with the signature (typically from the /M field). public string GetSigningTime() Returns string A string containing the signing time, or an empty string if unavailable. GetSubFilter() Gets the SubFilter string that specifies the encoding format of the signature (e.g. PKCS7, CAdES). public string GetSubFilter() Returns string The SubFilter string, or an empty string if not present."
  },
  "api/nebulae.dotPDFium.Security.html": {
    "href": "api/nebulae.dotPDFium.Security.html",
    "title": "Namespace nebulae.dotPDFium.Security | dotPDFium",
    "summary": "Namespace nebulae.dotPDFium.Security Classes PdfSignature Represents a digital signature in a PDF document."
  },
  "api/nebulae.dotPDFium.dotPDFiumException.html": {
    "href": "api/nebulae.dotPDFium.dotPDFiumException.html",
    "title": "Class dotPDFiumException | dotPDFium",
    "summary": "Class dotPDFiumException Namespace nebulae.dotPDFium Assembly dotPDFium.dll public class dotPDFiumException : Exception, ISerializable Inheritance object Exception dotPDFiumException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors dotPDFiumException() public dotPDFiumException() dotPDFiumException(string) public dotPDFiumException(string message) Parameters message string dotPDFiumException(string, Exception) public dotPDFiumException(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/nebulae.dotPDFium.html": {
    "href": "api/nebulae.dotPDFium.html",
    "title": "Namespace nebulae.dotPDFium | dotPDFium",
    "summary": "Namespace nebulae.dotPDFium Classes PDFiumEngine PdfAction Represents an action within a PDF document, such as a hyperlink or a named action. PdfAnnotation PdfAttachment PdfBitmap The PdfBitmap class represents a bitmap image in the PDFium library. It provides methods to create and manipulate bitmap images from PDF pages. PdfBitmapFormatExtension PdfBookmark Represents a bookmark in a PDF document, providing access to its title, hierarchical structure, and associated actions or destinations. PdfDestination Represents a destination within a PDF document, typically used for navigation or linking purposes. PdfDocument PdfEmbeddedFont PdfFileSpec Represents a file specification in a PDF document. PdfFont Represents a font object in a PDF document, providing access to font properties and metrics. PdfFontInfo PdfFontRegistry Manages system font registration and integration with the PDFium engine. PdfGlyphPath Represents a glyph path in a PDF document, providing access to its segments. PdfImageObject PdfLink PdfLinkAnnotation PdfMark Represents a semantic mark attached to a page object, such as accessibility or structure metadata. PdfObject This class is the base class for all PDFium objects. It implements IDisposable to ensure proper resource management. PdfPage PdfPageObject Represents a page object within a PDF document, such as text, images, or shapes. PdfPathObject PdfPrintPageRange Represents the parsed print page range defined in /ViewerPreferences. PdfProgressiveRenderer PdfRuntime PdfStandardFont PdfStreamAvailability Provides an interface for managing the availability of PDF data streams, enabling incremental loading and access to PDF documents and their components. PdfStreamAvailabilityOptions PdfStructAttributeSet PdfStructAttributeValue PdfStructElement PdfStructTree PdfTaggedObject PdfText PdfTextObject PdfTextObject represents a text object within a PDF document. It is derived from PdfPageObject and provides the ability to manipulate text content on a PDF page. PdfTextSearch The PdfTextSearch class provides functionality for handling search results within a PdfText object. PdfWebLink Represents a web link within a PDF document, providing access to its associated text range, URL, and bounding rectangles. dotPDFiumException Structs PdfGlyphPathSegment Enums PdfObjectType This enum represents the type of the PDF object. Delegates PdfAddSegmentDelegate Delegate called by PDFium to request that a segment be downloaded or made available. Used with FX_DOWNLOADHINTS. PdfGetBlockDelegate Delegate to read data into a buffer from a backing source (Stream, network, etc.). Used with FPDF_FILEACCESS. PdfIsDataAvailDelegate Delegate to report whether a given byte range is already available. Used with FX_FILEAVAIL."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started with dotPDFium: | dotPDFium",
    "summary": "Getting Started with dotPDFium: The first thing to do is initialize the library before use (otherwise you'll get nasty library not found exceptions): PDFiumEngine.Init(); This handles initialization of both dotPDFium and the underlying pdfium library. The last thing to remember to do is to shudown when you've finished with the library: PDFiumEngine.Shutdown(); dotPDFium Basics The library is designed to abstract away the pain of calling PDFium's native functions. It is a powerful library written in C++, but its external interface is (mostly) C-based. So to spare you that torture, we have wrapped up the bulk of its functionality into easy-to-use and idiomatic C# code. The first thing you will want to do is create a PdfDocument object. You can do that by creating a completely new document: var doc = PdfDocument.CreateNew(); loading an existing document from the file system: var doc = PdfDocument.LoadFromFile(\"/path/to/file.pdf\"); or PdfDocument doc; var result = PdfDocument.TryLoadFromFile(\"/path/to/file.pdf\", doc) loading a document from memory: var doc = PdfDocument.LoadFromMemory(byteBuffer); Once you have your document object, you can work with the pages of the document via the PdfPage class. creating a new page: var page = doc.CreatePage(0, 612, 792); page units are in points, which are 1/72 of an inch (thanks Adobe); this is a standard U.S. 8.5\" x 11\" page. opening an existing page: using var page = doc.LoadPage(0); pages are loaded by 0-based index, but be warned that page indexes can and will change out from under you if you insert or delete pages. retrieving document text can be straightforward (please see the caveats below): using var doc = PdfDocument.LoadFromFile(\"example.pdf\"); var page = doc.LoadPage(0); var textPage = page.GetOrLoadText(); string fullText = textPage.GetTextRange(0, textPage.CountChars); Console.WriteLine(fullText); There are functions that handle extracting the text from a pdf, including locating characters at certain places on the page: using var doc = PdfDocument.LoadFromFile(\"example.pdf\"); var page = doc.LoadPage(0); // Load the text layer var text = page.GetOrLoadText(); // Choose a point on the page in page coordinates (e.g., 72 = 1 inch from bottom-left) double x = 150.0; double y = 500.0; // Find character at that point int index = text.GetCharIndexAtPos(x, y); if (index >= 0 && index < text.CountChars) { uint ch = text.GetChar(index); Console.WriteLine($\"Character at ({x}, {y}) is: {(char)ch} (U+{ch:X4})\"); } else { Console.WriteLine(\"No character found at that point.\"); } page rendering is done through the PdfBitmap class and can be handled via System.Drawing on Windows, or you can use SixLabors' ImageSharp for true cross-platform compatibility. Another key point is that PdfDocuments are measured in points, while PdfBitmaps are measured in pixels. There are functions to convert between the two coordinate systems- see DeviceToPage and PageToDevice Here's the System.Drawing example: using var doc = PdfDocument.LoadFromFile(\"example.pdf\"); var page = doc.LoadPage(0); int width = 800; int height = (int)(width * (page.Height / page.Width)); using var pdfBmp = PdfBitmap.Create(width, height, PdfBitmapFormat.BGRA); page.RenderToBitmap(pdfBmp, 0, 0, width, height); using var bmp = new System.Drawing.Bitmap(width, height, width * 4, System.Drawing.Imaging.PixelFormat.Format32bppArgb, pdfBmp.Scan0); bmp.Save(\"output-drawing.png\", System.Drawing.Imaging.ImageFormat.Png); and the ImageSharp example: using var doc = PdfDocument.LoadFromFile(\"example.pdf\"); var page = doc.LoadPage(0); int width = 800; int height = (int)(width * (page.Height / page.Width)); using var pdfBmp = PdfBitmap.Create(width, height, PdfBitmapFormat.BGRA); page.RenderToBitmap(pdfBmp, 0, 0, width, height); // Wrap PDFium memory with ImageSharp without copying unsafe { var image = Image.WrapMemory<SixLabors.ImageSharp.PixelFormats.Rgba32>( new Span<SixLabors.ImageSharp.PixelFormats.Rgba32>((void*)pdfBmp.Scan0, width * height), width, height ); image.Save(\"output-sixlabors.png\"); } dotPDFium does its best to hide any and all pointers into PDFium from the user. But if you ever need a pointer to call a native function (all are publicly exposed so you can venture out as you see fit), the object pointers are all accessed like so: myPdfObject.Handle Handles can be passed to native functions without issue, but you are on your own if you venture over to that side of the library. Calls made outside the dotPDFium supplied interfaces are your responsibility to manage ownership and object destruction. It's important to note that PDFium is a canvas-based renderer and not a text-flow based one. What that means is that each object has its own transformation matrix (rotation & scaling) plus stroke, color, fill, font and weight. What this means is that sometimes dealing with it can be finicky for text extraction, because each character might be (and is) its own object. There is no support for line endings or word wrapping. We are going to add some of these functions for convenience, but you have to keep in mind the limitations of the canvas rendering perspective of the underlying PDFium. Those are the very basics to get you started. Check out the PdfDocument and PdfPage API docs, because most functions are fairly straightforward. Check out the project tests on the Github site for some more complex examples like rendering to a bitmap and then painting to that bitmap and saving to a png file."
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | dotPDFium",
    "summary": "Introduction dotPDFium is a wrapper around the Chromium project's PDFium library. PDFium itself is released under the Apache 2.0 license, while the dotPDFium wrapper is released under the MIT license. dotPDFium includes binaries for Win x64/ARM64, Linux x64/ARM64 and MacOS x64/ARM64 (as a universal dylib). This is a very early stage library and we do expect some growing pains. The first step was to get the native code covered via dllimport statements so we could build out the wrapper functionality. That is at around 98% completion with the remaining functions being for Javascript and XLA forms, which we do not intend to support at this time. If you find the library interesting, we encourage feedback (both good & bad), and would like to have a v1.0 release sometime around the end of Summer 2025. The goal is to completely wrap the underlying library in a user-friendly and in a way that is idiomatic to the .NET ecosystem. The truth is that we're going to dogfood it for a few months and see where that takes us. Documentation is light, but will be forthcoming in stages as we move along. Help and PRs are encouraged and welcome. Please enjoy."
  },
  "index.html": {
    "href": "index.html",
    "title": "dotPDFium SDK Documentation | dotPDFium",
    "summary": "dotPDFium SDK Documentation Welcome to the official documentation for dotPDFium, a modern .NET wrapper around PDFium with full support for interactive PDF form editing, rendering, and analysis. Getting Started Load and render PDF documents Inspect and modify AcroForm fields Handle keyboard/mouse input with PDFium’s form middleware Create new widget annotations (PDFium does not support creating forms, however) API Reference See the header link for all available types and namespaces."
  }
}